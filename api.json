{
  "Other": {
      "Version": "2.2.2",
      "KeyLink": "https://bstlar.com/1a/fnskinchangerkey",
      "DownloadLink": "https://bstlar.com/1a/fortniteskinchangerdownload",
      "ItemsVersion": 8,
      "MappingsUrl": "https://raw.githubusercontent.com/QualmOnAcid/Ruination/main/mappings.usmap",
      "Discord": "https://discord.gg/rxGuHfVqJG",
      "Disabled": true,
      "DisabledMessage": "Swapper is under maintenance.\nPlease check our Discord for more Information:\nhttps://discord.gg/rxGuHfVqJG",
      "DoPickaxeWarning": false,
      "OodleDLL": "https://cdn.discordapp.com/attachments/1210192326186635266/1210320943596048464/oo2core_9_win64.dll?ex=65ea2237&is=65d7ad37&hm=76ddcbd8736140e149e9b7b325a352626889bafefe6a36559835a1c821e36acb&",
      "ItemsApiDownload": "https://github.com/ruinationswapperapi/ruinationapiitems/raw/main/api.json"
  },
  "PremiumUsers": [
      "360130213507760139",
      "534810356455964703",
      "343695572961853441",
      "869948239770705980",
      "636956888268931083",
      "1004324970186428476",
      "498487145217130498",
      "962779265877815408",
      "1004324970186428476",
      "1089523689365700679",
      "1180635586630012928",
      "993946179375202304",
      "1058912903018856508",
      "1137400638662258780",
      "1146566584010293289",
      "781952744423424010",
      "351735700586233858",
      "694003649185185874",
      "864832759700389909",
      "478116289420984342",
      "950453166036619304",
      "720333500695314453",
      "999859725376167947",
      "723636717344784464",
      "1017488406089052302",
      "1054057815376932894",
      "837536207167815681",
      "943299171006439495",
      "581483715889332224",
      "936741535083540532",
      "740987243598053598",
      "958053358260871198",
      "932738788516565022",
      "580120924326461453",
      "599699818406871040",
      "1021883572208029767",
      "1105381321590710283",
      "1123393653247840346",
      "970031142105415751",
      "1043320183034482770",
      "710157215692095611",
      "1175180080868229160",
      "1063722444482953217",
      "1175180080868229160",
      "1085685108582924308",
      "842763174797508660",
      "939951487541469184",
      "1201883347542867989",
      "883615790794960916",
      "858378096226861076",
      "400372949686812672",
      "923324341607866429",
      "941947285129031730",
      "1202526312376303647",
      "681532769104560213",
      "348447449443991566",
      "1157352344174989393",
      "1086763358486810734",
      "931946101437759588",
      "197063432875409408",
      "452122756083875841",
      "1196777945583341608",
      "796832377443450880",
      "1199402744688148553"
  ],
  "BackpackIDS": [
      "BID_004_BlackKnight",
      "BID_003_RedKnight",
      "BID_343_CubeRedKnight",
      "BID_167_RedKnightWinterFemale",
      "BID_138_Celestial",
      "BID_138_Celestial",
      "BID_373_HauntLensFlare",
      "BID_388_DevilRockMale",
      "BID_389_GoatRobe",
      "BID_428_GalileoFerry_28UZ3",
      "BID_429_GalileoRocket_ZD0AF",
      "BID_430_GalileoSpeedBoat_9RXE3",
      "BID_431_GalileoFlatbed_JV1DD",
      "BID_435_Constellation",
      "BID_539_RacerZero",
      "BID_605_Soy_Y0DW7",
      "BID_610_ElasticHologram",
      "BID_621_Poison",
      "BID_627_DeliSandwich",
      "BID_643_Tapdance",
      "BID_665_Jupiter_XD7AK",
      "BID_713_FNCS21",
      "BID_733_TheGoldenSkeletonFemale_SG4HF",
      "BID_736_DayTrader_QS4PD",
      "BID_771_Lasso_ZN4VA",
      "BID_820_QuarrelFemale_7CW31",
      "BID_821_QuarrelMale_IKIS8",
      "BID_824_CelestialGlow",
      "BID_833_TieDyeFashion",
      "BID_840_FNCSGreen",
      "BID_882_EerieGhost_Y9N1T",
      "BID_889_FullMoon",
      "BID_895_ZombieElasticNeon",
      "BID_910_FNCS_Purple",
      "BID_921_Slither_85LFG",
      "BID_929_TwentyTwo",
      "BID_941_SkullPunk_W8FWD",
      "BID_943_LlamaLeague",
      "BID_946_Galactic_S1CVQ",
      "BID_947_ZestFemale_1KIDJ",
      "BID_950_Solstice_APTB0",
      "BID_952_Gimmick_Female_KM10U",
      "BID_955_Trey_18FU6",
      "BID_967_FNCSBlue",
      "BID_991_LyricalFemale",
      "BID_A_004_NeonCatSpeed",
      "BID_A_009_Grapefruit",
      "BID_A_038_PennantSeas",
      "Backpack_QuartzBlob",
      "Backpack_Radish",
      "Backpack_RoseDust",
      "Backpack_BlueGlaze",
      "Backpack_RedPepper",
      "Backpack_BoneMarrow",
      "Backpack_PennantSeasonsTide",
      "Backpack_VitalPsych",
      "Backpack_IchorIncisor",
      "Backpack_SuperNovaTaro"
  ],
  "PickaxePathOverrides": [
      {
          "ID": "Pickaxe_ID_202_AshtonBoardwalk",
          "Override": "/Game/Athena/Items/Weapons/WID_Harvest_Pickaxe_Viper",
          "Series": "None"
      },
      {
          "ID": "Pickaxe_ID_457_HightowerSquash1H",
          "Override": "/Game/Athena/Items/Weapons/WID_Harvest_Pickaxe_ZombieElasticFemale1H",
          "Series": "Marvel"
      },
      {
          "ID": "Pickaxe_ID_294_CandyCane",
          "Override": "FortniteGame/Content/Athena/Items/Weapons/WID_Harvest_Pickaxe_CandyCane",
          "Series": "DC"
      }
  ],
  "BlacklistedOptionIDS": [
      "Pickaxe_SpeedDial",
      "Character_VitalInventorBlock",
      "EID_SpeedDial"
  ],
  "AdditionalCarItems": [
      {
          "Name": "Santa Fe",
          "Description": "Decorated charm.",
          "Icon": "https://cdn.discordapp.com/attachments/1136637018634453045/1209229687797321788/T-UI-Icon-Wheel-Lean-L.png?ex=65f89ee7&is=65e629e7&hm=c614eb1bba756a30435aec209bbb888180408f8b663b15118b5dc325a2d88837&",
          "ID": "ID_Wheel_Lean",
          "Path": "FortniteGame/Plugins/GameFeatures/VehicleCosmetics/Content/Mutable/Wheels/Lean/Wheel_Lean",
          "Type": "wheel"
      }
  ],
  "SkinOptions": [
      "CID_A_007_Athena_Commando_F_StreetFashionEclipse",
      "CID_029_Athena_Commando_F_Halloween",
      "CID_645_Athena_Commando_F_Wolly",
      "CID_643_Athena_Commando_M_OrnamentSoldier",
      "Character_WeepingWoodsFestive",
      "CID_028_Athena_Commando_F",
      "Character_CardboardCrew_Holiday",
      "Character_AlmondSplash"
  ],
  "NewSkinOptions": [
      {
          "id": "CID_A_007_Athena_Commando_F_StreetFashionEclipse",
          "BodyAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Body_Commando_F_StreetFashionEclipse"
      },
      {
          "id": "CID_029_Athena_Commando_F_Halloween",
          "BodyAsset": "/Game/Athena/Heroes/Meshes/Bodies/CP_029_Athena_Body_Halloween"
      },
      {
          "id": "CID_645_Athena_Commando_F_Wolly",
          "BodyAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Body_Commando_F_Wolly"
      },
      {
          "id": "CID_643_Athena_Commando_M_OrnamentSoldier",
          "BodyAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_OrnamentSoldier"
      },
      {
          "id": "Character_WeepingWoodsFestive",
          "BodyAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_WeepingWoodsFestive"
      },
      {
          "id": "CID_028_Athena_Commando_F",
          "BodyAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_028_Athena_Body"
      },
      {
          "id": "Character_CardboardCrew_Holiday",
          "BodyAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_CardboardCrew_Holiday"
      },
      {
          "id": "Character_AlmondSplash",
          "BodyAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_AlmondSplash"
      }
  ],
  "EmoteOptions": [
     "EID_BoogieDown",
     "EID_DanceMoves",
     "EID_BlowingBubbles",
     "EID_SpeedDial",
     "EID_BillyBounce",
     "EID_VoidRedemption",
     "EID_ZebraScramble",
     "EID_LilSplit",
     "EID_OrderGuard",
     "EID_CoolOff",
     "EID_HiLowWave",
     "EID_Venice",
     "EID_DreamFeet",
     "EID_AirGuitar"
  ],
  "Variants": [
      {
          "OriginalSkinID": "CID_029_Athena_Commando_F_Halloween",
          "VariantName": "Ghoul Trooper  (Pink)",
          "ID": "CID_029_Athena_Commando_F_Halloween_PINK",
          "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_029_athena_commando_f_halloween/variants/material/mat3.png",
          "WarningMessage": "This swap will turn all Ghoul Troopers Pink ",
          "Assets": [
              {
                  "FromAsset": "/Game/Athena/Heroes/Meshes/Bodies/CP_029_Athena_Body_Halloween",
                  "ToAsset": "/Game/Athena/Heroes/Meshes/Bodies/CP_029_Athena_Body_Halloween",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/HW_01/Materials/F_MED_Commando_HW01",
                          "Replace": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Zombie_Pink/Materials/F_MED_Zombie_Pink_Body"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Commando_HW01",
                          "Replace": "F_MED_Zombie_Pink_Body"
                      }
                  ]
              },
              {
                  "FromAsset": "/Game/Athena/Heroes/Meshes/Heads/F_Med_HIS_Ramirez_Head_HW01_ATH",
                  "ToAsset": "/Game/Athena/Heroes/Meshes/Heads/F_Med_HIS_Ramirez_Head_HW01_ATH",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/HW01/F_MED_Commando_Hair_HW01",
                          "Replace": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Zombie_Pink/Materials/F_MED_Ramirez_Zombie_Pink_Hair"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Commando_Hair_HW01",
                          "Replace": "F_MED_Ramirez_Zombie_Pink_Hair"
                      },
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/HW01/F_MED_Commando_Head_HW01",
                          "Replace": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Zombie_Pink/Materials/F_MED_Ramirez_Zombie_Pink_Head"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Commando_Head_HW01",
                          "Replace": "F_MED_Ramirez_Zombie_Pink_Head"
                      }
                  ]
              }
          ]
      },
      {
          "OriginalSkinID": "CID_030_Athena_Commando_M_Halloween",
          "VariantName": "Skull Trooper (Purple)",
          "ID": "CID_030_Athena_Commando_M_Halloween_PURPLE",
          "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_030_athena_commando_m_halloween/variants/clothingcolor/mat1.png",
          "WarningMessage": "This swap will turn all Skull Troopers Purple ",
          "Assets": [
              {
                  "FromAsset": "/Game/Athena/Heroes/Meshes/Bodies/CP_030_Athena_Body_Halloween",
                  "ToAsset": "/Game/Athena/Heroes/Meshes/Bodies/CP_030_Athena_Body_Halloween",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/HW_01/Materials/M_Med_Soldier_04_HW01",
                          "Replace": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/HW01_Red/M_Med_Soldier_04_HW01_Red"
                      },
                      {
                          "Type": "string",
                          "Search": "M_Med_Soldier_04_HW01",
                          "Replace": "M_Med_Soldier_04_HW01_Red"
                      }
                  ]
              },
              {
                  "FromAsset": "/Game/Athena/Heroes/Meshes/Heads/M_Med_Soldier_Head_01_HW01_ATH",
                  "ToAsset": "/Game/Athena/Heroes/Meshes/Heads/M_Med_Soldier_Head_01_HW01_ATH",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Medium/Heads/M_MED_Commando_Head_01/Materials/HW01/M_Med_Commando_Head_01_HW01",
                          "Replace": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/HW01_Red/M_Med_Commando_Head_01_HW01"
                      },
                      {
                          "Type": "string",
                          "Search": "M_Med_Commando_Head_01_HW01",
                          "Replace": "M_Med_Commando_Head_01_HW01"
                      }
                  ]
              },
              {
                  "FromAsset": "/Game/Characters/CharacterParts/Hats/CP_Hat_Commando_HW01",
                  "ToAsset": "/BRCosmetics/Characters/CharacterParts/Hats/CP_Hat_F_Commando_RenegadeRaiderFire",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Renegade_Raider_Fire/Materials/MI_F_MED_Renegade_Raider_Fire_FaceAcc",
                          "Replace": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/HW01_Red/Male_Commando_HW01"
                      },
                      {
                          "Type": "string",
                          "Search": "MI_F_MED_Renegade_Raider_Fire_FaceAcc",
                          "Replace": "Male_Commando_HW01"
                      },

                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Renegade_Raider_Holiday/Meshes/Parts/F_MED_Renegade_Raider_Holiday_AnimBP",
                          "Replace": "/Game/Characters/Player/Male/Medium/Heads/M_MED_CAU_Jonesy_Head_01/Meshes/M_MED_CAU_Jonesy_Head_01_Export_Skeleton_AnimBP_Child"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Renegade_Raider_Holiday_AnimBP_C",
                          "Replace": "M_MED_CAU_Jonesy_Head_01_Export_Skeleton_AnimBP_Child_C"
                      },

                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Renegade_Raider_Holiday/Meshes/Parts/F_MED_Renegade_Raider_Holiday",
                          "Replace": "/Game/Characters/Player/Male/Medium/Heads/M_MED_CAU_Jonesy_Head_01/Meshes/Parts/M_MED_CAU_Jonesy_Cowl_01_M_MED_Commando_Cowl_01_MESH"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Renegade_Raider_Holiday",
                          "Replace": "M_MED_CAU_Jonesy_Cowl_01_M_MED_Commando_Cowl_01_MESH"
                      }
                  ]
              }
          ]
      },
      {
          "OriginalSkinID": "CID_A_208_Athena_Commando_M_TextilePup_C85OD",
          "VariantName": "Shady Doggo (Midnight)",
          "ID": "CID_A_208_Athena_Commando_M_TextilePup_C85OD_MIDNIGHT",
          "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_a_208_athena_commando_m_textilepup_c85od/variants/material/mat3.png",
          "WarningMessage": "This swap will turn all Shady Doggos Midnight ",
          "Assets": [
              {
                  "FromAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_TextilePup",
                  "ToAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_RenegadeRaiderIce",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/M_MED_Textile_Pup_AnimBP"
                      },
                      {
                          "Type": "string",
                          "Search": "F_Med_Soldier_01_Skeleton_AnimBP_C",
                          "Replace": "M_MED_Textile_Pup_AnimBP_C"
                      },

                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/M_MED_Textile_Pup"
                      },
                      {
                          "Type": "string",
                          "Search": "F_Med_Soldier_01",
                          "Replace": "M_MED_Textile_Pup"
                      },

                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton",
                          "Replace": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton"
                      },
                      {
                          "Type": "string",
                          "Search": "SK_M_Female_Base_Skeleton",
                          "Replace": "SK_M_MALE_Base_Skeleton"
                      },

                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Renegade_Raider_Fire/Skins/Ice/Materials/F_MED_Renegade_Raider_Ice_Body",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Black/Materials/M_MED_TextilePupBlack_Body"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Renegade_Raider_Ice_Body",
                          "Replace": "M_MED_TextilePupBlack_Body"
                      }

                  ]
              },
              {
                  "FromAsset": "/BRCosmetics/Characters/CharacterParts/FaceAccessories/CP_M_MED_TextilePup_FaceAcc",
                  "ToAsset": "/Game/Characters/CharacterParts/FaceAccessories/CP_M_LRG_CometDeer_FaceAcc",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Meshes/Parts/Male_Large_Comet_Head_AnimBP",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/Parts/M_MED_Textile_Pup_FaceAcc_AnimBP"
                      },
                      {
                          "Type": "string",
                          "Search": "Male_Large_Comet_Head_AnimBP_C",
                          "Replace": "M_MED_Textile_Pup_FaceAcc_AnimBP_C"
                      },
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Meshes/Parts/Male_Large_Comet_Head",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/Parts/M_MED_Textile_Pup_FaceAcc"
                      },
                      {
                          "Type": "string",
                          "Search": "Male_Large_Comet_Head",
                          "Replace": "M_MED_Textile_Pup_FaceAcc"
                      },
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Skins/Deer/Materials/M_LRG_Comet_Deer_Head",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Black/Materials/M_MED_TextilePupBlack_FaceAcc"
                      },
                      {
                          "Type": "string",
                          "Search": "M_LRG_Comet_Deer_Head",
                          "Replace": "M_MED_TextilePupBlack_FaceAcc"
                      }
                  ]
              }
          ]
      },
      {
          "OriginalSkinID": "CID_A_208_Athena_Commando_M_TextilePup_C85OD",
          "VariantName": "Shady Doggo (Cardinal)",
          "ID": "CID_A_208_Athena_Commando_M_TextilePup_C85OD_CARDINAL",
          "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_a_208_athena_commando_m_textilepup_c85od/variants/material/mat2.png",
          "WarningMessage": "This swap will turn all Shady Doggos Cardinal ",
          "Assets": [
              {
                  "FromAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_TextilePup",
                  "ToAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_RenegadeRaiderIce",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/M_MED_Textile_Pup_AnimBP"
                      },
                      {
                          "Type": "string",
                          "Search": "F_Med_Soldier_01_Skeleton_AnimBP_C",
                          "Replace": "M_MED_Textile_Pup_AnimBP_C"
                      },

                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/M_MED_Textile_Pup"
                      },
                      {
                          "Type": "string",
                          "Search": "F_Med_Soldier_01",
                          "Replace": "M_MED_Textile_Pup"
                      },

                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton",
                          "Replace": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton"
                      },
                      {
                          "Type": "string",
                          "Search": "SK_M_Female_Base_Skeleton",
                          "Replace": "SK_M_MALE_Base_Skeleton"
                      },

                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Renegade_Raider_Fire/Skins/Ice/Materials/F_MED_Renegade_Raider_Ice_Body",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Red/Materials/M_MED_TextilePupRed_Body"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Renegade_Raider_Ice_Body",
                          "Replace": "M_MED_TextilePupRed_Body"
                      }

                  ]
              },
              {
                  "FromAsset": "/BRCosmetics/Characters/CharacterParts/FaceAccessories/CP_M_MED_TextilePup_FaceAcc",
                  "ToAsset": "/Game/Characters/CharacterParts/FaceAccessories/CP_M_LRG_CometDeer_FaceAcc",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Meshes/Parts/Male_Large_Comet_Head_AnimBP",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/Parts/M_MED_Textile_Pup_FaceAcc_AnimBP"
                      },
                      {
                          "Type": "string",
                          "Search": "Male_Large_Comet_Head_AnimBP_C",
                          "Replace": "M_MED_Textile_Pup_FaceAcc_AnimBP_C"
                      },
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Meshes/Parts/Male_Large_Comet_Head",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/Parts/M_MED_Textile_Pup_FaceAcc"
                      },
                      {
                          "Type": "string",
                          "Search": "Male_Large_Comet_Head",
                          "Replace": "M_MED_Textile_Pup_FaceAcc"
                      },
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Skins/Deer/Materials/M_LRG_Comet_Deer_Head",
                          "Replace": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Red/Materials/M_MED_TextilePupRed_FaceAcc"
                      },
                      {
                          "Type": "string",
                          "Search": "M_LRG_Comet_Deer_Head",
                          "Replace": "M_MED_TextilePupRed_FaceAcc"
                      }
                  ]
              }
          ]
      },
      {
          "OriginalSkinID": "Character_StallionAviator",
          "VariantName": "Polo Prodigy (Iconic)",
          "ID": "Character_StallionAviator_WHITE",
          "Icon": "https://fortnite-api.com/images/cosmetics/br/character_stallionaviator/variants/material/mat2.png",
          "WarningMessage": "This swap will turn all Polo Prodigys Iconic ",
          "Assets": [
              {
                  "FromAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_StallionAviator",
                  "ToAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_RenegadeRaiderHoliday",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Meshes/F_MED_StallionAviator_AnimBP"
                      },
                      {
                          "Type": "string",
                          "Search": "F_Med_Soldier_01_Skeleton_AnimBP_C",
                          "Replace": "F_MED_StallionAviator_AnimBP_C"
                      },

                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Meshes/F_MED_StallionAviator"
                      },
                      {
                          "Type": "string",
                          "Search": "F_Med_Soldier_01",
                          "Replace": "F_MED_StallionAviator"
                      },

                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Renegade_Raider_Holiday/Materials/M_F_Renegade_Raider_Holiday_Body",
                          "Replace": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Skin/StallionAviator_White/Materials/F_MED_StallionAviator_White_Body"
                      },
                      {
                          "Type": "string",
                          "Search": "M_F_Renegade_Raider_Holiday_Body",
                          "Replace": "F_MED_StallionAviator_White_Body"
                      }

                  ]
              },
              {
                  "FromAsset": "/BRCosmetics/Characters/CharacterParts/FaceAccessories/CP_F_MED_StallionAviator_FaceAcc",
                  "ToAsset": "/BRCosmetics/Characters/CharacterParts/FaceAccessories/CP_F_MED_SportsFashion_Winter_FaceAcc",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sports_Fashion/Meshes/Parts/F_MED_Sports_Fashion_FaceAcc_AnimBP",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Meshes/Parts/F_MED_StallionAviator_FaceAcc_AnimBP"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Sports_Fashion_FaceAcc_AnimBP_C",
                          "Replace": "F_MED_StallionAviator_FaceAcc_AnimBP_C"
                      },
                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sports_Fashion/Meshes/Parts/F_MED_Sports_Fashion_FaceAcc",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Meshes/Parts/F_MED_StallionAviator_FaceAcc"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Sports_Fashion_FaceAcc",
                          "Replace": "F_MED_StallionAviator_FaceAcc"
                      },
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Sports_Fashion/Skins/Winter/Materials/F_MED_SportsFashion_Winter_Transparency_FaceAcc",
                          "Replace": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Skin/StallionAviator_White/Materials/F_MED_StallionAviator_White_FaceAcc"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_SportsFashion_Winter_Transparency_FaceAcc",
                          "Replace": "F_MED_StallionAviator_White_FaceAcc"
                      }
                  ]
              }
          ]
      },
      {
          "OriginalSkinID": "CID_757_Athena_Commando_F_WildCat",
          "VariantName": "Wildcat (Blue)",
          "ID": "CID_757_Athena_Commando_F_WildCat_BLUE",
          "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_757_athena_commando_f_wildcat/variants/material/mat2.png",
          "WarningMessage": "This swap will turn all Wildcats Blue ",
          "Assets": [
              {
                  "FromAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Body_Commando_F_WildCat",
                  "ToAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_RenegadeRaiderHoliday",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/F_MED_Wild_Cat_AnimBP"
                      },
                      {
                          "Type": "string",
                          "Search": "F_Med_Soldier_01_Skeleton_AnimBP_C",
                          "Replace": "F_MED_Wild_Cat_AnimBP_C"
                      },

                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/F_MED_Wild_Cat"
                      },
                      {
                          "Type": "string",
                          "Search": "F_Med_Soldier_01",
                          "Replace": "F_MED_Wild_Cat"
                      },

                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Renegade_Raider_Holiday/Materials/M_F_Renegade_Raider_Holiday_Body",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Body"
                      },
                      {
                          "Type": "string",
                          "Search": "M_F_Renegade_Raider_Holiday_Body",
                          "Replace": "F_MED_Wild_Cat_Blue_Body"
                      }

                  ]
              },
              {
                  "FromAsset": "/BRCosmetics/Characters/CharacterParts/FaceAccessories/CP_FaceAcc_F_WildCat",
                  "ToAsset": "/Game/Characters/CharacterParts/FaceAccessories/CP_M_LRG_CometDeer_FaceAcc",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Meshes/Parts/Male_Large_Comet_Head_AnimBP",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/Parts/F_MED_Wild_Cat_AnimBP"
                      },
                      {
                          "Type": "string",
                          "Search": "Male_Large_Comet_Head_AnimBP_C",
                          "Replace": "F_MED_Wild_Cat_AnimBP_C"
                      },
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Meshes/Parts/Male_Large_Comet_Head",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/Parts/F_MED_Wild_Cat"
                      },
                      {
                          "Type": "string",
                          "Search": "Male_Large_Comet_Head",
                          "Replace": "F_MED_Wild_Cat"
                      },
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Skins/Deer/Materials/M_LRG_Comet_Deer_Head",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Hair"
                      },
                      {
                          "Type": "string",
                          "Search": "M_LRG_Comet_Deer_Head",
                          "Replace": "F_MED_Wild_Cat_Blue_Hair"
                      }
                  ]
              },
              {
                  "FromAsset": "/BRCosmetics/Characters/CharacterParts/Female/Medium/Heads/CP_Head_F_WildCat",
                  "ToAsset": "/BRCosmetics/Characters/CharacterParts/Female/Medium/Heads/CP_Head_F_SportsFashion_Winter",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Handler_Head_01/Meshes/F_MED_Handler_Head_AnimBP_Child",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Wild_Cat_Head/Meshes/F_MED_Wild_Cat_Head_Skeleton_AnimBP_Child"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Handler_Head_AnimBP_Child_C",
                          "Replace": "F_MED_Wild_Cat_Head_Skeleton_AnimBP_Child_C"
                      },
                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Handler_Head_01/Meshes/Female_Medium_Handler_Head_02",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Wild_Cat_Head/Meshes/F_MED_Wild_Cat_Head"
                      },
                      {
                          "Type": "string",
                          "Search": "Female_Medium_Handler_Head_02",
                          "Replace": "F_MED_Wild_Cat_Head"
                      },
                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sports_Fashion/Skins/Winter/Materials/F_MED_SportsFashion_Head",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Head"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_SportsFashion_Head",
                          "Replace": "F_MED_Wild_Cat_Blue_Head"
                      }
                  ]
              }
          ]
      },
      {
          "OriginalSkinID": "CID_757_Athena_Commando_F_WildCat",
          "VariantName": "Wildcat (Blueprint)",
          "ID": "CID_757_Athena_Commando_F_WildCat_BLUEPRINT",
          "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_757_athena_commando_f_wildcat/variants/material/mat3.png",
          "WarningMessage": "This swap will turn all Wildcats Blueprint ",
          "Assets": [
              {
                  "FromAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Body_Commando_F_WildCat",
                  "ToAsset": "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_RenegadeRaiderHoliday",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/F_MED_Wild_Cat_AnimBP"
                      },
                      {
                          "Type": "string",
                          "Search": "F_Med_Soldier_01_Skeleton_AnimBP_C",
                          "Replace": "F_MED_Wild_Cat_AnimBP_C"
                      },

                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/F_MED_Wild_Cat"
                      },
                      {
                          "Type": "string",
                          "Search": "F_Med_Soldier_01",
                          "Replace": "F_MED_Wild_Cat"
                      },

                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Renegade_Raider_Holiday/Materials/M_F_Renegade_Raider_Holiday_Body",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Blueprint/Materials/F_MED_Wild_Cat_Blueprint_Body"
                      },
                      {
                          "Type": "string",
                          "Search": "M_F_Renegade_Raider_Holiday_Body",
                          "Replace": "F_MED_Wild_Cat_Blueprint_Body"
                      }

                  ]
              },
              {
                  "FromAsset": "/BRCosmetics/Characters/CharacterParts/FaceAccessories/CP_FaceAcc_F_WildCat",
                  "ToAsset": "/Game/Characters/CharacterParts/FaceAccessories/CP_M_LRG_CometDeer_FaceAcc",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Meshes/Parts/Male_Large_Comet_Head_AnimBP",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/Parts/F_MED_Wild_Cat_AnimBP"
                      },
                      {
                          "Type": "string",
                          "Search": "Male_Large_Comet_Head_AnimBP_C",
                          "Replace": "F_MED_Wild_Cat_AnimBP_C"
                      },
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Meshes/Parts/Male_Large_Comet_Head",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/Parts/F_MED_Wild_Cat"
                      },
                      {
                          "Type": "string",
                          "Search": "Male_Large_Comet_Head",
                          "Replace": "F_MED_Wild_Cat"
                      },
                      {
                          "Type": "string",
                          "Search": "/Game/Characters/Player/Male/Large/Bodies/M_LRG_Comet/Skins/Deer/Materials/M_LRG_Comet_Deer_Head",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Hair"
                      },
                      {
                          "Type": "string",
                          "Search": "M_LRG_Comet_Deer_Head",
                          "Replace": "F_MED_Wild_Cat_Blue_Hair"
                      }
                  ]
              },
              {
                  "FromAsset": "/BRCosmetics/Characters/CharacterParts/Female/Medium/Heads/CP_Head_F_WildCat",
                  "ToAsset": "/BRCosmetics/Characters/CharacterParts/Female/Medium/Heads/CP_Head_F_SportsFashion_Winter",
                  "Swaps": [
                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Handler_Head_01/Meshes/F_MED_Handler_Head_AnimBP_Child",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Wild_Cat_Head/Meshes/F_MED_Wild_Cat_Head_Skeleton_AnimBP_Child"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_Handler_Head_AnimBP_Child_C",
                          "Replace": "F_MED_Wild_Cat_Head_Skeleton_AnimBP_Child_C"
                      },
                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Handler_Head_01/Meshes/Female_Medium_Handler_Head_02",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Wild_Cat_Head/Meshes/F_MED_Wild_Cat_Head"
                      },
                      {
                          "Type": "string",
                          "Search": "Female_Medium_Handler_Head_02",
                          "Replace": "F_MED_Wild_Cat_Head"
                      },
                      {
                          "Type": "string",
                          "Search": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sports_Fashion/Skins/Winter/Materials/F_MED_SportsFashion_Head",
                          "Replace": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Head"
                      },
                      {
                          "Type": "string",
                          "Search": "F_MED_SportsFashion_Head",
                          "Replace": "F_MED_Wild_Cat_Blue_Head"
                      }
                  ]
              }
          ]
      }
  ]
}

{
    "Other": {
        "Version": "2.0.13",
        "KeyLink": "https://bstlar.com/1a/fnskinchangerkey",
        "DownloadLink": "https://bstlar.com/1a/fortniteskinchangerdownload",
        "MappingsUrl": "https://cdn.discordapp.com/attachments/1210192326186635266/1210238175943856228/FortniteRelease-28.30-CL-31511038-Windows_zs.usmap?ex=65e9d522&is=65d76022&hm=a89586084dba09ab476a8e1d32b6734c3adab8146bc8958b4042eee6fb5b7e6b&",
        "Discord": "https://discord.gg/rxGuHfVqJG",
        "Disabled": false,
        "DisabledMessage": "Swapper is under maintenance.\nPlease check our Discord for more Information:\nhttps://discord.gg/rxGuHfVqJG",
        "DoPickaxeWarning": true
    },
    "UEFNFiles": {
        "pak": "https://github.com/ruinationswap/uwufiles/raw/main/plugin.pak",
        "sig": "https://github.com/ruinationswap/uwufiles/raw/main/plugin.sig",
        "ucas": "https://github.com/ruinationswap/uwufiles/raw/main/plugin.ucas",
        "utoc": "https://github.com/ruinationswap/uwufiles/raw/main/plugin.utoc",
        "FileToUse": "pakchunk0optional-WindowsClient",
        "PluginFileToUse": "pakchunk2optional-WindowsClient"
    },
    "ChunkedFiles": [
        {
            "Name": "1",
            "pak": "",
            "sig": "",
            "ucas": "",
            "utoc": ""
        }
    ],
    "Bundles": [
        {
            "Name": "Performance Bundle (Max FPS)",
            "Icon": "https://cdn.discordapp.com/attachments/1136637018634453045/1191191211973816360/Screenshot_2023-11-24_042204.jpg?ex=65a48a44&is=65921544&hm=06d3a6b6d6169ed16ea3ac85f61640edbc3802d7ddffbc662c0a85ad28106083&",
            "UEFNFiles": {
                "pak": "https://cdn.discordapp.com/attachments/867518279950270494/1191198058545959043/plugin.pak?ex=65a490a4&is=65921ba4&hm=863b91337500c79500bb1d5062320813e753d679d9948b4ecb7068219abf8f19&",
                "sig": "https://cdn.discordapp.com/attachments/867518279950270494/1191198058843742328/plugin.sig?ex=65a490a4&is=65921ba4&hm=dd3fd1ebd177fb04ef73f5e9e7d2bf475c02973372369a7489b48db39bb7ad06&",
                "ucas": "https://cdn.discordapp.com/attachments/867518279950270494/1191198059250597939/plugin.ucas?ex=65a490a4&is=65921ba4&hm=c963fbf4ab6e7a5588998f31b217f617ab3b396918446979d1b51418ced73620&",
                "utoc": "https://cdn.discordapp.com/attachments/867518279950270494/1191198059523231764/plugin.utoc?ex=65a490a4&is=65921ba4&hm=9c17ac03edcb100a14fe49922f4183e9e13f3acc4515f48e94cd83a8f96b11e5&"
            },
            "Items": [
                {
                    "Type": "UEFNSkin",
                    "Name": "FPS Booster",
                    "ID": "CID_FPSBOOST",
                    "Description": "UwU",
                    "Rarity": "Epic",
                    "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_731_athena_commando_f_neon/icon.png",
                    "Mesh": "/Character/Flow2/flow",
                    "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
                    "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Neon/Meshes/F_MED_Neon_AnimBP.F_MED_Neon_AnimBP_C",
                    "hidpath": null,
                    "Materials": [
                        "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                        "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                        "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
                    ],
                    "Swaps": [
                        {
                          "Asset": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                          "ToAsset": "/Character/Flow2/2x2"
                        }
                      ]
                }
            ]
        }
    ],
    "Dependencies": [
    ],
    "RuinationUtils": {
        "Url": "https://github.com/ruinationswap/uwufiles/raw/main/RuinationChecker2.zip",
        "Filename": "RuinationChecker2.exe",
        "Processname": "RuinationChecker2",
        "Version": "1.0.4"
    },
    "TransformCharacters": [
        {
            "Name": "Piccolo",
            "ID": "Character_ArcticIceTalus",
            "ImageID": "Character_ArcticIceTalus_YELLOW",
            "Icon": "https://fortnite-api.com/images/cosmetics/br/character_arcticicetalus/variants/parts/stage2.png",
            "CharacterParts": [
                "/Game/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_ArcticIceTalus_Style.CP_Athena_Body_M_ArcticIceTalus_Style",
                "/Game/Characters/CharacterParts/Male/Medium/Heads/CP_Athena_Head_M_ArcticIceTalus_Style.CP_Athena_Head_M_ArcticIceTalus_Style",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_M_MED_ArcticIceTalus_Style_FaceAcc.CP_M_MED_ArcticIceTalus_Style_FaceAcc"
            ]
        },
        {
            "Name": "Jennifer Walters",
            "ID": "CID_842_Athena_Commando_F_HightowerHoneydew",
            "ImageID": "CID_842_Athena_Commando_F_HightowerHoneydew_HULK",
            "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_842_athena_commando_f_hightowerhoneydew/variants/progressive/stage2.png",
            "CharacterParts": [
                "/Game/Athena/Heroes/Meshes/Bodies/CP_Body_Commando_F_HightowerHoneydew_Swole.CP_Body_Commando_F_HightowerHoneydew_Swole",
                "/Game/Characters/CharacterParts/Female/Medium/Heads/CP_Head_F_HightowerHoneydew_Swole.CP_Head_F_HightowerHoneydew_Swole",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_F_MED_HightowerHoneydew_Swole.CP_F_MED_HightowerHoneydew_Swole"
            ]
        },
        {
            "Name": "Joey",
            "ID": "CID_A_111_Athena_Commando_M_Faux",
            "ImageID": "CID_A_111_Athena_Commando_M_Faux_FEMALE",
            "Icon": "https://cdn.discordapp.com/attachments/1134643532733354089/1171392491786862622/latest.png",
            "CharacterParts": [
                "/Game/Athena/Heroes/Meshes/Bodies/CP_Body_Commando_F_Faux.CP_Body_Commando_F_Faux",
                "/Game/Characters/CharacterParts/Female/Medium/Heads/CP_Head_F_Faux.CP_Head_F_Faux",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_F_MED_Faux_FaceAcc.CP_F_MED_Faux_FaceAcc"
            ]
        },
        {
            "Name": "Lexa",
            "ID": "CID_963_Athena_Commando_F_Lexa",
            "ImageID": "CID_963_Athena_Commando_F_Lexa_QUEEN",
            "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_963_athena_commando_f_lexa/variants/progressive/stage1.png",
            "CharacterParts": [
                "/Game/Athena/Heroes/Meshes/Bodies/CP_Body_Commando_F_LexaArmored.CP_Body_Commando_F_LexaArmored",
                "/Game/Characters/CharacterParts/Female/Medium/Heads/CP_Head_F_Lexa_Armored.CP_Head_F_Lexa_Armored",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_F_MED_LexaArmored_FaceAcc.CP_F_MED_LexaArmored_FaceAcc",
                "/Game/Characters/CharacterParts/Hats/Empty_Hat.Empty_Hat"
            ]
        },
        {
            "Name": "Kado Thorne",
            "ID": "Character_LazarusLens",
            "ImageID": "Character_LazarusLens_WOLF",
            "Icon": "https://fortnite-api.com/images/cosmetics/br/character_lazaruslens/variants/progressive/stage2.png",
            "CharacterParts": [
                "/BRCosmetics/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_LazarusLens_Wing.CP_Athena_Body_M_LazarusLens_Wing",
                "/BRCosmetics/Characters/CharacterParts/Male/Medium/Heads/CP_Athena_Head_M_LazarusLens_Wing.CP_Athena_Head_M_LazarusLens_Wing",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_M_MED_LazarusLens_Wing_FaceAcc.CP_M_MED_LazarusLens_Wing_FaceAcc"
            ]
        },
        {
            "Name": "The Origin",
            "ID": "CID_A_373_Athena_Commando_M_OriginPrisoner",
            "ImageID": "CID_A_373_Athena_Commando_M_OriginPrisonerstyle2",
            "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_a_373_athena_commando_m_originprisoner/variants/progressive/stage2.png",
            "CharacterParts": [
                "/Game/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_TheOrigin.CP_Athena_Body_M_TheOrigin",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_M_MED_TheOrigin_FaceAcc.CP_M_MED_TheOrigin_FaceAcc",
                "/Game/Characters/CharacterParts/Male/Medium/Heads/CP_Athena_Head_M_TheOrigin.CP_Athena_Head_M_TheOrigin"
            ]
        },
        {
            "Name": "Twyn",
            "ID": "Character_Candor",
            "ImageID": "Character_Candor2",
            "Icon": "https://fortnite-api.com/images/cosmetics/br/character_candor/variants/progressive/stage2.png",
            "CharacterParts": [
                "/Game/Characters/CharacterParts/Female/Medium/Heads/CP_Athena_Head_F_CandorTech.CP_Athena_Head_F_CandorTech",
                "/Game/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_F_CandorTech.CP_Athena_Body_F_CandorTech",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_F_MED_CandorTech_FaceAcc.CP_F_MED_CandorTech_FaceAcc"
            ]
        }
    ],
    "Characters": [
        {
            "Name": "Renegade Raider",
            "ID": "CID_028_Athena_Commando_F",
            "Description": "Rare renegade raider outfit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/RenegadeRaider2.RenegadeRaider2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_028_athena_commando_f/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_028_Athena_Commando_F",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Materials/F_MED_Commando_Body_TV20.F_MED_Commando_Body_TV20",
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_02.F_MED_ASN_Sarah_Head_02",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_01.F_MED_ASN_Sarah_Hair_01"
            ]
        },
        {
            "Name": "Renegade Raider + Galactic Disc",
            "ID": "CID_028_Athena_Commando_F_GALACTICDISC",
            "Description": "Rare renegade raider outfit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/RenegadeRaider2.RenegadeRaider2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1008089914623139851/1201611532291801190/renegadegalacticdisc.png?ex=65ca72f2&is=65b7fdf2&hm=3b985aa4bba2a3bded2170cd9fa172b24707bc759905a87f7da8f0763054ce98&",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_028_Athena_Commando_F",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Materials/F_MED_Commando_Body_TV20.F_MED_Commando_Body_TV20",
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_02.F_MED_ASN_Sarah_Head_02",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_01.F_MED_ASN_Sarah_Hair_01"
            ],
            "IdleEffectNiagara": "/Game/Accessories/FORT_Backpacks/M_MED_Celestial_Backpack/P_Celestial_MilkyWay.P_Celestial_MilkyWay",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/B_Athena_PartModifier_Generic.B_Athena_PartModifier_Generic_C",
            "IdleFXSocket": "Backpack_BR",
            "UseIdleEffectPackage": true
        },
        {
            "Name": "Renegade Raider (Checkered)",
            "ID": "CID_028_Athena_Commando_F?????CHECKERED",
            "Description": "Rare renegade raider outfit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/RenegadeRaider2.RenegadeRaider2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_028_athena_commando_f/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_028_Athena_Commando_F",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_21/Materials/F_MED_Commando_Body_TV21.F_MED_Commando_Body_TV21",
                "/Game/Accessories/Hats/Materials/Female_Commando_07.Female_Commando_07",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_02.F_MED_ASN_Sarah_Head_02",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_01.F_MED_ASN_Sarah_Hair_01"
            ]
        },
        {
            "Name": "Renegade Raider (Galaxy)",
            "ID": "CID_028_Athena_Commando_F?????GALAXY",
            "Description": "Rare renegade raider outfit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/RenegadeRaider2.RenegadeRaider2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/844952556811714601/1194416261266952402/galaxywenegade.png?ex=65b045d3&is=659dd0d3&hm=27dce54f42cd8233661a54cbbe1dbe83b4cfda545f881a13266633093f28e8e8&",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_028_Athena_Commando_F",
            "Materials": [
                "/BRCosmetics/Weapons/WeaponSkins/Wraps/Materials/MI_WeaponWrap_Celestial.MI_WeaponWrap_Celestial",
                "/BRCosmetics/Weapons/WeaponSkins/Wraps/Materials/MI_WeaponWrap_Celestial.MI_WeaponWrap_Celestial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/Galaxy/Materials/M_MED_HIS_Sparks_Head_Celestial.M_MED_HIS_Sparks_Head_Celestial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/Galaxy/Materials/M_MED_HIS_Sparks_Hair_Celestial.M_MED_HIS_Sparks_Hair_Celestial"
            ]
        },
        {
            "Name": "Skull Trooper (Purple)",
            "ID": "CID_030_Athena_Commando_M_Halloween?????PURPLE",
            "Description": "Victory runs bone-deep.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SK/SkullTrooper.SkullTrooper",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Meshes/SK_M_Med_Soldier_04_Skeleton_AnimBP.SK_M_Med_Soldier_04_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_030_athena_commando_m_halloween/variants/clothingcolor/mat1.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_030_Athena_Commando_M_Halloween",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/HW01_Red/M_Med_Soldier_04_HW01_Red.M_Med_Soldier_04_HW01_Red",
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/HW01_Red/M_Med_Commando_Head_01_HW01.M_Med_Commando_Head_01_HW01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/HW01_Red/Male_Commando_HW01.Male_Commando_HW01"
            ]
        },
        {
            "Name": "Ghoul Trooper (Pink)",
            "ID": "CID_029_Athena_Commando_F_Halloween?????PINK",
            "Description": "Epic ghoul trooper outfit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/GhoulTrooper/Ghoul_Trooper.Ghoul_Trooper",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_029_athena_commando_f_halloween/variants/material/mat3.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_029_Athena_Commando_F_Halloween",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Zombie_Pink/Materials/F_MED_Zombie_Pink_Body.F_MED_Zombie_Pink_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Zombie_Pink/Materials/F_MED_Ramirez_Zombie_Pink_Hair.F_MED_Ramirez_Zombie_Pink_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Zombie_Pink/Materials/F_MED_Ramirez_Zombie_Pink_Head.F_MED_Ramirez_Zombie_Pink_Head"
            ]
        },
        {
            "Name": "Aerial Assault Trooper",
            "ID": "CID_017_Athena_Commando_M",
            "Description": "Rare aerial assault trooper outfit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/AAT/AerialAssaultTrooper.AerialAssaultTrooper",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Meshes/SK_M_Med_Soldier_04_Skeleton_AnimBP.SK_M_Med_Soldier_04_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_017_athena_commando_m/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_017_Athena_Commando_M",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/CV_04/Materials/M_Med_Soldier_04_CV04.M_Med_Soldier_04_CV04",
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_Commando_02_V01.Hat_M_Commando_02_V01",
                "/Game/Characters/Player/Male/Medium/Heads/M_MED_BLK_Sydney_Head_01/Materials/M_MED_BLK_Sydney_Head_01.M_MED_BLK_Sydney_Head_01"
            ]
        },
        {
            "Name": "Wonder",
            "ID": "CID_434_Athena_Commando_F_StealthHonor",
            "Description": "Inspire wonder.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Wonder/Wonder.Wonder",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_434_athena_commando_f_stealthhonor/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_434_Athena_Commando_F_StealthHonor",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/Stealth_Honor/Materials/F_MED_Commando_Body_StealthHonor.F_MED_Commando_Body_StealthHonor",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/Stealth_Honor/Materials/F_SML_ASN_StealthHonor_Head.F_SML_ASN_StealthHonor_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/Stealth_Honor/Materials/F_SML_ASN_StealthHonor_Hair.F_SML_ASN_StealthHonor_Hair"
            ]
        },
        {
            "Name": "Wonder + Galactic Disc",
            "ID": "CID_434_Athena_Commando_F_StealthHonor_GALACTICDISC",
            "Description": "Inspire wonder.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/WonderGalacticDisc/WonderWithGalacticDisc.WonderWithGalacticDisc",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1201086085237846056/1201117342709600286/wondergalacticdisc.png?ex=65c8a6b2&is=65b631b2&hm=b27852d50b2b8429bf15c25dc4274f84de53ad78e208d31d712d399740d419a2&",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_434_Athena_Commando_F_StealthHonor",
            "Materials": [
                "/Game/Accessories/FORT_Backpacks/M_MED_Celestial_Backpack/M_Blank.M_Blank",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/Stealth_Honor/Materials/F_MED_Commando_Body_StealthHonor.F_MED_Commando_Body_StealthHonor",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/Stealth_Honor/Materials/F_SML_ASN_StealthHonor_Head.F_SML_ASN_StealthHonor_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/Stealth_Honor/Materials/F_SML_ASN_StealthHonor_Hair.F_SML_ASN_StealthHonor_Hair"
            ],
            "IdleEffectNiagara": "/Game/Accessories/FORT_Backpacks/M_MED_Celestial_Backpack/P_Celestial_MilkyWay.P_Celestial_MilkyWay",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/B_Athena_PartModifier_Generic.B_Athena_PartModifier_Generic_C",
            "IdleFXSocket": "Backpack_BR",
            "UseIdleEffectPackage": true
        },
        {
            "Name": "Wildcat",
            "ID": "CID_757_Athena_Commando_F_WildCat",
            "Description": "Victory without taking a scratch.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Wildcat/Wildcat.Wildcat",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/F_MED_Wild_Cat_AnimBP.F_MED_Wild_Cat_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_757_athena_commando_f_wildcat/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_757_Athena_Commando_F_WildCat",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Materials/F_MED_Wild_Cat_Body.F_MED_Wild_Cat_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Wild_Cat_Head/Materials/F_MED_Wild_Cat_Head.F_MED_Wild_Cat_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Materials/F_MED_Wild_Cat_FaceAcc.F_MED_Wild_Cat_FaceAcc"
            ]
        },
        {
            "Name": "Wildcat (Blue)",
            "ID": "CID_757_Athena_Commando_F_WildCat?????BLUE",
            "Description": "Victory without taking a scratch.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Wildcat/Wildcat.Wildcat",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/F_MED_Wild_Cat_AnimBP.F_MED_Wild_Cat_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_757_athena_commando_f_wildcat/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_757_Athena_Commando_F_WildCat",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Body.F_MED_Wild_Cat_Blue_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Head.F_MED_Wild_Cat_Blue_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Hair.F_MED_Wild_Cat_Blue_Hair"
            ]
        },
        {
            "Name": "Wildcat (Blueprint)",
            "ID": "CID_757_Athena_Commando_F_WildCat?????BLUEPRINT",
            "Description": "Victory without taking a scratch.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Wildcat/Wildcat.Wildcat",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/F_MED_Wild_Cat_AnimBP.F_MED_Wild_Cat_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_757_athena_commando_f_wildcat/variants/material/mat3.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_757_Athena_Commando_F_WildCat",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Blueprint/Materials/F_MED_Wild_Cat_Blueprint_Body.F_MED_Wild_Cat_Blueprint_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Head.F_MED_Wild_Cat_Blue_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Hair.F_MED_Wild_Cat_Blue_Hair"
            ]
        },
        {
            "Name": "Travis Scott",
            "ID": "CID_703_Athena_Commando_M_Cyclone",
            "Description": "La Flame.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/TravisScott/TravisScott.TravisScott",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Meshes/Parts/M_MED_Cyclone_FaceAcc_AnimBP.M_MED_Cyclone_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_703_athena_commando_m_cyclone/icon.png",
            "Rarity": "icon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_703_Athena_Commando_M_Cyclone",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Body_T1.M_MED_Cyclone_Body_T1",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Head.M_MED_Cyclone_Head",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Face_Accessories.M_MED_Cyclone_Face_Accessories"
            ]
        },
        {
            "Name": "Travis Scott + Gold Token",
            "ID": "CID_703_Athena_Commando_M_Cyclone_GOLDTOKEN",
            "Description": "La Flame.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/TravisWithToken/Travis.Travis",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Meshes/Parts/M_MED_Cyclone_FaceAcc_AnimBP.M_MED_Cyclone_FaceAcc_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1049814088802369646/1200850908452491384/TravisWithToken.png",
            "Rarity": "icon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_703_Athena_Commando_M_Cyclone",
            "Materials": [
                "/Game/Accessories/FORT_Backpacks/Backpack_Assassin_Suit_Coin/Materials/MI_Assassin_Suit_Coin_Backpack.MI_Assassin_Suit_Coin_Backpack",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Body_T1.M_MED_Cyclone_Body_T1",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Head.M_MED_Cyclone_Head",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Face_Accessories.M_MED_Cyclone_Face_Accessories"
            ]
        },
        {
            "Name": "Travis Scott + Rainbow Clover",
            "ID": "CID_703_Athena_Commando_M_Cyclone_RAINBOWCLOVER",
            "Description": "La Flame.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/TravisRainbowClover/TravisRainbowClover.TravisRainbowClover",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Meshes/Parts/M_MED_Cyclone_FaceAcc_AnimBP.M_MED_Cyclone_FaceAcc_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1049814088802369646/1200851038631116840/TravisWithRainbowClover.png",
            "Rarity": "icon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_703_Athena_Commando_M_Cyclone",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Body_T1.M_MED_Cyclone_Body_T1",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Head.M_MED_Cyclone_Head",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Face_Accessories.M_MED_Cyclone_Face_Accessories",
                "/Game/Accessories/FORT_Backpacks/M_MED_Lucky_Rider_Backpack/Materials/M_MED_LuckyRider_Backpack.M_MED_LuckyRider_Backpack"
            ]
        },
        {
            "Name": "Invisble",
            "ID": "CID_INVISIBLE",
            "Description": "Invisible Skin.",
            "Type": "UEFN",
            "Mesh": "/Uwu.Uwu",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Meshes/M_MED_Cyclone_AnimBP.M_MED_Cyclone_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/867518279950270494/1190748141167853678/invsible.png?ex=65a2ed9f&is=6590789f&hm=d101c94de1411325957552d7a6ac22320aff655daabe6678fda77552d9929366&",
            "Rarity": "common",
            "hidpath": null,
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Body_T1.M_MED_Cyclone_Body_T1"
            ]
        },
        {
            "Name": "Shady Doggo",
            "ID": "CID_A_208_Athena_Commando_M_TextilePup_C85OD",
            "Description": "Who's a stylish boy?",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ShadyDoggo/ShadyDoggo.ShadyDoggo",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/M_MED_Textile_Pup_AnimBP.M_MED_Textile_Pup_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_208_athena_commando_m_textilepup_c85od/icon.png",
            "Rarity": "rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_208_Athena_Commando_M_TextilePup",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Materials/M_MED_TextilePup_Body.M_MED_TextilePup_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Materials/M_MED_TextilePup_Head.M_MED_TextilePup_Head",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Materials/M_MED_TextilePup_FaceAcc.M_MED_TextilePup_FaceAcc"
            ]
        },
        {
            "Name": "Shady Doggo (Red)",
            "ID": "CID_A_208_Athena_Commando_M_TextilePup_C85OD?????RED",
            "Description": "Who's a stylish boy?",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ShadyDoggo/ShadyDoggo.ShadyDoggo",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/M_MED_Textile_Pup_AnimBP.M_MED_Textile_Pup_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_208_athena_commando_m_textilepup_c85od/variants/material/mat2.png",
            "Rarity": "rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_208_Athena_Commando_M_TextilePup",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Red/Materials/M_MED_TextilePupRed_Body.M_MED_TextilePupRed_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Materials/M_MED_TextilePup_Head.M_MED_TextilePup_Head",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Red/Materials/M_MED_TextilePupRed_FaceAcc.M_MED_TextilePupRed_FaceAcc"
            ]
        },
        {
            "Name": "Shady Doggo (Black)",
            "ID": "CID_A_208_Athena_Commando_M_TextilePup_C85OD?????BLACK",
            "Description": "Who's a stylish boy?",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ShadyDoggo/ShadyDoggo.ShadyDoggo",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/M_MED_Textile_Pup_AnimBP.M_MED_Textile_Pup_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_208_athena_commando_m_textilepup_c85od/variants/material/mat3.png",
            "Rarity": "rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_208_Athena_Commando_M_TextilePup",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Black/Materials/M_MED_TextilePupBlack_Body.M_MED_TextilePupBlack_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Materials/M_MED_TextilePup_Head.M_MED_TextilePup_Head",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Black/Materials/M_MED_TextilePupBlack_FaceAcc.M_MED_TextilePupBlack_FaceAcc"
            ]
        },
        {
            "Name": "Ikonik",
            "ID": "CID_313_Athena_Commando_M_KpopFashion",
            "Description": "Define the moment.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Ikonik/Ikonik.Ikonik",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_KpopFashion/Meshes/M_MED_Kpop_FashionAnimBP.M_MED_Kpop_FashionAnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_313_athena_commando_m_kpopfashion/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_313_Athena_Commando_M_KpopFashion",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_KpopFashion/Materials/M_MED_KpopFashion_Body.M_MED_KpopFashion_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Male/Medium/Heads/M_MED_ASN_Jae_Head_01/Materials/M_MED_ASN_Jae_Head_01.M_MED_ASN_Jae_Head_01",
                "/BRCosmetics/Accessories/Hats/M_MED_Kpop_Fashion_Hat/Materials/M_MED_Kpop_Fashion_Hat.M_MED_Kpop_Fashion_Hat"
            ]
        },
        {
            "Name": "Tsuki",
            "ID": "CID_472_Athena_Commando_F_CyberKarate",
            "Description": "Unpredictable and unforgiving.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Tsuki/Tsuki.Tsuki",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Meshes/F_MED_Cyber_Karate_AnimBp.F_MED_Cyber_Karate_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_472_athena_commando_f_cyberkarate/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_472_Athena_Commando_F_CyberKarate",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Body.F_MED_CyberKarate_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Head.F_MED_CyberKarate_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Hair.F_MED_CyberKarate_Hair"
            ]
        },
        {
            "Name": "Tsuki (Human)",
            "ID": "CID_472_Athena_Commando_F_CyberKarate?????HUMAN",
            "Description": "Unpredictable and unforgiving.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Tsuki/Tsuki.Tsuki",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Meshes/F_MED_Cyber_Karate_AnimBp.F_MED_Cyber_Karate_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_472_athena_commando_f_cyberkarate/variants/parts/stage2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_472_Athena_Commando_F_CyberKarate",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Body.F_MED_CyberKarate_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Head.F_MED_CyberKarate_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Hair.F_MED_CyberKarate_Hair"
            ]
        },
        {
            "Name": "Glow",
            "ID": "CID_479_Athena_Commando_F_Davinci",
            "Description": "The aura of victory glows bright.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Glow/Glow.Glow",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Meshes/F_MED_DarkNinja_AnimBlueprint.F_MED_DarkNinja_AnimBlueprint_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_479_athena_commando_f_davinci/icon.png",
            "Rarity": "legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_479_Athena_Commando_F_Davinci",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Skins/Davinci/Materials/F_MED_Davinci_Body.F_MED_Davinci_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Skins/Davinci/Materials/F_MED_Davinci_Hair_01.F_MED_Davinci_Hair_01",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Skins/Davinci/Materials/F_MED_DarkNinja_Head.F_MED_DarkNinja_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Skins/Davinci/Materials/F_MED_Davinci_Hood_Ins.F_MED_Davinci_Hood_Ins"
            ]
        },
        {
            "Name": "Fate",
            "ID": "CID_143_Athena_Commando_F_DarkNinja",
            "Description": "Prepare to meet your fate.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Glow/Glow.Glow",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Meshes/F_MED_DarkNinja_AnimBlueprint.F_MED_DarkNinja_AnimBlueprint_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_143_athena_commando_f_darkninja/icon.png",
            "Rarity": "legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_143_Athena_Commando_F_DarkNinja",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Materials/F_MED_DarkNinja_Body.F_MED_DarkNinja_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_DarkNinja_Head_01/Materials/F_MED_DarkNinja_Head_01.F_MED_DarkNinja_Head_01",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_DarkNinja_Head_01/Materials/F_MED_DarkNinja_Head.F_MED_DarkNinja_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Materials/F_MED_DarkNinja_Hood.F_MED_DarkNinja_Hood"
            ]
        },
        {
            "Name": "FNCS Renegade",
            "ID": "Character_HeadhunterStarFNCS",
            "Description": "Rebuilt and ready to be a champion.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/FNCSRenegade/FNCSRenegade.FNCSRenegade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Meshes/F_MED_HeadhunterStar_AnimBP.F_MED_HeadhunterStar_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_headhunterstarfncs/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_HeadhunterStarFNCS",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Skins/Materials/F_MED_HeadhunterStar_FNCS_Body.F_MED_HeadhunterStar_FNCS_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Skins/Materials/F_MED_HeadhunterStar_Head.F_MED_HeadhunterStar_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Skins/Materials/F_MED_HeadhunterStar_FNCS_Eyes.F_MED_HeadhunterStar_FNCS_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Skins/Materials/F_MED_HeadhunterStar_Hair.F_MED_HeadhunterStar_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Skins/Materials/F_MED_HeadhunterStar_FNCS_FaceAcc.F_MED_HeadhunterStar_FNCS_FaceAcc"
            ]
        },
        {
            "Name": "Galaxia",
            "ID": "CID_935_Athena_Commando_F_Eternity",
            "Description": "Empress of the Cosmos.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Galaxia/Galaxia.Galaxia",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/Meshes/Parts/F_MED_Eternity_Elite_AnimBP.F_MED_Eternity_Elite_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_935_athena_commando_f_eternity/icon.png",
            "Rarity": "legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_935_Athena_Commando_F_Eternity",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/Materials/MI_F_MED_Eternity_Body.MI_F_MED_Eternity_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/Materials/MI_F_MED_Eternity_FaceAccessory.MI_F_MED_Eternity_FaceAccessory",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/Materials/F_MED_EternityElite_Hair.F_MED_EternityElite_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/Materials/F_MED_EternityElite_Head.F_MED_EternityElite_Head"
            ],
            "IdleEffectNiagara": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/FX/NS_Eternity_Hair_star.NS_Eternity_Hair_star",
            "IdleFXSocket": "dyn_ponytail_05"
        },
        {
            "Name": "Lace",
            "ID": "CID_310_Athena_Commando_F_StreetGoth",
            "Description": "Lives for the thrill of the frill.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Lace/Lace.Lace",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Meshes/F_MED_Street_Goth_Body_Skeleton_AnimBP.F_MED_Street_Goth_Body_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_310_athena_commando_f_streetgoth/smallicon.png",
            "Rarity": "epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_310_Athena_Commando_F_StreetGoth",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Materials/F_MED_StreetGoth_Body.F_MED_StreetGoth_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Materials/F_MED_ASN_StreetGoth_Head.F_MED_ASN_StreetGoth_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Materials/F_MED_StreetGoth_Hair.F_MED_StreetGoth_Hair"
            ]
        },
        {
            "Name": "Lace (White)",
            "ID": "CID_310_Athena_Commando_F_StreetGoth?????WHITE",
            "Description": "Lives for the thrill of the frill.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Lace/Lace.Lace",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Meshes/F_MED_Street_Goth_Body_Skeleton_AnimBP.F_MED_Street_Goth_Body_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_310_athena_commando_f_streetgoth/variants/material/mat2.png",
            "Rarity": "epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_310_Athena_Commando_F_StreetGoth",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Skins/StreetGoth_Fashion/F_MED_StreetGoth_Fashion_Body.F_MED_StreetGoth_Fashion_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Skins/StreetGoth_Fashion/F_MED_ASN_StreetGoth_Fashion_Head.F_MED_ASN_StreetGoth_Fashion_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Skins/StreetGoth_Fashion/F_MED_StreetGoth_Fashion_Hair.F_MED_StreetGoth_Fashion_Hair"
            ]
        },
        {
            "Name": "Sparkle Specialist",
            "ID": "CID_039_Athena_Commando_F_Disco",
            "Description": "It's time to shine!",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SparkleSpecialist/SparkleSpecialist.SparkleSpecialist",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_039_Athena_Commando_F_Disco/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_039_Athena_Commando_F_Disco",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_05/Materials/F_MED_Commando_Body_BR05.F_MED_Commando_Body_BR05",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Disco.F_MED_ASN_Sarah_Disco",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_Disco.F_MED_ASN_Sarah_Hair_Disco"
            ]
        },
        {
            "Name": "Black Knight",
            "ID": "CID_035_Athena_Commando_M_Medieval",
            "Description": "The odious scourge of Wailing Woods.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/BlackKnight/BlackKnight.BlackKnight",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Meshes/SK_M_Med_Soldier_04_Skeleton_AnimBP.SK_M_Med_Soldier_04_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_035_athena_commando_m_medieval/icon.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_035_Athena_Commando_M_Medieval",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_BlackKnight/Materials/M_Med_Soldier_Body_TV28_BlackKnight.M_Med_Soldier_Body_TV28_BlackKnight",
                "/Game/Accessories/Hats/Materials/Hat_Commando_BlackKnight.Hat_Commando_BlackKnight",
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_Nutcracker/Materials/M_Med_Soldier_Head_Nutcracker.M_Med_Soldier_Head_Nutcracker",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh"
            ]
        },
        {
            "Name": "Recon Specialist",
            "ID": "CID_024_Athena_Commando_F",
            "Description": "Rare recon specialist outfit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ReconSpecialist/ReconSpecialist.ReconSpecialist",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_024_athena_commando_f/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_024_Athena_Commando_F",
            "Materials": [
                "/BRCosmetics/Accessories/Hats/Materials/Hat_F_Commando_03.Hat_F_Commando_03",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Commando_01/Materials/F_MED_Commando_Hair_01.F_MED_Commando_Hair_01",
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/CM_01/Materials/F_MED_Commando_Body_CM01.F_MED_Commando_Body_CM01",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Hair_Ponytail.F_MED_Commando_Hair_Ponytail",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Head_01.F_MED_Commando_Head_01"
            ]
        },
        {
            "Name": "Blue Team Leader",
            "ID": "CID_052_Athena_Commando_F_PSBlue",
            "Description": "Lead your squad to victory.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ReconSpecialist/ReconSpecialist.ReconSpecialist",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_052_Athena_Commando_F_PSBlue/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_052_Athena_Commando_F_PSBlue",
            "Materials": [
                "/Game/Accessories/Hats/Materials/Hat_F_Commando_03_V01.Hat_F_Commando_03_V01",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Commando_01/Materials/F_MED_Commando_Hair_01.F_MED_Commando_Hair_01",
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_SonyEx/Materials/F_MED_Commando_Body_SonyEx.F_MED_Commando_Body_SonyEx",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Hair_Ponytail.F_MED_Commando_Hair_Ponytail",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Head_01.F_MED_Commando_Head_01"
            ]
        },
        {
            "Name": "Red Team Leader",
            "ID": "CID_052_Athena_Commando_F_PSRed",
            "Description": "Lead your squad to victory.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ReconSpecialist/ReconSpecialist.ReconSpecialist",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1158823342028095571/1188925699361341550/redteamleader.png",
            "Rarity": "marvel",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_052_Athena_Commando_F_PSBlue",
            "Materials": [
                "/Game/Accessories/Hats/Materials/Hat_F_Commando_03_V01.Hat_F_Commando_03_V01",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Commando_01/Materials/F_MED_Commando_Hair_01.F_MED_Commando_Hair_01",
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_SonyEx/Materials/F_MED_Commando_Body_SonyEx.F_MED_Commando_Body_SonyEx",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Hair_Ponytail.F_MED_Commando_Hair_Ponytail",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Head_01.F_MED_Commando_Head_01"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Accessories/Hats/Textures/Female_Commando_03/V01/Female_Commando_03_V01_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ReconSpecialist/Skins/Red/BodyaBTL_Hat"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_SonyEx/Textures/F_MED_Commando_01_SONY_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ReconSpecialist/Skins/Red/Body_Red"
                }
            ]
        },
        {
            "Name": "Unchained Ramirez",
            "ID": "CID_A_205_Athena_Commando_F_TextileRam_GMRJ0",
            "Description": "She's coming in haute.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/UnchainedRamirez/UnchainedRamirez.UnchainedRamirez",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Textile_Ram/Meshes/F_MED_Textile_Ram_AnimBP.F_MED_Textile_Ram_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_205_athena_commando_f_textileram_gmrj0/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_205_Athena_Commando_F_TextileRam",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Textile_Ram/Materials/M_Textile_Ram_Body.M_Textile_Ram_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Textile_Ram/Materials/M_Textile_Ram_Hair.M_Textile_Ram_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Textile_Ram/Materials/F_MED_TextileRam_Head.F_MED_TextileRam_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Textile_Ram/Materials/M_Textile_Ram_FaceAcc.M_Textile_Ram_FaceAcc",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HighTower_Tomato_Casual/Materials/M_VertexCrunch.M_VertexCrunch"
            ]
        },
        {
            "Name": "Focus",
            "ID": "CID_452_Athena_Commando_F_CyberFu",
            "Description": "Visualize the future.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Focus/Focus.Focus",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Meshes/F_MED_Cyber_Fu_AnimBP.F_MED_Cyber_Fu_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_452_athena_commando_f_cyberfu/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_452_Athena_Commando_F_CyberFu",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Materials/MI_F_MED_Cyber_Fu_Body.MI_F_MED_Cyber_Fu_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Materials/MI_F_MED_Cyber_Fu_Hair.MI_F_MED_Cyber_Fu_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Materials/MI_F_MED_Cyber_Fu_FaceAcc.MI_F_MED_Cyber_Fu_FaceAcc"
            ]
        },
        {
            "Name": "Focus (Future Agent)",
            "ID": "CID_452_Athena_Commando_F_CyberFu?????FUTURE",
            "Description": "Visualize the future.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Focus/Focus.Focus",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Meshes/F_MED_Cyber_Fu_AnimBP.F_MED_Cyber_Fu_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_452_athena_commando_f_cyberfu/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_452_Athena_Commando_F_CyberFu",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Skins/Glitch/Materials/MI_F_MED_CyberFu_Glitch_Body.MI_F_MED_CyberFu_Glitch_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Skins/Glitch/Materials/MI_F_MED_CyberFu_Glitch_Hair.MI_F_MED_CyberFu_Glitch_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Skins/Glitch/Materials/MI_F_MED_CyberFu_Glitch_FaceAcc.MI_F_MED_CyberFu_Glitch_FaceAcc"
            ]
        },
        {
            "Name": "Mogul Master",
            "ID": "CID_061_Athena_Commando_F_SkiGirl",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_061_athena_commando_f_skigirl/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_061_Athena_Commando_F_SkiGirl",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_38/Materials/F_MED_Commando_01_Body_TV38.F_MED_Commando_01_Body_TV38",
                "/Game/Accessories/Hats/Materials/Hat_M_Commando_14.Hat_M_Commando_14"
            ]
        },
        {
            "Name": "Mogul Master (USA)",
            "ID": "CID_062_Athena_Commando_F_SkiGirl_USA",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_062_Athena_Commando_F_SkiGirl_USA/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_062_Athena_Commando_F_SkiGirl_USA",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_USA/Materials/F_MED_Commando_01_BR042_USA.F_MED_Commando_01_BR042_USA",
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_42_USA/Materials/Hat_M_BR042_USA.Hat_M_BR042_USA"
            ]
        },
        {
            "Name": "Mogul Master (CAN)",
            "ID": "CID_063_Athena_Commando_F_SkiGirl_CAN",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_063_Athena_Commando_F_SkiGirl_CAN/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_063_Athena_Commando_F_SkiGirl_CAN",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_Canada/Materials/F_MED_Commando_BR042_Canada.F_MED_Commando_BR042_Canada",
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_BR042_Canada.Hat_M_BR042_Canada"
            ]
        },
        {
            "Name": "Mogul Master (GBR)",
            "ID": "CID_064_Athena_Commando_F_SkiGirl_GBR",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_064_Athena_Commando_F_SkiGirl_GBR/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_064_Athena_Commando_F_SkiGirl_GBR",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_UK/Materials/F_MED_Commando_01_BR042_UK.F_MED_Commando_01_BR042_UK",
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_Commando_14_BR042_UK.Hat_M_Commando_14_BR042_UK"
            ]
        },
        {
            "Name": "Mogul Master (FRA)",
            "ID": "CID_065_Athena_Commando_F_SkiGirl_FRA",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_065_Athena_Commando_F_SkiGirl_FRA/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_065_Athena_Commando_F_SkiGirl_FRA",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_France/Materials/F_MED_Commando_01_BR042_France.F_MED_Commando_01_BR042_France",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_42_France/Materials/Hat_M_BR042_France.Hat_M_BR042_France"
            ]
        },
        {
            "Name": "Mogul Master (GER)",
            "ID": "CID_066_Athena_Commando_F_SkiGirl_GER",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_066_Athena_Commando_F_SkiGirl_GER/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_066_Athena_Commando_F_SkiGirl_GER",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_Germany/Materials/F_MED_Commando_01_BR042_Germany.F_MED_Commando_01_BR042_Germany",
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_Commando_14_BR042_Germany.Hat_M_Commando_14_BR042_Germany"
            ]
        },
        {
            "Name": "Mogul Master (CHN)",
            "ID": "CID_067_Athena_Commando_F_SkiGirl_CHN",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_067_Athena_Commando_F_SkiGirl_CHN/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_067_Athena_Commando_F_SkiGirl_CHN",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_China/Materials/F_MED_Commando_BR042_China.F_MED_Commando_BR042_China",
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_BR042_China.Hat_M_BR042_China"
            ]
        },
        {
            "Name": "Mogul Master (KOR)",
            "ID": "CID_068_Athena_Commando_F_SkiGirl_KOR",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_068_Athena_Commando_F_SkiGirl_KOR/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_068_Athena_Commando_F_SkiGirl_KOR", 
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_Korea/Materials/F_MED_Commando_01_BR042_Korea.F_MED_Commando_01_BR042_Korea",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_42_Korea/Materials/Hat_M_BR042_Korea.Hat_M_BR042_Korea"
            ]
        },
        {
            "Name": "Shadow Ops",
            "ID": "CID_043_Athena_Commando_F_Stealth",
            "Description": "You didn't see a thing.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ShadowOps/ShadowOps.ShadowOps",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_043_athena_commando_f_stealth/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_043_Athena_Commando_F_Stealth",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_08/Materials/F_MED_Commando_Body_BR08.F_MED_Commando_Body_BR08",
                "/BRCosmetics/Characters/Player/Female/Small/Heads/F_SML_ASN_Kumiko_Head_01/Materials/BR08/F_SML_ASN_Kumiko_Head_01_BR08.F_SML_ASN_Kumiko_Head_01_BR08",
                "/Game/Characters/Player/Female/Small/Heads/F_SML_ASN_Kumiko_Head_01/Materials/F_SML_ASN_Kumiko_Hair_01.F_SML_ASN_Kumiko_Hair_01"
            ]
        },
        {
            "Name": "Shadow Ops (White)",
            "ID": "CID_043_Athena_Commando_F_Stealth?????WHITE",
            "Description": "You didn't see a thing.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ShadowOps/ShadowOps.ShadowOps",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_043_athena_commando_f_stealth/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_043_Athena_Commando_F_Stealth",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Stealth_White/Materials/F_MED_Stealth_White.F_MED_Stealth_White",
                "/Game/Characters/Player/Female/Small/Heads/F_SML_StealthWhite_Head/Materials/F_SML_StealthWhite_Head.F_SML_StealthWhite_Head",
                "/Game/Characters/Player/Female/Small/Heads/F_SML_StealthWhite_Head/Materials/F_SML_StealthWhite_Hair.F_SML_StealthWhite_Hair"
            ]
        },
        {
            "Name": "Dummy",
            "ID": "CID_795_Athena_Commando_M_Dummeez",
            "Description": "Look out!",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Dummy/Dummy.Dummy",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Meshes/M_MED_Dummeez_AnimBP.M_MED_Dummeez_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_795_athena_commando_m_dummeez/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_795_Athena_Commando_M_Dummeez",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Materials/M_MED_Dummeez_Body.M_MED_Dummeez_Body",
                "/Engine/EngineMaterials/DefaultMaterial.DefaultMaterial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Materials/M_MED_Dummeez_Head.M_MED_Dummeez_Head"
            ]
        },
        {
            "Name": "Dummy (Carbon Fiber)",
            "ID": "CID_795_Athena_Commando_M_Dummeez?????CARBONFIBER",
            "Description": "Look out!",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Dummy/Dummy.Dummy",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Meshes/M_MED_Dummeez_AnimBP.M_MED_Dummeez_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_795_athena_commando_m_dummeez/variants/material/mat2.png",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_795_Athena_Commando_M_Dummeez",
            "Rarity": "Rare",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/DummeezNight/Materials/M_MED_DummeezNight_Body.M_MED_DummeezNight_Body",
                "/Engine/EngineMaterials/DefaultMaterial.DefaultMaterial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/DummeezNight/Materials/M_MED_DummeezNight_Head.M_MED_DummeezNight_Head"
            ]
        },
        {
            "Name": "Dummy (White Carbon Fiber)",
            "ID": "CID_795_Athena_Commando_M_Dummeez?????CARBONFIBERWHITE1",
            "Description": "Look out!",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Dummy/Dummy.Dummy",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Meshes/M_MED_Dummeez_AnimBP.M_MED_Dummeez_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1191420583515263057/1191764552916930640/whitecarbon.png?ex=65a6a03b&is=65942b3b&hm=dda3b3761708bbf443d5118dae1addd8ce75ceb6346178a0435ebc38d2f564f8&",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_795_Athena_Commando_M_Dummeez",
            "Rarity": "Shadow",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/DummeezNight/Materials/M_MED_DummeezNight_Body.M_MED_DummeezNight_Body",
                "/Engine/EngineMaterials/DefaultMaterial.DefaultMaterial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/DummeezNight/Materials/M_MED_DummeezNight_Head.M_MED_DummeezNight_Head"
            ],
            "TextureSwaps": [
                {
                    "From": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/DummeezNight/Textures/M_MED_Dummeez_night_Body_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Dummy/White/Body"
                },
                {
                    "From": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/DummeezNight/Textures/M_MED_Dummeez_night_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Dummy/White/Head"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Dummy Supreme ",
            "ID": "Character_Dummy_FNCS",
            "Description": "He's the best at every test.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Dummy/Dummy.Dummy",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Meshes/M_MED_Dummeez_AnimBP.M_MED_Dummeez_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_dummy_fncs/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_Dummy_FNCS",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/Dummy_FNCS/Materials/M_MED_Dummeez_FNCS_Body.M_MED_Dummeez_FNCS_Body",
                "/Engine/EngineMaterials/DefaultMaterial.DefaultMaterial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/Dummy_FNCS/Materials/M_MED_Dummeez_FNCS_Head.M_MED_Dummeez_FNCS_Head"
            ]
        },
        {
            "Name": "Safari",
            "ID": "CID_802_Athena_Commando_F_HeartBreaker",
            "Description": "Conqueror of the untamed.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Safari/Safari.Safari",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Heart_Breaker/Meshes/F_MED_Heart_Breaker_AnimBP.F_MED_Heart_Breaker_AnimBP_C", 
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_802_athena_commando_f_heartbreaker/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_802_Athena_Commando_F_HeartBreaker",
            "Info": "This item is not perfect!",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Heart_Breaker/Materials/F_MED_HeartBreaker_Body.F_MED_HeartBreaker_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Heart_Breaker_Head/Materials/F_MED_HeartBreaker_Head.F_MED_HeartBreaker_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Heart_Breaker/Materials/F_MED_HeartBreaker_FaceAcc_glasses.F_MED_HeartBreaker_FaceAcc_glasses",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Heart_Breaker/Materials/F_MED_HeartBreaker_FaceAcc.F_MED_HeartBreaker_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Heart_Breaker/Materials/F_MED_HeartBreaker_Hair.F_MED_HeartBreaker_Hair"
            ]
        },
        {
            "Name": "Surf Witch",
            "ID": "CID_805_Athena_Commando_F_PunkDevilSummer",
            "Description": "Curse the beach with your dark presence.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SurfWitch/Default/SurfWitchDefault.SurfWitchDefault",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Meshes/F_MED_Punk_Devil_Summer_AnimBP.F_MED_Punk_Devil_Summer_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_805_athena_commando_f_punkdevilsummer/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_805_Athena_Commando_F_PunkDevilSummer",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Materials/F_MED_Punk_Devil_Summer_Body.F_MED_Punk_Devil_Summer_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Materials/F_MED_Punk_Devil_Summer_FaceAcc.F_MED_Punk_Devil_Summer_FaceAcc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Materials/F_MED_Punk_Devil_Summer_Glass.F_MED_Punk_Devil_Summer_Glass",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Materials/F_MED_Punk_Devil_Summer_Hair.F_MED_Punk_Devil_Summer_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Medusa_Head/Skins/Punk_Devil_Summer/Materials/F_Punk_Devil_Summer_Head.F_Punk_Devil_Summer_Head"
            ]
        },
        {
            "Name": "Surf Witch (Demon)",
            "ID": "CID_805_Athena_Commando_F_PunkDevilSummer?????DEMON",
            "Description": "Curse the beach with your dark presence.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SurfWitch/Demon/SurfWitchDemon.SurfWitchDemon",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Meshes/F_MED_Punk_Devil_Summer_AnimBP.F_MED_Punk_Devil_Summer_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_805_athena_commando_f_punkdevilsummer/variants/parts/stage2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_805_Athena_Commando_F_PunkDevilSummer",
            "Info": "Head has wrong texture\nNot noticeable ingame",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Skin/Punk_Devil_Summer_Horns/Materials/Punk_Devil_Summe_Hornsr_Body.Punk_Devil_Summe_Hornsr_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Skin/Punk_Devil_Summer_Horns/Materials/Punk_Devil_Summer_Horns_Glass.Punk_Devil_Summer_Horns_Glass",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Skin/Punk_Devil_Summer_Horns/Materials/Punk_Devil_Summer_Horns_FaceAcc.Punk_Devil_Summer_Horns_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Skin/Punk_Devil_Summer_Horns/Materials/Punk_Devil_Summer_Horns_Hair.Punk_Devil_Summer_Horns_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Medusa_Head/Skins/Punk_Devil_Summer/Materials/F_Punk_Devil_Summer_Head.F_Punk_Devil_Summer_Head"
            ]
        },
        {
            "Name": "Kyra",
            "ID": "CID_806_Athena_Commando_F_GreenJacket",
            "Description": "Never afraid to stand out.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Kyra/Kyra.Kyra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Meshes/F_MED_Green_Jacket_AnimBP.F_MED_Green_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_806_athena_commando_f_greenjacket/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_806_Athena_Commando_F_GreenJacket",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Materials/F_MED_GreenJacket_Body.F_MED_GreenJacket_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Materials/F_MED_Green_Jacket_Hair.F_MED_Green_Jacket_Hair",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Skin/GreenJacket/Materials/F_MED_GreenJacket_Head.F_MED_GreenJacket_Head"
            ]
        },
        {
            "Name": "Love Letter Kyra",
            "ID": "CID_806_Athena_Commando_F_GreenJacket?????LOVE",
            "Description": "Never afraid to stand out.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Kyra/Kyra.Kyra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Meshes/F_MED_Green_Jacket_AnimBP.F_MED_Green_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_806_athena_commando_f_greenjacket/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_806_Athena_Commando_F_GreenJacket",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Skins/GreenJacketLove/Materials/F_MED_GreenJacketLove_Body.F_MED_GreenJacketLove_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Skins/GreenJacketLove/Materials/F_MED_GreenJacketLove_Hair.F_MED_GreenJacketLove_Hair",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Skin/GreenJacketLove/Materials/F_MED_GreenJacketLove_Head.F_MED_GreenJacketLove_Head"
            ]
        },
        {
            "Name": "Champion Kyra",
            "ID": "Character_GreenJacketFNCS",
            "Description": "Never afraid to secure the crown.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Kyra/Kyra.Kyra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Meshes/F_MED_Green_Jacket_AnimBP.F_MED_Green_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_greenjacketfncs/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_GreenJacketFNCS",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Skins/FNCS/Materials/MI_GreenJacketFNCS_Body.MI_GreenJacketFNCS_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Skins/FNCS/Materials/MI_GreenJacketFNCS_Hair.MI_GreenJacketFNCS_Hair",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HighTower_Tomato_Casual/Materials/MI_VertexCrunch.MI_VertexCrunch",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Skins/FNCS/Materials/MI_GreenJacketFNCS_Head.MI_GreenJacketFNCS_Head"
            ]
        },
        {
            "Name": "Zadie",
            "ID": "CID_625_Athena_Commando_F_PinkTrooper",
            "Description": "She's got her eyes on you.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Zadie/Zadie2.Zadie2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Meshes/F_MED_Pink_Trooper_AnimBP.F_MED_Pink_Trooper_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_625_athena_commando_f_pinktrooper/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_625_Athena_Commando_F_PinkTrooper",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Materials/F_MED_PinkTrooper_Body.F_MED_PinkTrooper_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Materials/F_MED_PinkTrooper_hair.F_MED_PinkTrooper_hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Materials/F_MED_PinkTrooper_Mask.F_MED_PinkTrooper_Mask",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Head_01_NORIM.F_MED_Commando_Head_01_NORIM"
            ]
        },
        {
            "Name": "Zadie (Arctic)",
            "ID": "CID_625_Athena_Commando_F_PinkTrooper?????ARCTIC",
            "Description": "She's got her eyes on you.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Zadie/Zadie2.Zadie2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Meshes/F_MED_Pink_Trooper_AnimBP.F_MED_Pink_Trooper_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_625_athena_commando_f_pinktrooper/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_625_Athena_Commando_F_PinkTrooper",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Arctic/Materials/F_MED_PinkTrooperArctic_Body.F_MED_PinkTrooperArctic_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Arctic/Materials/F_MED_PinkTrooperArctic_Hair.F_MED_PinkTrooperArctic_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Arctic/Materials/F_MED_PinkTrooperArctic_Mask.F_MED_PinkTrooperArctic_Mask",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Head_01_NORIM.F_MED_Commando_Head_01_NORIM"
            ]
        },
        {
            "Name": "Zadie (Jungle)",
            "ID": "CID_625_Athena_Commando_F_PinkTrooper?????JUNGLE",
            "Description": "She's got her eyes on you.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Zadie/Zadie2.Zadie2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Meshes/F_MED_Pink_Trooper_AnimBP.F_MED_Pink_Trooper_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_625_athena_commando_f_pinktrooper/variants/material/mat3.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_625_Athena_Commando_F_PinkTrooper",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Jungle/Materials/F_MED_PinkTrooperJungel_Body.F_MED_PinkTrooperJungel_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Jungle/Materials/F_MED_PinkTrooperJungle_Hair.F_MED_PinkTrooperJungle_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Jungle/Materials/F_MED_PinkTrooperJungle_Mask.F_MED_PinkTrooperJungle_Mask",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Head_01_NORIM.F_MED_Commando_Head_01_NORIM"
            ]
        },
        {
            "Name": "Gwen Stacy",
            "ID": "Character_RoseDust_KID",
            "Description": "All right, people, let's start at the beginning one last time.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/GwenStacy/GwenStacy.GwenStacy",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_RoseDust/Meshes/F_MED_RoseDust_AnimBP.F_MED_RoseDust_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_rosedust/variants/progressive/stage2.png",
            "Rarity": "marvel",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_RoseDust",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_RoseDust/Materials/MI_F_RoseDust_Body.MI_F_RoseDust_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_RoseDust/Materials/MI_F_RoseDust_FaceAcc.MI_F_RoseDust_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_RoseDust/Materials/MI_F_RoseDust_Head.MI_F_RoseDust_Head"
            ]
        },
        {
            "Name": "Rebirth Raven",
            "ID": "CID_A_036_Athena_Commando_F_Obsidian",
            "Description": "Daughter of a demon and founding member of the Teen Titans.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RebirthRaven/UwURabe.UwURabe",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian/Meshes/F_MED_Obsidian_AnimBP.F_MED_Obsidian_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_036_athena_commando_f_obsidian/icon.png",
            "Rarity": "dc",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_036_Athena_Commando_F_Obsidian",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian/Materials/F_MED_Obsidian_Body.F_MED_Obsidian_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian/Materials/F_MED_Obsidian_FaceAcc.F_MED_Obsidian_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian/Materials/F_MED_Obsidian_Head.F_MED_Obsidian_Head"
            ]
        },
        {
            "Name": "Rachel Roth",
            "ID": "CID_A_036_Athena_Commando_F_Obsidian?????RACHELROTH",
            "Description": "Daughter of a demon and founding member of the Teen Titans.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RebirthRavenVariant/Rabe2.Rabe2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian/Meshes/F_MED_Obsidian_AnimBP.F_MED_Obsidian_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_036_athena_commando_f_obsidian/variants/progressive/stage3.png",
            "Rarity": "dc",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_036_Athena_Commando_F_Obsidian",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian_Casual/Materials/F_MED_Obsidian_Casual_Body.F_MED_Obsidian_Casual_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian_Casual/Materials/F_MED_Obsidian_Casual_FaceAcc.F_MED_Obsidian_Casual_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian_Casual/Materials/F_MED_Obsidian_Casual_Head.F_MED_Obsidian_Casual_Head"
            ]
        },
        {
            "Name": "Nightlife",
            "ID": "CID_760_Athena_Commando_F_NeonTightSuit",
            "Description": "The life of the afterparty.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Nightlife/Nightlife.Nightlife",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neon_Tight_Suit/Meshes/F_MED_Neon_Tight_Suit_AnimBP.F_MED_Neon_Tight_Suit_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_760_athena_commando_f_neontightsuit/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_760_Athena_Commando_F_NeonTightSuit",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Neon_Tight_Suit/Materials/MI_NeonTightSuit_Pink.MI_NeonTightSuit_Pink",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Lemon_Lime_Head/Skins/NeonTightSuit/Materials/F_MED_NeonTightSuit_Head.F_MED_NeonTightSuit_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Neon_Tight_Suit/Materials/MI_NeonTightSuit_Hair_pink.MI_NeonTightSuit_Hair_pink"
            ]
        },
        {
            "Name": "Sparkplug",
            "ID": "CID_335_Athena_Commando_F_Scrapyard",
            "Description": "Scrap the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Sparkplug/Sparkplug.Sparkplug",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Garbage/Meshes/F_MED_Garbage_Body_AnimBP.F_MED_Garbage_Body_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_335_athena_commando_f_scrapyard/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_335_Athena_Commando_F_Scrapyard",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Garbage/Materials/F_Med_Garbage_Body.F_Med_Garbage_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Garbage/Materials/F_MED_Garbage_Hat.F_MED_Garbage_Hat"
            ]
        },
        {
            "Name": "Sparkplug  (Ink)",
            "ID": "CID_335_Athena_Commando_F_Scrapyard?????INK",
            "Description": "Scrap the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Sparkplug/Sparkplug.Sparkplug",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Garbage/Meshes/F_MED_Garbage_Body_AnimBP.F_MED_Garbage_Body_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_335_athena_commando_f_scrapyard/variants/parts/stage2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_335_Athena_Commando_F_Scrapyard",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Garbage_Ink/Materials/F_Med_Garbage_Ink_Body.F_Med_Garbage_Ink_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Garbage_Ink/Materials/F_Med_Garbage_Ink_Hat.F_Med_Garbage_Ink_Hat"
            ]
        },
        {
            "Name": "Era",
            "ID": "Character_SilentTempo",
            "Description": "The past lives within her.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Era/Era.Era",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Meshes/F_MED_SilentTempo_Peril_AnimBP.F_MED_SilentTempo_Peril_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_silenttempo/variants/parts/stage2.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_SilentTempo",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Materials/F_MED_SilentTempo_Peril_Body.F_MED_SilentTempo_Peril_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Materials/F_MED_SilentTempo_Peril_Head.F_MED_SilentTempo_Peril_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Materials/F_MED_SilentTempo_Peril_Eyes.F_MED_SilentTempo_Peril_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Materials/F_MED_SilentTempo_Peril_Hair.F_MED_SilentTempo_Peril_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Materials/F_MED_SilentTempo_Peril_FaceAcc.F_MED_SilentTempo_Peril_FaceAcc"
            ]
        },
        {
            "Name": "Phaedra",
            "ID": "CID_A_438_Athena_Commando_F_Gloom",
            "Description": "A dark sea witch with unknowable power.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Phaedra/Phaedra.Phaedra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Gloom/Meshes/Parts/F_MED_Gloom_Hat_FaceAcc_AnimBP.F_MED_Gloom_Hat_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_438_athena_commando_f_gloom/variants/material/stage1.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_438_Athena_Commando_F_Gloom",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Gloom/Material/F_MED_Gloom_Body.F_MED_Gloom_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Gloom/Material/F_MED_Gloom_Body_Opacity.F_MED_Gloom_Body_Opacity",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Gloom/Material/F_MED_Gloom_Head.F_MED_Gloom_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Gloom/Material/F_MED_Gloom_FaceAcc.F_MED_Gloom_FaceAcc"
            ]
        },
        {
            "Name": "Beach Jules",
            "ID": "CID_A_127_Athena_Commando_F_MechanicalEngineerSummer",
            "Description": "Get some R&R to go with your R&D.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/BeachJules/BeachJules.BeachJules",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Mechanical_Engineer_Summer/Meshes/F_MED_Mechanical_Engineer_Summer_AnimBP.F_MED_Mechanical_Engineer_Summer_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_127_athena_commando_f_mechanicalengineersummer/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_127_Athena_Commando_F_MechanicalEngineerSummer",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Mechanical_Engineer_Summer/Skin/Pink/Material/F_MED_Mechanical_EngineerSummer_Body_Pink.F_MED_Mechanical_EngineerSummer_Body_Pink",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Mechanical_Engineer_Summer/Skin/Pink/Material/F_MED_Mechanical_EngineerSummer_Head_Pink.F_MED_Mechanical_EngineerSummer_Head_Pink",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Mechanical_Engineer_Summer/Skin/Pink/Material/F_MED_Mechanical_EngineerSummer_FaceAcc_Pink.F_MED_Mechanical_EngineerSummer_FaceAcc_Pink",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Mechanical_Engineer_Summer/Skin/Pink/Material/F_MED_Mechanical_EngineerSummer_Body_Pink.F_MED_Mechanical_EngineerSummer_Body_Pink"
            ]
        },
        {
            "Name": "Kor (White)",
            "ID": "CID_A_202_Athena_Commando_F_Division?????WHITE",
            "Description": "Assassin for hire with some suspicious ties to the IO.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Kor/Kor.Kor",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Meshes/F_MED_Division_Jacket_AnimBP.F_MED_Division_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_202_athena_commando_f_division/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_202_Athena_Commando_F_Division",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Skins/Grey/Materials/F_MED_Division_Jacket_Grey_Body.F_MED_Division_Jacket_Grey_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Division_Jacket_Head/Materials/F_MED_Division_Jacket_Head.F_MED_Division_Jacket_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Skins/Grey/Materials/F_MED_Division_Jacket_Grey_Acc.F_MED_Division_Jacket_Grey_Acc"
            ]
        },
        {
            "Name": "Kor (Purple)",
            "ID": "CID_A_202_Athena_Commando_F_Division?????PURPLE",
            "Description": "Assassin for hire with some suspicious ties to the IO.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Kor/Kor.Kor",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Meshes/F_MED_Division_Jacket_AnimBP.F_MED_Division_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_202_athena_commando_f_division/variants/material/mat5.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_202_Athena_Commando_F_Division",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Body_Epic.F_MED_Division_Jacket_Body_Epic",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Head_Epic.F_MED_Division_Jacket_Head_Epic",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Acc_Epic.F_MED_Division_Jacket_Acc_Epic"
            ]
        },
        {
            "Name": "Kor (Blue)",
            "ID": "CID_A_202_Athena_Commando_F_Division?????BLUE",
            "Description": "Assassin for hire with some suspicious ties to the IO.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Kor/Kor.Kor",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Meshes/F_MED_Division_Jacket_AnimBP.F_MED_Division_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_202_athena_commando_f_division/variants/material/mat4.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_202_Athena_Commando_F_Division",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Body_Blue.F_MED_Division_Jacket_Body_Blue",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Head_Blue.F_MED_Division_Jacket_Head_Blue",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Acc_Blue.F_MED_Division_Jacket_Acc_Blue"
            ]
        },
        {
            "Name": "Kor (Golden)",
            "ID": "CID_A_202_Athena_Commando_F_Division?????GOLDEN",
            "Description": "Assassin for hire with some suspicious ties to the IO.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Kor/Kor.Kor",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Meshes/F_MED_Division_Jacket_AnimBP.F_MED_Division_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_202_athena_commando_f_division/variants/material/mat6.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_202_Athena_Commando_F_Division",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Body_Legendary.F_MED_Division_Jacket_Body_Legendary",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Head_Legendary.F_MED_Division_Jacket_Head_Legendary",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Acc_Legendary.F_MED_Division_Jacket_Acc_Legendary"
            ]
        },
        {
            "Name": "Aura",
            "ID": "CID_397_Athena_Commando_F_TreasureHunterFashion",
            "Description": "Get the goods in style.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aura/Aura.Aura",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Meshes/F_MED_Treasure_Hunter_Fashion_AnimBp.F_MED_Treasure_Hunter_Fashion_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_397_Athena_Commando_F_TreasureHunterFashion/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_397_Athena_Commando_F_TreasureHunterFashion",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Materials/F_MED_TreasureHunterFashion_Body.F_MED_TreasureHunterFashion_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/TreasureHunterF/Materials/F_MED_THFashion_Head.F_MED_THFashion_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Materials/F_MED_TreasureHunterFashion_FaceAcc.F_MED_TreasureHunterFashion_FaceAcc"
            ]
        },
        {
            "Name": "UwU Aura",
            "ID": "CID_397_Athena_Commando_F_TreasureHunterFashion_UWU",
            "Description": "Get the goods in style.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aura/Aura.Aura",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Meshes/F_MED_Treasure_Hunter_Fashion_AnimBp.F_MED_Treasure_Hunter_Fashion_AnimBp_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1158823342028095571/1190104941818290288/uwuaura.png",
            "Rarity": "gaminglegends",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_397_Athena_Commando_F_TreasureHunterFashion",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Materials/F_MED_TreasureHunterFashion_Body.F_MED_TreasureHunterFashion_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/TreasureHunterF/Materials/F_MED_THFashion_Head.F_MED_THFashion_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Materials/F_MED_TreasureHunterFashion_FaceAcc.F_MED_TreasureHunterFashion_FaceAcc"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Textures/T_F_MED_TreasureHunterFashion_Body_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aura/UwU/BodyT2"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Textures/T_F_MED_TreasureHunterFashion_Hair_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aura/UwU/HatT"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Charming Aura",
            "ID": "CID_397_Athena_Commando_F_TreasureHunterFashion?????CHARMING",
            "Description": "Get the goods in style.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aura/Aura.Aura",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Meshes/F_MED_Treasure_Hunter_Fashion_AnimBp.F_MED_Treasure_Hunter_Fashion_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_397_athena_commando_f_treasurehunterfashion/variants/parts/stage3.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_397_Athena_Commando_F_TreasureHunterFashion",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Luck/Materials/F_MED_TreasureHunter_Luck_Body.F_MED_TreasureHunter_Luck_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Luck/Materials/F_MED_TreasureHunter_Luck_Head.F_MED_TreasureHunter_Luck_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Luck/Materials/F_MED_TreasureHunter_Luck_FaceAcc.F_MED_TreasureHunter_Luck_FaceAcc"
            ]
        },
        {
            "Name": "Fresh Aura",
            "ID": "CID_A_154_Athena_Commando_F_TreasureHunterFashionMint",
            "Description": "Get the goods in style.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aura/Aura.Aura",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Meshes/F_MED_Treasure_Hunter_Fashion_AnimBp.F_MED_Treasure_Hunter_Fashion_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_154_athena_commando_f_treasurehunterfashionmint/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_154_Athena_Commando_F_TreasureHunterFashionMint",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/B_Athena_PartModifier_Generic.B_Athena_PartModifier_Generic_C",
            "IdleEffectNiagara": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/TreasureHunterF_Mint/FX/NS_F_TreasureHunterMint_Eyes.NS_F_TreasureHunterMint_Eyes",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Mint/Materials/F_MED_TreasureHunterMint_Body.F_MED_TreasureHunterMint_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Mint/Materials/F_MED_TreasureHunterMint_Head.F_MED_TreasureHunterMint_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Mint/Materials/F_MED_TreasureHunterMint_FaceAcc.F_MED_TreasureHunterMint_FaceAcc"
            ]
        },
        {
            "Name": "Championship Aura",
            "ID": "Character_TreasureHunterFashionsFNCS",
            "Description": "Get the win in style.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aura/Aura.Aura",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Meshes/F_MED_Treasure_Hunter_Fashion_AnimBp.F_MED_Treasure_Hunter_Fashion_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_TreasureHunterFashionsFNCS/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_TreasureHunterFashionFNCS",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/FNCS/Materials/F_MED_TreasureHunter_FNCS_Body.F_MED_TreasureHunter_FNCS_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/FNCS/Materials/F_MED_TreasureHunter_FNCS_Head.F_MED_TreasureHunter_FNCS_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/FNCS/Materials/F_MED_TreasureHunter_FNCS_FaceAcc.F_MED_TreasureHunter_FNCS_FaceAcc"
            ]
        },
        {
            "Name": "Satoru Gojo (Six Eyes)",
            "ID": "Character_FloodPlain",
            "Description": "Widely known as the strongest Sorcerer of modern times.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SatoruGojo/SatoruGojo.SatoruGojo",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_FloodPlain/Meshes/M_MED_FloodPlain_AnimBP.M_MED_FloodPlain_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_floodplain/variants/parts/stage2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_FloodPlain",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_ToonFE_Default.B_Athena_PartModifier_ToonFE_Default_C",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_FloodPlain/Materials/M_MED_FloodPlain_Body.M_MED_FloodPlain_Body",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_FloodPlain/Materials/M_MED_FloodPlainBlack_FaceAcc.M_MED_FloodPlainBlack_FaceAcc",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_FloodPlain/Materials/M_MED_FloodPlain_Head.M_MED_FloodPlain_Head"
            ]
        },
        {
            "Name": "Pastel",
            "ID": "CID_392_Athena_Commando_F_BountyBunny",
            "Description": "Spring into action.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Pastel/Pastel.Pastel",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Bounty_Bunny/Meshes/F_MED_Bounty_Bunny_AnimBp.F_MED_Bounty_Bunny_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_392_athena_commando_f_bountybunny/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_392_Athena_Commando_F_BountyBunny",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Bounty_Bunny/Materials/F_Med_BountyBunny_Body.F_Med_BountyBunny_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/Bounty_Bunny/Materials/F_MED_Bounty_Bunny_Head.F_MED_Bounty_Bunny_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/Bounty_Bunny/Materials/F_MED_Bounty_Bunny_Hair.F_MED_Bounty_Bunny_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Bounty_Bunny/Materials/F_Med_BountyBunny_FaceAcc.F_Med_BountyBunny_FaceAcc"
            ]
        },
        {
            "Name": "Maki Master",
            "ID": "CID_271_Athena_Commando_F_SushiChef",
            "Description": "Roll up your sleeves and get to work.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MakiMaster/MakiMaster.MakiMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChef/Meshes/F_MED_Sushi_Chef_AnimBP.F_MED_Sushi_Chef_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_271_athena_commando_f_sushichef/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_271_Athena_Commando_F_SushiChef",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SushiChef/Meshes/Materials/F_MED_SushiChef.F_MED_SushiChef",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Materials/F_MED_ASN_Starfish_SushiChef_Head__v04.F_MED_ASN_Starfish_SushiChef_Head__v04",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChef/Meshes/Materials/F_Med_SushiChef_Hair.F_Med_SushiChef_Hair"
            ]
        },
        {
            "Name": "Maki Master (Night)",
            "ID": "CID_271_Athena_Commando_F_SushiChef?????BLACK",
            "Description": "Roll up your sleeves and get to work.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MakiMaster/MakiMaster.MakiMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChef/Meshes/F_MED_Sushi_Chef_AnimBP.F_MED_Sushi_Chef_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_271_athena_commando_f_sushichef/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_271_Athena_Commando_F_SushiChef",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChefNight/Materials/F_MED_SushiChefNight_Body.F_MED_SushiChefNight_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChefNight/Materials/F_MED_ASN_SushiChefNight_Head.F_MED_ASN_SushiChefNight_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChefNight/Materials/F_MED_SushiChefNight_Hair.F_MED_SushiChefNight_Hair"
            ]
        },
        {
            "Name": "Red Jade",
            "ID": "CID_545_Athena_Commando_F_SushiNinja",
            "Description": "Summon your fighting spirit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RedJade/RedJade.RedJade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Meshes/F_MED_Sushi_Ninja_AnimBP.F_MED_Sushi_Ninja_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_545_Athena_Commando_F_SushiNinja/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_545_Athena_Commando_F_SushiNinja",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Materials/F_MED_Sushi_Ninja_Body.F_MED_Sushi_Ninja_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Textures/Sushi_Ninja/Materials/F_MED_Sushi_Ninja.F_MED_Sushi_Ninja",
                "/BRCosmetics/Accessories/Hats/F_MED_Sushi_Ninja_Acc/Materials/F_MED_Sushi_Ninja_Acc.F_MED_Sushi_Ninja_Acc"
            ]
        },
        {
            "Name": "Blue Jade",
            "ID": "CID_545_Athena_Commando_F_SushiNinja?????BLUE",
            "Description": "Summon your fighting spirit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RedJade/RedJade.RedJade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Meshes/F_MED_Sushi_Ninja_AnimBP.F_MED_Sushi_Ninja_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_545_athena_commando_f_sushininja/variants/material/mat2.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_545_Athena_Commando_F_SushiNinja",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Skins/Blue/Materials/F_MED_Sushi_Ninja_Blue_Body.F_MED_Sushi_Ninja_Blue_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Skin/Sushi_Ninja_Blue/Materials/F_MED_Sushi_Ninja_Blue.F_MED_Sushi_Ninja_Blue",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Skins/Blue/Materials/F_MED_Sushi_Ninja_Blue_Acc.F_MED_Sushi_Ninja_Blue_Acc"
            ]
        },
        {
            "Name": "Red Jade (Maki Monster)",
            "ID": "CID_545_Athena_Commando_F_SushiNinja?????MONSTER",
            "Description": "Summon your fighting spirit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RedJade/RedJade.RedJade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Meshes/F_MED_Sushi_Ninja_AnimBP.F_MED_Sushi_Ninja_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_545_athena_commando_f_sushininja/variants/material/mat3.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_545_Athena_Commando_F_SushiNinja",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Skins/Glow/Materials/F_Sushi_NinjaGlow_Body.F_Sushi_NinjaGlow_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Skins/Glow/Materials/F_MED_Sushi_NinjaGlow_Head.F_MED_Sushi_NinjaGlow_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Skins/Glow/Materials/F_Sushi_NinjaGlow_FaceAcc.F_Sushi_NinjaGlow_FaceAcc"
            ]
        },
        {
            "Name": "Sarah Connor",
            "ID": "CID_992_Athena_Commando_F_Typhoon_LPFU6",
            "Description": "She was just a girl from LA, but destiny had big plans for her.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SarahConnor/SarahConnor.SarahConnor",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Typhoon/Meshes/F_MED_Typhoon_AnimBP.F_MED_Typhoon_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_992_athena_commando_f_typhoon_lpfu6/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_992_Athena_Commando_F_Typhoon",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Typhoon/Materials/F_MED_Typhoon_Body.F_MED_Typhoon_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Typhoon/Materials/F_MED_Typhoon_Head.F_MED_Typhoon_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Typhoon/Materials/F_MED_Typhoon_FaceAcc.F_MED_Typhoon_FaceAcc"
            ]
        },
        {
            "Name": "Indigo Kuno",
            "ID": "CID_660_Athena_Commando_F_BandageNinjaBlue",
            "Description": "The Falcon Clan's finest.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/IndigoKuno/IndigoKuno.IndigoKuno",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Meshes/F_MED_Bandage_Ninja_AnimBP.F_MED_Bandage_Ninja_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_660_athena_commando_f_bandageninjablue/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_660_Athena_Commando_F_BandageNinjaBlue",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/BandageNinjaBlue/Materials/F_MED_BandageNinja_Blue_Body.F_MED_BandageNinja_Blue_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/BandageNinjaBlue/Materials/F_MED_BandageNinja_Blue_Body.F_MED_BandageNinja_Blue_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/BandageNinjaBlue/Materials/F_MED_BandageNinja_Blue_FaceAcc.F_MED_BandageNinja_Blue_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/Repaint01/Materials/F_MED_BandageNinja_Repaint01_Head.F_MED_BandageNinja_Repaint01_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/BandageNinjaBlue/Materials/F_MED_BandageNinja_Blue_Hair.F_MED_BandageNinja_Blue_Hair"
            ]
        },
        {
            "Name": "Kuno",
            "ID": "CID_362_Athena_Commando_F_BandageNinja",
            "Description": "Master the art of deception.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/IndigoKuno/IndigoKuno.IndigoKuno",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Meshes/F_MED_Bandage_Ninja_AnimBP.F_MED_Bandage_Ninja_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_362_Athena_Commando_F_BandageNinja/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_362_Athena_Commando_F_BandageNinja",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Materials/F_MED_Commando_BandageNinja.F_MED_Commando_BandageNinja",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Materials/F_MED_Commando_BandageNinja.F_MED_Commando_BandageNinja",
                "/Game/Accessories/Hats/F_MED_BandageNinja_FaceAcc/Materials/F_MED_Commando_BandageNinja_FaceAcc.F_MED_Commando_BandageNinja_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Skin/Bandage_Ninja/Material/F_MED_BandageNinja_Head.F_MED_BandageNinja_Head",
                "/Game/Accessories/Hats/F_MED_BandageNinja_FaceAcc/Materials/F_MED_Commando_BandageNinja_Hair.F_MED_Commando_BandageNinja_Hair"
            ]
        },
        {
            "Name": "Kuno (White)",
            "ID": "CID_362_Athena_Commando_F_BandageNinja_WHITE",
            "Description": "Master the art of deception.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/IndigoKuno/IndigoKuno.IndigoKuno",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Meshes/F_MED_Bandage_Ninja_AnimBP.F_MED_Bandage_Ninja_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_362_athena_commando_f_bandageninja/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_362_Athena_Commando_F_BandageNinja",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/White/Materials/F_MED_BandageNinja_White_Body.F_MED_BandageNinja_White_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/White/Materials/F_MED_BandageNinja_White_Body.F_MED_BandageNinja_White_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/White/Materials/F_MED_BandageNinja_White_FaceAcc.F_MED_BandageNinja_White_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Skin/Bandage_Ninja/Material/F_MED_BandageNinja_Head.F_MED_BandageNinja_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/White/Materials/F_MED_BandageNinja_WhiteHair.F_MED_BandageNinja_WhiteHair"
            ]
        },
        {
            "Name": "Arcane Jinx",
            "ID": "CID_A_256_Athena_Commando_F_UproarBraids_8IOZW",
            "Description": "She's a totally innocent bystander... with a rocket launcher.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ArcaneJinx/ArcaneJinx.ArcaneJinx",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Uproar_Braids/Meshes/Parts/F_MED_Uproar_Braids_FaceAcc_AnimBP.F_MED_Uproar_Braids_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_256_Athena_Commando_F_UproarBraids_8IOZW/icon.png",
            "Rarity": "gaminglegends",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_256_Athena_Commando_F_UproarBraids",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Uproar_Braids/Materials/F_MED_UproarBraids_Body.F_MED_UproarBraids_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Uproar_Braids/Materials/F_MED_UproarBraids_Head.F_MED_UproarBraids_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Uproar_Braids/Materials/F_MED_UproarBraids_FaceAcc.F_MED_UproarBraids_FaceAcc"
            ]
        },
        {
            "Name": "Eleven",
            "ID": "Character_GroovyReader",
            "Description": "Telekinetic teen who escaped Dr. Brenner and Hawkins National Laboratory.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Eleven/Eleven.Eleven",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Meshes/F_MED_GroovyReader_AnimBP.F_MED_GroovyReader_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_GroovyReader/icon.png",
            "Rarity": "epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_GroovyReader",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Materials/MI_GroovyReader_Body.MI_GroovyReader_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Materials/MI_GroovyReader_Head.MI_GroovyReader_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Materials/MI_GroovyReader_Eyes.MI_GroovyReader_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Materials/MI_GroovyReader_FaceAcc.MI_GroovyReader_FaceAcc"
            ]
        },
        {
            "Name": "Eleven (White)",
            "ID": "Character_GroovyReader_WHITE",
            "Description": "Telekinetic teen who escaped Dr. Brenner and Hawkins National Laboratory.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ElevenWhite/ElevenWhite.ElevenWhite",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Meshes/F_MED_GroovyReader_AnimBP.F_MED_GroovyReader_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_groovyreader/variants/parts/stage2.png",
            "Rarity": "epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_GroovyReader",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader_White/Materials/MI_GroovyReader_Body.MI_GroovyReader_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader_White/Materials/MI_GroovyReader_FaceAcc.MI_GroovyReader_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Materials/MI_GroovyReader_Head.MI_GroovyReader_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Materials/MI_GroovyReader_Eyes.MI_GroovyReader_Eyes"
            ]
        },
        {
            "Name": "Jawbreaker",
            "ID": "CID_583_Athena_Commando_F_NoshHunter",
            "Description": "She's playing the most delicious game.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Jawbreaker/Jawbreaker.Jawbreaker",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_NoshHunter/Meshes/Nosh_Hunter_AnimBP.Nosh_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_583_Athena_Commando_F_NoshHunter/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_583_Athena_Commando_F_NoshHunter",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_NoshHunter/Materials/F_MED_NoshHunter_Body.F_MED_NoshHunter_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_NoshHunter/Materials/F_MED_NoshHunter_faceAcc.F_MED_NoshHunter_faceAcc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_NoshHunter/Materials/F_MED_NoshHunter_FaceAcc_Glass.F_MED_NoshHunter_FaceAcc_Glass",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_CAU_Durrburger_PJ_Head_01/Skin/Materials/F_MED_NoshHunter.F_MED_NoshHunter"
            ]
        },
        {
            "Name": "Galaxy Crossfade",
            "ID": "Character_StarStray",
            "Description": "Blast beats across the galaxy.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/GalaxyCrossfade/GalaxyCrossfade.GalaxyCrossfade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Meshes/F_MED_StarStray_AnimBP.F_MED_StarStray_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_StarStray/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_StarStray",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_StarStrayGalaxy.B_Athena_PartModifier_StarStrayGalaxy_C",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Skins/Galaxy/Materials/StarStrayGalaxy_Body.StarStrayGalaxy_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Skins/Galaxy/Materials/StarStrayGalaxy_Head.StarStrayGalaxy_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Eyes.StarStray_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Hair.StarStray_Hair"
            ]
        },
        {
            "Name": "Encore Crossfade",
            "ID": "Character_StarStray?????ENCORE",
            "Description": "Blast beats across the galaxy.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/GalaxyCrossfade/GalaxyCrossfade.GalaxyCrossfade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Meshes/F_MED_StarStray_AnimBP.F_MED_StarStray_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_starstray/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_StarStray",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_StarStrayGalaxy.B_Athena_PartModifier_StarStrayGalaxy_C",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Body.StarStray_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Head.StarStray_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Eyes.StarStray_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Hair.StarStray_Hair"
            ]
        },
        {
            "Name": "Cosmic Crossfade",
            "ID": "Character_StarStray?????COSMIC",
            "Description": "Blast beats across the galaxy.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/GalaxyCrossfade/GalaxyCrossfade.GalaxyCrossfade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Meshes/F_MED_StarStray_AnimBP.F_MED_StarStray_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_starstray/variants/material/mat3.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_StarStray",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_StarStrayGalaxy.B_Athena_PartModifier_StarStrayGalaxy_C",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Skins/Rave/Materials/StarStrayRave_Body.StarStrayRave_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Skins/Rave/Materials/StarStrayRave_Head.StarStrayRave_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Eyes.StarStray_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Hair.StarStray_Hair"
            ]
        },
        {
            "Name": "Rebirth Harley Quinn",
            "ID": "CID_A_063_Athena_Commando_F_CottonCandy",
            "Description": "She's callin' the shots now, puddin'.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RebirthHarleyQuinn/RebirthHarleyQuinn.RebirthHarleyQuinn",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Cotton_Candy/Meshes/F_MED_Cotton_Candy_AnimBP.F_MED_Cotton_Candy_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_063_Athena_Commando_F_CottonCandy/icon.png",
            "Rarity": "dc",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_063_Athena_Commando_F_CottonCandy",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cotton_Candy/Materials/F_MED_Cotton_Candy_Body.F_MED_Cotton_Candy_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cotton_Candy/Materials/F_MED_Cotton_Candy_Head.F_MED_Cotton_Candy_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Lollipop/Materials/F_MED_Lollipop_FaceAcc.F_MED_Lollipop_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Lollipop/Materials/F_MED_Lollipop_FaceAcc_Accessories.F_MED_Lollipop_FaceAcc_Accessories"
            ]
        },
        {
            "Name": "Jamila (Reactive)",
            "ID": "Character_ChicleVeil",
            "Description": "Build modern invention from ancient insight.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Jamila/Jamila.Jamila",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Meshes/F_MED_ChicleVeil_AnimBP.F_MED_ChicleVeil_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_chicleveil/variants/parts/stage1.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_ChicleVeil",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Body_Reactive.MI_ChicleVeil_Body_Reactive",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Head.MI_ChicleVeil_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Eyes.MI_ChicleVeil_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_FaceAcc.MI_ChicleVeil_FaceAcc"
            ]
        },
        {
            "Name": "Jamila",
            "ID": "Character_ChicleVeil?????NORMAL",
            "Description": "Build modern invention from ancient insight.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Jamila/Jamila.Jamila",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Meshes/F_MED_ChicleVeil_AnimBP.F_MED_ChicleVeil_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_ChicleVeil/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_ChicleVeil",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Body.MI_ChicleVeil_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Head.MI_ChicleVeil_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Eyes.MI_ChicleVeil_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_FaceAcc.MI_ChicleVeil_FaceAcc"
            ]
        },
        {
            "Name": "Birch",
            "ID": "Character_TalonHime",
            "Description": "Her roots run deep.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Birch/Birch.Birch",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_TalonHime/Meshes/F_MED_TalonHime_AnimBP.F_MED_TalonHime_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_TalonHime/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_TalonHime",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_TalonHime/Materials/MI_TalonHime_Body_2023.MI_TalonHime_Body_2023",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_TalonHime/Materials/MI_TalonHime_Head.MI_TalonHime_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_TalonHime/Materials/MI_TalonHime_Eyes.MI_TalonHime_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_TalonHime/Materials/MI_TalonHime_FaceAcc.MI_TalonHime_FaceAcc"
            ]
        },
        {
            "Name": "Countess Daraku",
            "ID": "Character_IchorIncisor",
            "Description": "Embrace your thirst for fame.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/CountessDaraku/CountessDaraku.CountessDaraku",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IchorIncisor/Meshes/F_MED_IchorIncisor_AnimBlueprint.F_MED_IchorIncisor_AnimBlueprint_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_IchorIncisor/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_IchorIncisor",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IchorIncisor/Materials/F_MED_IchorIncisor_Body.F_MED_IchorIncisor_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IchorIncisor/Materials/F_MED_IchorIncisor_Head.F_MED_IchorIncisor_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IchorIncisor/Materials/F_MED_IchorIncisor_FaceAcc.F_MED_IchorIncisor_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IchorIncisor/Materials/F_MED_IchorIncisor_FaceAcc_Glass.F_MED_IchorIncisor_FaceAcc_Glass"
            ]
        },
        {
            "Name": "Harmony Lee",
            "ID": "Character_BrightShimmer",
            "Description": "Breeze your way to victory.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/HarmonyLee/HarmonyLee.HarmonyLee",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Meshes/F_MED_BrightShimmer_AnimBP.F_MED_BrightShimmer_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_BrightShimmer/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_BrightShimmer",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_Body.MI_Bright_Shimmer_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_Head.MI_Bright_Shimmer_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_Eyes.MI_Bright_Shimmer_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_FaceAcc_Glasses.MI_Bright_Shimmer_FaceAcc_Glasses",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_FaceAcc.MI_Bright_Shimmer_FaceAcc"
            ]
        },
        {
            "Name": "Harmony Lee (Streetwear)",
            "ID": "Character_BrightShimmer?????STREETWEAR",
            "Description": "Breeze your way to victory.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/HarmonyLee_Streetwear/HarmonyLee_Streetwear.HarmonyLee_Streetwear",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer_Casual/Meshes/F_MED_BrightShimmer_Casual_AnimBP.F_MED_BrightShimmer_Casual_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_brightshimmer/variants/parts/stage2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_BrightShimmer",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer_Casual/Materials/F_MED_BrightShimmer_Casual_Body.F_MED_BrightShimmer_Casual_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer_Casual/Materials/F_MED_BrightShimmer_Casual_FaceAcc.F_MED_BrightShimmer_Casual_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_Head.MI_Bright_Shimmer_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_Eyes.MI_Bright_Shimmer_Eyes"
            ]
        },
        {
            "Name": "Elite Striker Sephira",
            "ID": "Character_CameraShake",
            "Description": "Go for the shutout.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/EliteStrikerSephira/EliteStrikerSephira.EliteStrikerSephira",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Meshes/F_MED_CameraShake_AnimBP.F_MED_CameraShake_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_camerashake/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_CameraShake",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_Body.F_MED_CameraShake_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_Head.F_MED_CameraShake_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_Eyes.F_MED_CameraShake_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_FaceAcc.F_MED_CameraShake_FaceAcc"
            ]
        },
        {
            "Name": "Elite Striker Sephira (Away Game)",
            "ID": "Character_CameraShake?????DARK",
            "Description": "Go for the shutout.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/EliteStrikerSephira/EliteStrikerSephira.EliteStrikerSephira",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Meshes/F_MED_CameraShake_AnimBP.F_MED_CameraShake_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_camerashake/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_CameraShake",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Skins/Dark/Materials/MI_CameraShake_Body.MI_CameraShake_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_Head.F_MED_CameraShake_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_Eyes.F_MED_CameraShake_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_FaceAcc.F_MED_CameraShake_FaceAcc"
            ]
        },
        {
            "Name": "Festival Phaedra",
            "ID": "Character_MelodyUrchin",
            "Description": "Rise from the deep... to party.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/FestivalPhaedra/FestivalPhaedra.FestivalPhaedra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_MelodyUrchin/Meshes/F_MED_MelodyUrchin_AnimBP.F_MED_MelodyUrchin_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_MelodyUrchin/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_MelodyUrchin",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_MelodyUrchin/Materials/MI_MelodyUrchin_Body.MI_MelodyUrchin_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_MelodyUrchin/Materials/MI_MelodyUrchin_Head.MI_MelodyUrchin_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_MelodyUrchin/Materials/MI_MelodyUrchin_Eyes.MI_MelodyUrchin_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_MelodyUrchin/Materials/MI_MelodyUrchin_FaceAcc.MI_MelodyUrchin_FaceAcc"
            ]
        },
        {
            "Name": "Torin",
            "ID": "CID_A_200_Athena_Commando_F_GhostHunter",
            "Description": "A hunter prepared for every dimension.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Torin/Torin.Torin",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Meshes/F_MED_Ghost_Hunter_AnimBP.F_MED_Ghost_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_200_Athena_Commando_F_GhostHunter/icon.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_200_Athena_Commando_F_GhostHunter",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Dark/F_MED_Ghost_Hunter_Dark_Body.F_MED_Ghost_Hunter_Dark_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/F_MED_Ghost_Hunter_Head.F_MED_Ghost_Hunter_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Dark/F_MED_Ghost_Hunter_Dark_FaceAcc.F_MED_Ghost_Hunter_Dark_FaceAcc"
            ]
        },
        {
            "Name": "Torin (Dark)",
            "ID": "CID_A_200_Athena_Commando_F_GhostHunter?????BLACK",
            "Description": "A hunter prepared for every dimension.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Torin/Torin.Torin",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Meshes/F_MED_Ghost_Hunter_AnimBP.F_MED_Ghost_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_200_athena_commando_f_ghosthunter/variants/material/mat2.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_200_Athena_Commando_F_GhostHunter",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/F_MED_Ghost_Hunter_Body.F_MED_Ghost_Hunter_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/F_MED_Ghost_Hunter_Head.F_MED_Ghost_Hunter_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/F_MED_Ghost_Hunter_FaceAcc.F_MED_Ghost_Hunter_FaceAcc"
            ]
        },
        {
            "Name": "Torin (Blue)",
            "ID": "CID_A_200_Athena_Commando_F_GhostHunter?????BLUE",
            "Description": "A hunter prepared for every dimension.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Torin/Torin.Torin",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Meshes/F_MED_Ghost_Hunter_AnimBP.F_MED_Ghost_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_200_athena_commando_f_ghosthunter/variants/material/mat3.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_200_Athena_Commando_F_GhostHunter",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_Blue.F_MED_Ghost_Hunter_Blue",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_SL_Head_Blue.F_MED_Ghost_Hunter_SL_Head_Blue",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_FaceAcc_Blue.F_MED_Ghost_Hunter_FaceAcc_Blue"
            ]
        },
        {
            "Name": "Torin (Purple)",
            "ID": "CID_A_200_Athena_Commando_F_GhostHunter?????PURPLE",
            "Description": "A hunter prepared for every dimension.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Torin/Torin.Torin",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Meshes/F_MED_Ghost_Hunter_AnimBP.F_MED_Ghost_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_200_athena_commando_f_ghosthunter/variants/material/mat4.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_200_Athena_Commando_F_GhostHunter",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_Epic.F_MED_Ghost_Hunter_Epic",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/F_MED_Ghost_Hunter_Head.F_MED_Ghost_Hunter_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_FaceAcc_Epic.F_MED_Ghost_Hunter_FaceAcc_Epic"
            ]
        },
        {
            "Name": "Torin (Golden)",
            "ID": "CID_A_200_Athena_Commando_F_GhostHunter?????GOLDEN",
            "Description": "A hunter prepared for every dimension.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Torin/Torin.Torin",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Meshes/F_MED_Ghost_Hunter_AnimBP.F_MED_Ghost_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_200_athena_commando_f_ghosthunter/variants/material/mat5.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_200_Athena_Commando_F_GhostHunter",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_Legendary.F_MED_Ghost_Hunter_Legendary",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_SL_Head_Legendary.F_MED_Ghost_Hunter_SL_Head_Legendary",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_FaceAcc_Legendary.F_MED_Ghost_Hunter_FaceAcc_Legendary"
            ]
        },
        {
            "Name": "Peekabo",
            "ID": "CID_220_Athena_Commando_F_Clown",
            "Description": "I see you!",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Peekabo/Peekabo.Peekabo",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Clown/Meshes/F_MED_Clown_AnimBP.F_MED_Clown_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_220_Athena_Commando_F_Clown/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_220_Athena_Commando_F_Clown",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Clown/Materials/F_MED_Commando_Clown.F_MED_Commando_Clown",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HighTower_Tomato_Casual/Materials/M_VertexCrunch.M_VertexCrunch",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Clown/Materials/F_MED_Commando_Clown_Head.F_MED_Commando_Clown_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Clown/Materials/F_MED_Commando_Clown_Hair.F_MED_Commando_Clown_Hair"
            ]
        },
        {
            "Name": "Peekabo (Sneaky Peek)",
            "ID": "CID_220_Athena_Commando_F_Clown?????BLACK",
            "Description": "I see you!",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Peekabo/Peekabo.Peekabo",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Clown/Meshes/F_MED_Clown_AnimBP.F_MED_Clown_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_220_athena_commando_f_clown/variants/parts/stage2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_220_Athena_Commando_F_Clown",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Clown/Skins/Classic/Materials/F_MED_Clown_Classic_Body.F_MED_Clown_Classic_Body",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HighTower_Tomato_Casual/Materials/M_VertexCrunch.M_VertexCrunch",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Clown/Skins/Classic/Materials/F_Med_Clown_Classic_Head.F_Med_Clown_Classic_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Clown/Skins/Classic/Materials/F_MED_Clown_Classic_Hair.F_MED_Clown_Classic_Hair"
            ]
        },
        {
            "Name": "Yuki",
            "ID": "CID_A_050_Athena_Commando_F_SailorSquadRose",
            "Description": "Though she seems sweet and shy, this expert hacker is the Wakers' muscle inside the virtual world.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Yuki/Yuki.Yuki",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sailor_Squad_Rose/Meshes/Parts/F_MED_SSquad_Rose_FaceAcc_AnimBP.F_MED_SSquad_Rose_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_050_Athena_Commando_F_SailorSquadRose/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_050_Athena_Commando_F_SailorSquadRose",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_SailorSquad.B_Athena_PartModifier_SailorSquad_C",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sailor_Squad_Rose/Materials/F_SailorSquad_Rose_Body.F_SailorSquad_Rose_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sailor_Squad_Rose/Materials/F_SailorSquad_Rose_FaceAcc.F_SailorSquad_Rose_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Sailor_Squad_Rose/Materials/F_SailorSquad_Rose_Head.F_SailorSquad_Rose_Head"
            ]
        },
        {
            "Name": "April O'neil",
            "ID": "Character_PalmTree",
            "Description": "Channel 6 News' investigative reporter in the field.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/apriloneil/apriloneil.apriloneil",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_PalmTree/Meshes/F_MED_PalmTree_AnimBP.F_MED_PalmTree_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_PalmTree/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_PalmTree",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_PalmTree/Materials/MI_PalmTree_Body.MI_PalmTree_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_PalmTree/Materials/MI_PalmTree_Head.MI_PalmTree_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_PalmTree/Materials/MI_PalmTree_Eyes.MI_PalmTree_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_PalmTree/Materials/MI_PalmTree_Hair.MI_PalmTree_Hair"
            ]
        },
        {
            "Name": "Havoc",
            "ID": "CID_089_Athena_Commando_M_RetroGrey",
            "Description": "Striking fear into the opposition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Havoc/Havoc.Havoc",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_UltraRareCommando_01/Meshes/M_MED_Commando_UltraRare_01_Body_Skeleton_AnimBP.M_MED_Commando_UltraRare_01_Body_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_089_Athena_Commando_M_RetroGrey/icon.png",
            "Rarity": "legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_089_Athena_Commando_M_RetroGrey",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_UltraRareCommando_01/Skins/Camo_Stealth/Materials/MI_StealthRaptor_Body.MI_StealthRaptor_Body",
                "/Game/Characters/Player/Male/Medium/Heads/M_MED_HIS_Diego_Head_01/Materials/M_Med_UltraRareCommando_Head_01.M_Med_UltraRareCommando_Head_01",
                "/Game/Characters/Player/Male/Medium/Heads/M_MED_HIS_Diego_Head_01/Materials/M_Med_UltraRareCommando_Hair_01.M_Med_UltraRareCommando_Hair_01",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_UltraRareCommando_01/Skins/Camo_Stealth/Materials/MI_StealthRaptor_Hat.MI_StealthRaptor_Hat"
            ]
        },
        {
            "Name": "Cloaked Shadow",
            "ID": "CID_317_Athena_Commando_M_WinterGhoul",
            "Description": "Cast an ominous shadow.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/CloakedShadow/CloakedShadow.CloakedShadow",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Winter_Ghoul/Meshes/M_MED_Winter_Ghoul_Skeleton_AnimBlueprint.M_MED_Winter_Ghoul_Skeleton_AnimBlueprint_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_317_Athena_Commando_M_WinterGhoul/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_317_Athena_Commando_M_WinterGhoul",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Winter_Ghoul/Materials/M_MED_Winter_Ghoul.M_MED_Winter_Ghoul",
                "/BRCosmetics/Accessories/Hats/M_MED_Winter_Ghoul_Hat/Materials/MI_Med_WinterGhoul_Horns.MI_Med_WinterGhoul_Horns",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Winter_Ghoul/Materials/M_MED_Winter_Ghoul.M_MED_Winter_Ghoul"
            ],
            "IdleEffectNiagara": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Winter_Ghoul/Effects/NS_Ghoul_FaceSmoke_01.NS_Ghoul_FaceSmoke_01",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/B_Athena_PartModifier_Generic.B_Athena_PartModifier_Generic_C"
        },
        {
            "Name": "Punk",
            "ID": "CID_902_Athena_Commando_M_PumpkinPunk",
            "Description": "Smashing.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ChromePunk/ChomePunk.ChomePunk",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Pumpkin_Punk/Meshes/M_MED_Pumpkin_Punk_AnimBP.M_MED_Pumpkin_Punk_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_902_Athena_Commando_M_PumpkinPunk/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_902_Athena_Commando_M_PumpkinPunk",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Pumpkin_Punk/Materials/M_MED_PumpkinPunk_Body.M_MED_PumpkinPunk_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Pumpkin_Punk/Materials/M_MED_PumpkinPunk_Head.M_MED_PumpkinPunk_Head"
            ],
            "Info": "No Eye VFX. Will be added soon"
        },
        {
            "Name": "Chrome Punk",
            "ID": "Character_PumpkinPunk_Glitch",
            "Description": "Hacking and carving a path to victory.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ChromePunk/ChomePunk.ChomePunk",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Pumpkin_Punk/Meshes/M_MED_Pumpkin_Punk_AnimBP.M_MED_Pumpkin_Punk_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_PumpkinPunk_Glitch/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_PumpkinPunk_Glitch",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Pumpkin_Punk/Skins/Glitch/Materials/M_MED_PumpkinPunk_Glitch_Body.M_MED_PumpkinPunk_Glitch_Body",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Pumpkin_Punk/Skins/Glitch/Materials/M_MED_PumpkinPunk_Glitch_Head.M_MED_PumpkinPunk_Glitch_Head"
            ],
            "IdleEffectNiagara": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Pumpkin_Punk/Skins/Glitch/FX/NS_Head_PumpkinPunk_Glitch.NS_Head_PumpkinPunk_Glitch"
        },
        {
            "Name": "Cameo vs Chic (Pink)",
            "ID": "CID_571_Athena_Commando_F_Sheath_PINK",
            "Description": "Make your appearance.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/CameoVsChic/CameoVsChic.CameoVsChic",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Sheath/Meshes/F_MED_Sheath_AnimBP.F_MED_Sheath_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_571_athena_commando_f_sheath/variants/progressive/stage2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_571_Athena_Commando_F_Sheath",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Sheath/Materials/F_MED_Commando_Body_Sheath.F_MED_Commando_Body_Sheath",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Sheath/Materials/M_MED_Sheath_FaceAccessory.M_MED_Sheath_FaceAccessory",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Sheath/Materials/M_MED_Sheath_Glass.M_MED_Sheath_Glass",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Sheath/Materials/F_MED_Commando_Head_Sheath.F_MED_Commando_Head_Sheath"
            ]
        },
        {
            "Name": "Yellowjacket",
            "ID": "CID_749_Athena_Commando_F_GraffitiAssassin",
            "Description": "Venomous and victorious.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/YellowJacket/YellowJacket.YellowJacket",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin/Meshes/F_MED_Graffiti_Assassin_AnimBP.F_MED_Graffiti_Assassin_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_749_Athena_Commando_F_GraffitiAssassin/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_749_Athena_Commando_F_GraffitiAssassin",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin/Materials/F_MED_Graffiti_Assassin_Body.F_MED_Graffiti_Assassin_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Graffiti_Assassin_Head/Materials/F_MED_Graffiti_Assassin_Head.F_MED_Graffiti_Assassin_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin/Materials/F_MED_Graffiti_Assassin_FaceAcc.F_MED_Graffiti_Assassin_FaceAcc"
            ]
        },
        {
            "Name": "Yellowjacket (Black)",
            "ID": "CID_749_Athena_Commando_F_GraffitiAssassin_BLACK",
            "Description": "Venomous and victorious.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/YellowJacket/YellowJacket.YellowJacket",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin/Meshes/F_MED_Graffiti_Assassin_AnimBP.F_MED_Graffiti_Assassin_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_749_athena_commando_f_graffitiassassin/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_749_Athena_Commando_F_GraffitiAssassin",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin_Black/Materials/F_MED_Graffiti_Assassin_Black_Body.F_MED_Graffiti_Assassin_Black_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Graffiti_Assassin_Head/Skins/Black/Materials/Graffiti_Assassin_Black_Head.Graffiti_Assassin_Black_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin/Materials/F_MED_Graffiti_Assassin_FaceAcc.F_MED_Graffiti_Assassin_FaceAcc"
            ]
        },
        {
            "Name": "Yellowjacket (Pink)",
            "ID": "CID_749_Athena_Commando_F_GraffitiAssassin_PINK",
            "Description": "Venomous and victorious.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/YellowJacket/YellowJacket.YellowJacket",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin/Meshes/F_MED_Graffiti_Assassin_AnimBP.F_MED_Graffiti_Assassin_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1158823342028095571/1190372854445899826/pinkjacket.png?ex=65a1901c&is=658f1b1c&hm=d9cb0a41168cb3010ed65c81d6552976d39bb390fbf6a0bcd17f3b78ccac1aec&",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_749_Athena_Commando_F_GraffitiAssassin",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin/Materials/F_MED_Graffiti_Assassin_Body.F_MED_Graffiti_Assassin_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Graffiti_Assassin_Head/Materials/F_MED_Graffiti_Assassin_Head.F_MED_Graffiti_Assassin_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin/Materials/F_MED_Graffiti_Assassin_FaceAcc.F_MED_Graffiti_Assassin_FaceAcc"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin/Textures/T_Graffiti_Assassin_Body_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Yellowjacket/Skins/Pink/Body"
                },
                {
                    "From": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_Assassin/Textures/T_Graffiti_Assassin_FaceAcc_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Yellowjacket/Skins/Pink/Hat"
                }
            ]
        },
        {
            "Name": "Iris",
            "ID": "CID_674_Athena_Commando_F_HoodieBandit",
            "Description": "Keep the competition in your sights.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Iris/Iris.Iris",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hoodie_Bandit/Meshes/F_MED_Hoodie_Bandit_AnimBP.F_MED_Hoodie_Bandit_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_674_athena_commando_f_hoodiebandit/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_674_Athena_Commando_F_HoodieBandit",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hoodie_Bandit/Materials/F_MED_HoodieBandit_Body.F_MED_HoodieBandit_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hoodie_Bandit/Materials/F_MED_HoodieBandit_FaceAcc.F_MED_HoodieBandit_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Hoodie_Bandit/Materials/F_MED_HoodieBandit_Hair.F_MED_HoodieBandit_Hair",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Materials/F_MED_ASN_Starfish_Head_01_HairNone.F_MED_ASN_Starfish_Head_01_HairNone",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Skin/HoodieBandit/Materials/F_MED_HoodieBandit_Head.F_MED_HoodieBandit_Head"
            ]
        },
        {
            "Name": "Backlash (Full White)",
            "ID": "CID_861_Athena_Commando_F_Elastic_B_WHITE",
            "Description": "Strike back.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Superhero2/Backlash.Backlash",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Elastic/Meshes/F_MED_Elastic_AnimBP.F_MED_Elastic_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1191168465806053427/whitesuperhero-removebg-preview.png?ex=65a47515&is=65920015&hm=2bfdf6291584b73e20d3607b001641c3c8211a43c3d0c5035d31ffa9ddead238&",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_861_Athena_Commando_F_Elastic_B",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Superhero/whiteplain"
                }
            ],
            "Info": "The skin color is not 100% accurate\n\nDisable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Backlash (Full Black)",
            "ID": "CID_861_Athena_Commando_F_Elastic_B_BLACK",
            "Description": "Strike back.",
            "Type": "UEFN",
            "Info": "The skin color is not 100% accurate\n\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Superhero2/Backlash.Backlash",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Elastic/Meshes/F_MED_Elastic_AnimBP.F_MED_Elastic_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1191169179563331584/blacksuperhero-removebg-preview.png?ex=65a475bf&is=659200bf&hm=52c4aea2c4c94afd2eb004936b32e0e427369a05f257da6784bc7ca86576fe51&",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_861_Athena_Commando_F_Elastic_B",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Superhero/plainblack2"
                }
            ]
        },
        {
            "Name": "Backlash (Full Gray)",
            "ID": "CID_861_Athena_Commando_F_Elastic_B_GRAY",
            "Description": "Strike back.",
            "Type": "UEFN",
            "Info": "The skin color is not 100% accurate\n\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Superhero2/Backlash.Backlash",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Elastic/Meshes/F_MED_Elastic_AnimBP.F_MED_Elastic_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1173718870515777694/1200541664385708163/uwuwu-removebg-preview.png?ex=65c68e8d&is=65b4198d&hm=6a9d88105e457db0a306cfc73127f50fccda7a06243157b5ead270eb6a471c57&",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_861_Athena_Commando_F_Elastic_B",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Superhero2/darker"
                }
            ]
        },
        {
            "Name": "Echo",
            "ID": "CID_715_Athena_Commando_F_TwinDark",
            "Description": "Are you real, or just a reflection?",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Echo/Echo.Echo",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Twin_Dark/Meshes/FaceAcc/F_MED_Twin_Dark_FaceAcc_AnimBP.F_MED_Twin_Dark_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_715_athena_commando_f_twindark/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_715_Athena_Commando_F_TwinDark",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Twin_Dark/Materials/F_MED_TwinDark_Body.F_MED_TwinDark_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Ice_Maiden_Head_01/Skins/TwinDark/Materials/F_MED_TwinDark_Head.F_MED_TwinDark_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Twin_Dark/Materials/F_MED_TwinDark_Glass.F_MED_TwinDark_Glass",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Twin_Dark/Materials/F_MED_TwinDark_Acc.F_MED_TwinDark_Acc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Twin_Dark/Materials/F_MED_TwinDark_Hair.F_MED_TwinDark_Hair"
            ]
        },
        {
            "Name": "Ace Academic",
            "ID": "Character_Pencil_Mango",
            "Description": "Scholastic specialist.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/AceAcademic/AceAcademic.AceAcademic",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pencil_B/VestJacket/Meshes/Pencil_VestJacket_MedB_Ubdy_AnimBp.Pencil_VestJacket_MedB_Ubdy_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_Pencil_Mango/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_Pencil_Mango",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pencil_B/VestJacket/Materials/MI_PencilPear_VestJacket_MedB_Ubdy.MI_PencilPear_VestJacket_MedB_Ubdy",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pencil_B/ShortsSocks/Materials/MI_PencilPear_ShortsSocks_MedB_Lbdy.MI_PencilPear_ShortsSocks_MedB_Lbdy",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pencil_B/Flats/Materials/MI_PencilPear_Flats_MedB_Feet.MI_PencilPear_Flats_MedB_Feet",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Pencil_Mango_Head/Materials/M_PencilMango_FaceAcc.M_PencilMango_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Pencil_Mango_Head/Materials/M_PencilMango_Eyes.M_PencilMango_Eyes",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Pencil_Mango_Head/Materials/MI_PencilMango_Head.MI_PencilMango_Head"
            ],
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_Pencil.B_Athena_PartModifier_Pencil_C"
        },
        {
            "Name": "Brilliant Bomber",
            "ID": "CID_619_Athena_Commando_F_TechLlama",
            "Description": "Show your shine.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/BrilliantBomber/BrilliantBomber.BrilliantBomber",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_619_Athena_Commando_F_TechLlama/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_619_Athena_Commando_F_TechLlama",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Commando_Tech_Llama/Materials/M_F_MED_Commando_Tech_Llama_body.M_F_MED_Commando_Tech_Llama_body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Commando_Tech_Llama/Materials/M_F_MED_Commando_Tech_Llama_Hair.M_F_MED_Commando_Tech_Llama_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Commando_Tech_Llama/Materials/M_F_MED_Commando_Tech_Llama_Head.M_F_MED_Commando_Tech_Llama_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Commando_Tech_Llama/Materials/F_MED_Commando_Tech_LlamaGlasses.F_MED_Commando_Tech_LlamaGlasses"
            ]
        },
        {
            "Name": "Summitseeker Evie",
            "ID": "Character_IceRetreat",
            "Description": "Mountaineer. Rebel. And queen of the peaks.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SummitSeeker/SummitSeeker.SummitSeeker",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IceRetreat/Meshes/F_MED_IceRetreat_AnimBP.F_MED_IceRetreat_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_IceRetreat/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_IceRetreat",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IceRetreat/Materials/MI_IceRetreat_Body.MI_IceRetreat_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IceRetreat/Materials/MI_IceRetreat_Head.MI_IceRetreat_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IceRetreat/Materials/Ml_IceRetreat_Eyes.Ml_IceRetreat_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IceRetreat/Materials/MI_IceRetreat_FaceAcc.MI_IceRetreat_FaceAcc"
            ]
        },
        {
            "Name": "Elite Agent",
            "ID": "CID_083_Athena_Commando_F_Tactical",
            "Description": "Failure is not an option.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/EliteAgent/EliteAgent.EliteAgent",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_083_Athena_Commando_F_Tactical/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_083_Athena_Commando_F_Tactical",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_43/Materials/F_MED_Commando_Body_BR043.F_MED_Commando_Body_BR043",
                "/BRCosmetics/Accessories/Hats/Materials/Female_Commando_18_TacticalUrban.Female_Commando_18_TacticalUrban",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Hair_Ponytail.F_MED_Commando_Hair_Ponytail",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/BR043/F_MED_HIS_Ramirez_BR043.F_MED_HIS_Ramirez_BR043"
            ]
        },
        {
            "Name": "Elite Agent (Galaxy)",
            "ID": "CID_083_Athena_Commando_F_Tactical_GALAXY",
            "Description": "Failure is not an option.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/EliteAgent/EliteAgent.EliteAgent",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1008089914623139851/1191739742254010460/image-removebg-preview_11.png?ex=65a68920&is=65941420&hm=0dd07cdccdadefd311eaa48b1f95d4456140d980d01ae88b45132110cb974fc4&",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_083_Athena_Commando_F_Tactical",
            "Materials": [
                "/BRCosmetics/Weapons/WeaponSkins/Wraps/Materials/MI_WeaponWrap_Celestial.MI_WeaponWrap_Celestial",
                "/BRCosmetics/Weapons/WeaponSkins/Wraps/Materials/MI_WeaponWrap_Celestial.MI_WeaponWrap_Celestial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/Galaxy/Materials/M_MED_HIS_Sparks_Hair_Celestial.M_MED_HIS_Sparks_Hair_Celestial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/Galaxy/Materials/M_MED_HIS_Sparks_Head_Celestial.M_MED_HIS_Sparks_Head_Celestial"
            ]
        },
        {
            "Name": "Crystal",
            "ID": "CID_493_Athena_Commando_F_JurassicArchaeology",
            "Description": "Clarity, wits, and vision.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Crystal/Crystal.Crystal",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Meshes/F_MED_Jurassic_Archaeology_AnimBP.F_MED_Jurassic_Archaeology_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_493_athena_commando_f_jurassicarchaeology/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_493_Athena_Commando_F_JurassicArchaeology",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Materials/F_MED_JurassicArchaeology_Body.F_MED_JurassicArchaeology_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Materials/F_MED_JurassicArchaeology_Crystal.F_MED_JurassicArchaeology_Crystal",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Materials/F_MED_JurassicArchaeology_FaceAcc.F_MED_JurassicArchaeology_FaceAcc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Materials/F_MED_JurassicArchaeology_FaceAcc_Glass.F_MED_JurassicArchaeology_FaceAcc_Glass"
            ]
        },
        {
            "Name": "Crystal (Jungle)",
            "ID": "CID_493_Athena_Commando_F_JurassicArchaeology_JUNGLE",
            "Description": "Clarity, wits, and vision.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Crystal/Crystal.Crystal",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Meshes/F_MED_Jurassic_Archaeology_AnimBP.F_MED_Jurassic_Archaeology_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1191754542124126319/junglecrystal.png?ex=65a696e8&is=659421e8&hm=cffd6978cf15910fafa5eaee480e00a25fa45f38777f21b1383d3fed0db0107a&",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_493_Athena_Commando_F_JurassicArchaeology",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Materials/F_MED_JurassicArchaeology_Body.F_MED_JurassicArchaeology_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Materials/F_MED_JurassicArchaeology_Crystal.F_MED_JurassicArchaeology_Crystal",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Materials/F_MED_JurassicArchaeology_FaceAcc.F_MED_JurassicArchaeology_FaceAcc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Materials/F_MED_JurassicArchaeology_FaceAcc_Glass.F_MED_JurassicArchaeology_FaceAcc_Glass"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_JurassicArchaeology/Textures/T_F_MED_Jurassic_Archaeology_Body_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Crystal/Jungle/bodyt"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Psycho Bandit",
            "ID": "CID_515_Athena_Commando_M_BarbequeLarry",
            "Description": "Heyo!",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/PsychoBandit/PsychoBandit.PsychoBandit",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BarbequeLarry/Meshes/M_MED_BarbequeLarry_AnimBP.M_MED_BarbequeLarry_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_515_Athena_Commando_M_BarbequeLarry/icon.png",
            "Rarity": "gaminglegends",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_515_Athena_Commando_M_BarbequeLarry",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BarbequeLarry/Materials/M_MED_BarbequeLarry_Body.M_MED_BarbequeLarry_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Heads/M_MED_BarbequeLarry_Head/Materials/M_MED_BarbequeLarry_Head.M_MED_BarbequeLarry_Head",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BarbequeLarry/Materials/M_MED_BarbequeLarry_FaceAcc.M_MED_BarbequeLarry_FaceAcc"
            ]
        },
        {
            "Name": "Psycho Bandit + Rainbow Clover",
            "ID": "CID_515_Athena_Commando_M_BarbequeLarry_RAINBOWCLOVER",
            "Description": "Heyo!",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/PsychoBanditWithRainbowClover/PsychoBanditWithRainbowClover.PsychoBanditWithRainbowClover",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BarbequeLarry/Meshes/M_MED_BarbequeLarry_AnimBP.M_MED_BarbequeLarry_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1202319849808994305/psychowithclover.png?ex=65cd069e&is=65ba919e&hm=198f857199014f97ed3100e8196d6cd411d65d904d55852a99b77925549f217f&",
            "Rarity": "gaminglegends",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_515_Athena_Commando_M_BarbequeLarry",
            "Materials": [
                "/Game/Accessories/FORT_Backpacks/M_MED_Lucky_Rider_Backpack/Materials/M_MED_LuckyRider_Backpack.M_MED_LuckyRider_Backpack",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BarbequeLarry/Materials/M_MED_BarbequeLarry_Body.M_MED_BarbequeLarry_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Heads/M_MED_BarbequeLarry_Head/Materials/M_MED_BarbequeLarry_Head.M_MED_BarbequeLarry_Head",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BarbequeLarry/Materials/M_MED_BarbequeLarry_FaceAcc.M_MED_BarbequeLarry_FaceAcc"
            ]
        },
        {
            "Name": "Polo Prodigy",
            "ID": "Character_StallionAviator",
            "Description": "She will never settle for second place.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/PoloProdigy/PoloProdigy.PoloProdigy",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Meshes/F_MED_StallionAviator_AnimBP.F_MED_StallionAviator_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_StallionAviator/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_StallionAviator",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Materials/F_MED_StallionAviator_Body.F_MED_StallionAviator_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Materials/F_MED_StallionAviator_FaceAcc.F_MED_StallionAviator_FaceAcc"
            ],
            "Info": "Skin has no eyebrows. Can't see that ingame."
        },
        {
            "Name": "Polo Prodigy (White)",
            "ID": "Character_StallionAviator_WHITE",
            "Description": "She will never settle for second place.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/PoloProdigy/PoloProdigy.PoloProdigy",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Meshes/F_MED_StallionAviator_AnimBP.F_MED_StallionAviator_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_stallionaviator/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_StallionAviator",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Skin/StallionAviator_White/Materials/F_MED_StallionAviator_White_Body.F_MED_StallionAviator_White_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StallionAviator/Skin/StallionAviator_White/Materials/F_MED_StallionAviator_White_FaceAcc.F_MED_StallionAviator_White_FaceAcc"
            ],
            "Info": "Skin has no eyebrows. Can't see that ingame."
        },
        {
            "Name": "Hana",
            "ID": "CID_A_452_Athena_Commando_F_Barium",
            "Description": "The greatest speedboarder in her Reality.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Hana/Hana.Hana",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Barium/Meshes/F_MED_Barium_AnimBP.F_MED_Barium_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_452_athena_commando_f_barium/variants/parts/stage2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_452_Athena_Commando_F_Barium",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Barium/Materials/F_MED_Barium_Body_v2.F_MED_Barium_Body_v2",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Barium/Materials/F_MED_Barium_Head.F_MED_Barium_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Barium/Materials/F_MED_Barium_Hair.F_MED_Barium_Hair"
            ],
            "Info": "No VFX. They will be added soon",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_Barium.B_Athena_PartModifier_Barium_C"
        },
        {
            "Name": "Aniyah",
            "ID": "Character_DyedDuelist",
            "Description": "Create something magical.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aniyah/Aniyha.Aniyha",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DyedDuelist/Meshes/Parts/F_MED_DyedDuelist_FaceAcc_AnimBP.F_MED_DyedDuelist_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_DyedDuelist/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_DyedDuelist",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DyedDuelist/Materials/MI_DyedDuelist_Body.MI_DyedDuelist_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DyedDuelist/Materials/MI_DyedDuelist_Eyes.MI_DyedDuelist_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DyedDuelist/Materials/MI_DyedDuelist_Head.MI_DyedDuelist_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DyedDuelist/Materials/MI_DyedDuelist_FaceAcc.MI_DyedDuelist_FaceAcc"
            ]
        },
        {
            "Name": "Modena Icon",
            "ID": "CID_A_138_Athena_Commando_F_Foray_YQPB0",
            "Description": "Embrace your racing soul.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ModenaIcon/ModenaIcon.ModenaIcon",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Foray/Meshes/Parts/F_MED_Foray_FaceAcc_AnimBP.F_MED_Foray_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_138_Athena_Commando_F_Foray_YQPB0/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_138_Athena_Commando_F_Foray",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Foray/Materials/F_MED_Foray_Body.F_MED_Foray_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Foray/Materials/F_MED_Foray_Head.F_MED_Foray_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Foray/Materials/F_MED_Foray_FaceAcc.F_MED_Foray_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Foray/Materials/F_MED_Foray_Hair.F_MED_Foray_Hair"
            ],
            "Info": "No eyebrows"
        },
        {
            "Name": "Chun-Li",
            "ID": "CID_A_024_Athena_Commando_F_Skirmish_QW2BQ_2ndd",
            "Description": "Interpol officer with a strong sense of justice and even stronger roundhouse kick.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Chunli/ChunLi.ChunLi",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Skirmish_Alt/Meshes/Parts/F_MED_Skirmish_Alt_AnimBP.F_MED_Skirmish_Alt_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_024_athena_commando_f_skirmish_qw2bq/variants/parts/stage2.png",
            "Rarity": "gaminglegends",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_024_Athena_Commando_F_Skirmish",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Skirmish_Alt/Materials/F_MED_SkirmishAlt_Body.F_MED_SkirmishAlt_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Skirmish_Alt/Materials/F_MED_SkirmishAlt_FaceAcc.F_MED_SkirmishAlt_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Skirmish_Alt/Materials/F_MED_SkirmishAlt_Head.F_MED_SkirmishAlt_Head"
            ]
        },
        {
            "Name": "Trailblazer",
            "ID": "CID_114_Athena_Commando_F_TacticalWoodland",
            "Description": "On the forefront of victory.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/TrailBlazer/TrailBlazer.TrailBlazer",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_114_Athena_Commando_F_TacticalWoodland/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_114_Athena_Commando_F_TacticalWoodland",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TacticalWoodland/Materials/F_MED_Commando_TacticalWoodland.F_MED_Commando_TacticalWoodland",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Hair_01.F_MED_Commando_Hair_01",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_Med_TacticalWoodland/Materials/F_MED_Head_TacticalWoodland.F_MED_Head_TacticalWoodland",
                "/BRCosmetics/Accessories/Hats/Materials/Female_Commando_TacticalWoodland.Female_Commando_TacticalWoodland"
            ]
        },
        {
            "Name": "Slim Shady",
            "ID": "Character_HeavyRoar",
            "Description": "Eminem's Evil Twin.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SlimShady/SlimShady.SlimShady",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HeavyRoar/Meshes/M_MED_HeavyRoar_AnimBP.M_MED_HeavyRoar_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_HeavyRoar/icon.png",
            "Rarity": "Icon",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_HeavyRoar",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HeavyRoar/Materials/M_MED_HeavyRoar_Body.M_MED_HeavyRoar_Body",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HeavyRoar/Materials/M_MED_HeavyRoar_Head.M_MED_HeavyRoar_Head", 
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HeavyRoar/Materials/MI_M_HeavyRoar_Eyes.MI_M_HeavyRoar_Eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HeavyRoar/Materials/M_MED_HeavyRoar_FaceAcc.M_MED_HeavyRoar_FaceAcc"
            ],
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_HeavyRoar.B_Athena_PartModifier_HeavyRoar_C"
        },
        {
            "Name": "Ariana Grande",
            "ID": "CID_A_158_Athena_Commando_F_Buffet_YC20H",
            "Description": "Her presence? Sweet. Her aura? Bright.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ArianaGrande/ArianaGrande.ArianaGrande",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Buffet/Meshes/Parts/F_MED_Buffet_FaceAcc_AnimBP.F_MED_Buffet_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_158_Athena_Commando_F_Buffet_YC20H/icon.png",
            "Rarity": "Icon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_158_Athena_Commando_F_Buffet",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Buffet/Materials/F_MED_Buffet_Body.F_MED_Buffet_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Buffet_Head/Materials/F_MED_Buffet_Head.F_MED_Buffet_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Buffet/Materials/F_MED_Buffet_FaceAcc.F_MED_Buffet_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Buffet/Materials/F_MED_Buffet_Body_Glass.F_MED_Buffet_Body_Glass"
            ],
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/B_Athena_PartModifier_Generic.B_Athena_PartModifier_Generic_C",
            "IdleEffectNiagara": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Buffet/FX/NS_Buffet_Default.NS_Buffet_Default"
        },
        {
            "Name": "Teknique",
            "ID": "CID_120_Athena_Commando_F_Graffiti",
            "Description": "Spray up a storm.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Teknique/Teknique.Teknique",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_01/Meshes/F_MED_Graffiti_Body_01_AnimBlueprint.F_MED_Graffiti_Body_01_AnimBlueprint_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_120_Athena_Commando_F_Graffiti/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_120_Athena_Commando_F_Graffiti",
            "Materials": [
                "/Game/Accessories/Hats/Materials/F_MED_Commando_Graffiti_Hat.F_MED_Commando_Graffiti_Hat",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Graffiti_01/Materials/F_MED_Commando_Graffiti.F_MED_Commando_Graffiti",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Hair_Graffiti.F_MED_Commando_Hair_Graffiti",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Head_01.F_MED_Commando_Head_01"
            ]
        },
        {
            "Name": "Double Agent Wildcard",
            "ID": "CID_787_Athena_Commando_M_Heist_Ghost",
            "Description": "Everything according to plan.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/DoubleAgentChaos/DoubleAgentChaos.DoubleAgentChaos",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Heist/Meshes/M_MED_Heist_AnimBP.M_MED_Heist_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_787_Athena_Commando_M_Heist_Ghost/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_787_Athena_Commando_M_Heist_Ghost",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Heist/Material/M_MED_Heist_Body.M_MED_Heist_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Heist/Material/M_MED_Heist_FaceAcc.M_MED_Heist_FaceAcc",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HighTower_Tomato_Casual/Materials/MI_VertexCrunch.MI_VertexCrunch"
            ]
        },
        {
            "Name": "Double Agent Wildcard (Black)",
            "ID": "CID_787_Athena_Commando_M_Heist_Ghost_BLACK",
            "Description": "Everything according to plan.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/DoubleAgentChaos/DoubleAgentChaos.DoubleAgentChaos",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Heist/Meshes/M_MED_Heist_AnimBP.M_MED_Heist_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_787_athena_commando_m_heist_ghost/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_787_Athena_Commando_M_Heist_Ghost",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Commando_Heist_Shadow/Materials/M_Commando_Heist_Shadow_Body.M_Commando_Heist_Shadow_Body",
                "/BRCosmetics/Accessories/Hats/M_MED_HeistMask_Diamond/Skins/M_MED_HeistShadow/Materials/MI_Heistmask_HeistShadow.MI_Heistmask_HeistShadow",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HighTower_Tomato_Casual/Materials/MI_VertexCrunch.MI_VertexCrunch"
            ]
        },
        {
            "Name": "Kate Bishop",
            "ID": "CID_A_331_Athena_Commando_F_Keen_B4LF5",
            "Description": "Being a Super Hero is amazing. Everyone should try it.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/KateBishop/KateBishop.KateBishop",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Keen/Meshes/Parts/F_MED_Keen_FaceAcc_AnimBP.F_MED_Keen_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_331_Athena_Commando_F_Keen_B4LF5/icon.png",
            "Rarity": "marvel",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_331_Athena_Commando_F_Keen",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Keen/Materials/F_MED_Keen_Body.F_MED_Keen_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Keen/Materials/F_MED_Keen_Head.F_MED_Keen_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Keen/Materials/F_MED_Keen_FaceAcc.F_MED_Keen_FaceAcc"
            ]
        },
        {
            "Name": "Lara Croft",
            "ID": "CID_A_040_Athena_Commando_F_Temple",
            "Description": "The extraordinary is in what we do, not who we are.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/LaraCroft/LaraCroft.LaraCroft",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Temple/Meshes/Parts/F_MED_Temple_FaceAcc_AnimBP.F_MED_Temple_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_040_Athena_Commando_F_Temple/icon.png",
            "Rarity": "gaminglegends",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_040_Athena_Commando_F_Temple",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Temple/Materials/F_MED_Temple_Body.F_MED_Temple_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Temple/Materials/F_MED_Temple_head.F_MED_Temple_head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Temple/Materials/F_MED_Temple_FaceAcc.F_MED_Temple_FaceAcc"
            ]
        },
        {
            "Name": "Lara Croft (Golden)",
            "ID": "CID_A_040_Athena_Commando_F_Temple_GOLD",
            "Description": "The extraordinary is in what we do, not who we are.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/LaraCroftGold/LaraCroftGold.LaraCroftGold",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Temple_Shorts/Meshes/Parts/F_MED_Temple_Shorts_AnimBP.F_MED_Temple_Shorts_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_040_athena_commando_f_temple/variants/progressive/stage4.png",
            "Rarity": "gaminglegends",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_040_Athena_Commando_F_Temple",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Temple_Shorts/Materials/F_MED_Temple_Shorts_Body_Gold.F_MED_Temple_Shorts_Body_Gold",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Temple_Shorts/Materials/F_MED_Temple_Shorts_Head_Gold1.F_MED_Temple_Shorts_Head_Gold1",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Temple_Shorts/Materials/F_MED_Temple_Shorts_FA_Gold.F_MED_Temple_Shorts_FA_Gold"
            ]
        },
        {
            "Name": "Astra",
            "ID": "CID_642_Athena_Commando_F_ConstellationStar",
            "Description": "A constellation of skill and talent.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/AstraFN/Astra.Astra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Constellation_Star/Meshes/Parts/F_MED_Constellation_Star_FaceAcc_AnimBP.F_MED_Constellation_Star_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_642_Athena_Commando_F_ConstellationStar/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_642_Athena_Commando_F_ConstellationStar",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Rebirth_Soldier/Skins/Constellation/Materials/F_MED_Constellation_Body.F_MED_Constellation_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Constellation_Star/Materials/F_MED_Constellation_Hair.F_MED_Constellation_Hair",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/Constellation/Materials/F_MED_Constellation_Head.F_MED_Constellation_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh"
            ],
            "Info": "Astra has no eyebrows."
        },
        {
            "Name": "Astra (Star)",
            "ID": "CID_642_Athena_Commando_F_ConstellationStar_STAR",
            "Description": "A constellation of skill and talent.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/AstraFN/Astra.Astra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Constellation_Star/Meshes/Parts/F_MED_Constellation_Star_FaceAcc_AnimBP.F_MED_Constellation_Star_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_642_athena_commando_f_constellationstar/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_642_Athena_Commando_F_ConstellationStar",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Rebirth_Soldier/Skins/Constellation/Materials/F_MED_ConstellationStar_Body.F_MED_ConstellationStar_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Constellation_Star/Materials/F_MED_Constellation_Hair.F_MED_Constellation_Hair",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/Constellation/Materials/F_MED_Constellation_Head.F_MED_Constellation_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh"
            ],
            "Info": "Astra has no eyebrows."
        },
        {
            "Name": "Starflare",
            "ID": "CID_808_Athena_Commando_F_ConstellationSun",
            "Description": "The last star you'll see tonight.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/AstraFN/Astra.Astra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Constellation_Star/Meshes/Parts/F_MED_Constellation_Star_FaceAcc_AnimBP.F_MED_Constellation_Star_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_808_athena_commando_f_constellationsun/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_808_Athena_Commando_F_ConstellationSun",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Rebirth_Soldier/Skins/ConstellationSun/Materials/F_MED_ConstellationSun_Body.F_MED_ConstellationSun_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Rebirth_Soldier/Skins/ConstellationSun/Materials/F_MED_ConstellationSun_Hair.F_MED_ConstellationSun_Hair",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/Constellation/Materials/F_MED_Constellation_Head.F_MED_Constellation_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh"
            ],
            "Info": "Astra has no eyebrows.",
            "IdleEffectNiagara": "/BRCosmetics/Athena/Effects/Particles/Skins/ConstellationSun/NS_ConstellationSun_Sparkles_Body.NS_ConstellationSun_Sparkles_Body",
            "IdleFXSocket": "spine_03",
            "PartModifierBlueprint": "/BRCosmetics/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_Constellation_Female.B_Athena_PartModifier_Constellation_Female_C"
        },
        {
            "Name": "Frost Squad",
            "ID": "CID_972_Athena_Commando_F_ArcticCamoWoods",
            "Description": "Ice cold tactics. Ice cold fashion.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/FrostSquad/FrostSquad.FrostSquad",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Arctic_Camo_Woods/Meshes/Parts/F_MED_Arctic_Camo_Woods_AnimBP.F_MED_Arctic_Camo_Woods_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_972_Athena_Commando_F_ArcticCamoWoods/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_972_Athena_Commando_F_ArcticCamoWoods",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Arctic_Camo_Woods/Materials/F_MED_ArcticCamoWoods_Body.F_MED_ArcticCamoWoods_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Arctic_Camo_Woods/Materials/F_MED_ArcticCamoWoods_FaceAc.F_MED_ArcticCamoWoods_FaceAc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Arctic_Camo_Woods/Materials/F_MED_ArcticCamoWoods_Head.F_MED_ArcticCamoWoods_Head"
            ]
        },
        {
            "Name": "Rex",
            "ID": "CID_093_Athena_Commando_M_Dinosaur",
            "Description": "Hunting the competition to extinction.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Rex/Rex.Rex",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Meshes/SK_M_Med_Soldier_04_Skeleton_AnimBP.SK_M_Med_Soldier_04_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_093_Athena_Commando_M_Dinosaur/icon.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_093_Athena_Commando_M_Dinosaur",
            "Materials": [
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_Commando_12_Dino.Hat_M_Commando_12_Dino",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/TV_30/Materials/M_Med_Soldier_Body_TV30.M_Med_Soldier_Body_TV30",
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Materials/M_Med_Soldier_Head.M_Med_Soldier_Head",
                "/Game/Characters/Survivors/Male/Small/M_SML_Survivor_01/Materials/M_SML_Survivor_Hair_02.M_SML_Survivor_Hair_02"
            ]
        },
        {
            "Name": "Frozen Nog Ops",
            "ID": "CID_653_Athena_Commando_F_UglySweaterFrozen",
            "Description": "Bring some chill to the skirmish.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/FrozenNogOps/FrozenNogOps.FrozenNogOps",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Accessories/Hats/F_MED_HolidayPJs_FaceAcc/Meshes/F_MED_Holiday_PJs_1_FaceAcc_AnimBP.F_MED_Holiday_PJs_1_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_653_Athena_Commando_F_UglySweaterFrozen/icon.png",
            "Rarity": "Frozen",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_653_Athena_Commando_F_UglySweaterFrozen",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/UglySweater_Frozen/Materials/F_M_UglySweater_Frozen_Body.F_M_UglySweater_Frozen_Body",
                "/BRCosmetics/Accessories/Hats/F_MED_HolidayPJs_FaceAcc/Skins/UglySweater_Frozen/Materials/MI_F_MED_UglySweater_Frozen_FaceAcc.MI_F_MED_UglySweater_Frozen_FaceAcc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/UglySweater_Frozen/Materials/F_M_UglySweater_Frozen_Hair.F_M_UglySweater_Frozen_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/UglySweater_Frozen/Materials/F_M_UglySweater_Frozen_Head.F_M_UglySweater_Frozen_Head",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_Hide.F_MED_ASN_Sarah_Hair_Hide"
            ]
        },
        {
            "Name": "Dynamo",
            "ID": "CID_170_Athena_Commando_F_Luchador",
            "Description": "Rule the ring.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Dynamo/Dynamo.Dynamo",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Luchador_01/Meshes/F_MED_Luchador_01_AnimBp.F_MED_Luchador_01_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_170_Athena_Commando_F_Luchador/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_170_Athena_Commando_F_Luchador",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Luchador_01/Materials/F_MED_Luchador_Body.F_MED_Luchador_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Hair_Ponytail.F_MED_Commando_Hair_Ponytail",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/Luchador/F_MED_Commando_Head_01_Luchador.F_MED_Commando_Head_01_Luchador",
                "/BRCosmetics/Accessories/Hats/F_Med_Luchadora/Materials/F_MED_Luchadora_Hair.F_MED_Luchadora_Hair",
                "/BRCosmetics/Accessories/Hats/F_Med_Luchadora/Materials/F_MED_Luchadora_Hat.F_MED_Luchadora_Hat"
            ]
        },
        {
            "Name": "Joy",
            "ID": "CID_A_192_Athena_Commando_F_Suspenders",
            "Description": "She's ready to roll.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Joy/Joy.Joy",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Suspenders/Meshes/Parts/F_MED_Suspenders_FaceAcc_AnimBP.F_MED_Suspenders_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_192_Athena_Commando_F_Suspenders/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_192_Athena_Commando_F_Suspenders",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Suspenders/Materials/F_MED_Suspenders_Body.F_MED_Suspenders_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Suspenders/Materials/F_MED_Suspenders_Head.F_MED_Suspenders_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Suspenders/Materials/F_MED_Suspenders_FaceAcc.F_MED_Suspenders_FaceAcc"
            ]
        },
        {
            "Name": "Joy (Roller Royalty)",
            "ID": "CID_A_192_Athena_Commando_F_Suspenders_RollerRoyalty",
            "Description": "She's ready to roll.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Joy/Joy.Joy",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Suspenders/Meshes/Parts/F_MED_Suspenders_FaceAcc_AnimBP.F_MED_Suspenders_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_192_athena_commando_f_suspenders/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_192_Athena_Commando_F_Suspenders",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Suspenders_Purple/Materials/F_MED_Suspenders_Purple_Body.F_MED_Suspenders_Purple_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Suspenders_Purple/Materials/F_MED_Suspenders_Purple_Head.F_MED_Suspenders_Purple_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Suspenders_Purple/Materials/F_MED_Suspenders_Purple_FaceAcc.F_MED_Suspenders_Purple_FaceAcc"
            ]
        },
        {
            "Name": "Catwoman",
            "ID": "CID_530_Athena_Commando_F_BlackMonday_1BV6J",
            "Description": "Gotham’s Feline Femme Fatale.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/CatWoman/CatWoman.CatWoman",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BlackMonday/Meshes/F_MED_BlackMonday_AnimBP.F_MED_BlackMonday_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_530_Athena_Commando_F_BlackMonday_1BV6J/icon.png",
            "Rarity": "DC",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_530_Athena_Commando_F_BlackMonday_1BV6J",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BlackMonday/Materials/F_MED_BlackMonday_Body.F_MED_BlackMonday_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Materials/F_MED_ASN_Starfish_Head_01.F_MED_ASN_Starfish_Head_01",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BlackMonday/Materials/F_MED_BlackMonday_FaceAcc.F_MED_BlackMonday_FaceAcc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BlackMonday/Materials/F_MED_BlackMonday_FaceAcc_Glass.F_MED_BlackMonday_FaceAcc_Glass"
            ]
        },
        {
            "Name": "Rogue Spider Knight",
            "ID": "CID_516_Athena_Commando_M_BlackWidowRogue",
            "Description": "Weave a web of destruction.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RogueSpiderKnight/RogueSpiderKnight.RogueSpiderKnight",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_BlackWidow/Meshes/M_MED_BlackWidow_Skeleton_ABP.M_MED_BlackWidow_Skeleton_ABP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_516_Athena_Commando_M_BlackWidowRogue/icon.png",
            "Rarity": "legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_516_Athena_Commando_M_BlackWidowRogue",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_BlackWidow/Skins/White/Materials/M_MED_Blackwidow_White.M_MED_Blackwidow_White",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_BlackWidow/Skins/White/Materials/M_Med_BlackwidowWhite_Head.M_Med_BlackwidowWhite_Head"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RogueSpiderKnight/WhiteHelmet"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Alto",
            "ID": "CID_A_382_Athena_Commando_M_CactusDancer",
            "Description": "Live the front row lifestyle.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Alto/Alto.Alto",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Cactus_Dancer/Meshes/Parts/M_MED_Cactus_Dancer_FaceAcc_AnimBP.M_MED_Cactus_Dancer_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_382_Athena_Commando_M_CactusDancer/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_382_Athena_Commando_M_CactusDancer",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cactus_Dancer/Materials/M_MED_Cactus_Dancer_Body.M_MED_Cactus_Dancer_Body",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cactus_Dancer/Materials/M_MED_Cactus_Dancer_Head.M_MED_Cactus_Dancer_Head",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cactus_Dancer/Materials/M_MED_Cactus_Dancer_FaceAcc.M_MED_Cactus_Dancer_FaceAcc",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cactus_Dancer/Materials/M_MED_Cactus_Dancer_Hair.M_MED_Cactus_Dancer_Hair"
            ]
        },
        {
            "Name": "Sunset Alto",
            "ID": "Character_TigerRootHype",
            "Description": "You're looking at a headliner.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Alto/Alto.Alto",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Accessories/Glasses/Mask_DesertOps/Meshes/Mask_DesertOps_M_AnimBP.Mask_DesertOps_M_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_TigerRootHype/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_TigerRootHype",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cactus_Dancer/Skin/M_MED_TigerRootHype/T_M_MED_TigerRootHype_Body.T_M_MED_TigerRootHype_Body",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cactus_Dancer/Skin/M_MED_TigerRootHype/T_M_MED_TigerRootHype_Head.T_M_MED_TigerRootHype_Head",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cactus_Dancer/Skin/M_MED_TigerRootHype/T_M_MED_TigerRootHype_FaceAcc.T_M_MED_TigerRootHype_FaceAcc",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cactus_Dancer/Skin/M_MED_TigerRootHype/T_M_MED_TigerRootHype_Hair.T_M_MED_TigerRootHype_Hair"
            ],
            "IdleEffectNiagara": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cactus_Dancer/Skin/FX/NS_MED_TigerRootHype_Blue_Skin.NS_MED_TigerRootHype_Blue_Skin"
        },
        {
            "Name": "Siren",
            "ID": "CID_748_Athena_Commando_F_Hitman",
            "Description": "Unforgettable and inescapable.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Siren/Siren.Siren",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Meshes/Parts/F_MED_Hitman_FaceAcc_AnimBP.F_MED_Hitman_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_748_Athena_Commando_F_Hitman/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_748_Athena_Commando_F_Hitman",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Materials/M_F_MED_Hitman_Body.M_F_MED_Hitman_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Hitman_Head/Materials/M_F_MED_Hitman_Head.M_F_MED_Hitman_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Materials/M_F_MED_Hitman_Hair.M_F_MED_Hitman_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Materials/M_F_MED_Hitman_FaceAcc.M_F_MED_Hitman_FaceAcc"
            ]
        },
        {
            "Name": "Siren (Noir)",
            "ID": "CID_748_Athena_Commando_F_Hitman_NOIR",
            "Description": "Unforgettable and inescapable.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Siren/Siren.Siren",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Meshes/Parts/F_MED_Hitman_FaceAcc_AnimBP.F_MED_Hitman_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_748_athena_commando_f_hitman/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_748_Athena_Commando_F_Hitman",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Noir/Materials/M_F_MED_Hitman_Noir_Body.M_F_MED_Hitman_Noir_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Hitman_Head/Skins/Noir/Materials/M_F_MED_Hitman_Noir_Head.M_F_MED_Hitman_Noir_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Noir/Materials/M_F_MED_Hitman_Noir_Hair.M_F_MED_Hitman_Noir_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Noir/Materials/M_F_MED_Hitman_Noir_FaceAcc.M_F_MED_Hitman_Noir_FaceAcc"
            ]
        },
        {
            "Name": "Siren (Society Streetwear)",
            "ID": "CID_748_Athena_Commando_F_Hitman_SOCIETY",
            "Description": "Unforgettable and inescapable.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Siren/Siren.Siren",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Meshes/Parts/F_MED_Hitman_FaceAcc_AnimBP.F_MED_Hitman_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_748_athena_commando_f_hitman/variants/material/mat3.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_748_Athena_Commando_F_Hitman",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Flawless/Materials/MI_Hitman_Flawless_Body.MI_Hitman_Flawless_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Hitman_Head/Materials/M_F_MED_Hitman_Head.M_F_MED_Hitman_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Flawless/Materials/MI_Hitman_Flawless_Hair.MI_Hitman_Flawless_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Flawless/Materials/MI_Hitman_Flawless_Hair.MI_Hitman_Flawless_Hair"
            ]
        },
        {
            "Name": "Spycatcher Siren",
            "ID": "Character_Hitman_Dark",
            "Description": "Every operation needs a mastermind.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Siren/Siren.Siren",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Meshes/Parts/F_MED_Hitman_FaceAcc_AnimBP.F_MED_Hitman_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_hitman_dark/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_Hitman_Dark",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Dark/Materials/F_MED_HitmanDark_Body.F_MED_HitmanDark_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Hitman_Head/Materials/M_F_MED_Hitman_Head.M_F_MED_Hitman_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Dark/Materials/F_MED_HitmanDark_Hair.F_MED_HitmanDark_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Dark/Materials/F_MED_HitmanDark_FaceAcc.F_MED_HitmanDark_FaceAcc"
            ]
        },
        {
            "Name": "Spycatcher Siren (Cover Up)",
            "ID": "Character_Hitman_Dark_WHITE",
            "Description": "Every operation needs a mastermind.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Siren/Siren.Siren",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Meshes/Parts/F_MED_Hitman_FaceAcc_AnimBP.F_MED_Hitman_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_hitman_dark/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_Hitman_Dark",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Light/Materials/F_MED_HitmanLight_Body.F_MED_HitmanLight_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Hitman_Head/Materials/M_F_MED_Hitman_Head.M_F_MED_Hitman_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Light/Materials/F_MED_HitmanLight_FaceAcc.F_MED_HitmanLight_FaceAcc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Hitman/Skins/Light/Materials/F_MED_HitmanLight_FaceAcc.F_MED_HitmanLight_FaceAcc"
            ]
        },
        {
            "Name": "Catalyst (Max)",
            "ID": "CID_486_Athena_Commando_F_StreetRacerDrift_MAXBLACK",
            "Description": "Alter the paradigm.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Catalyst/Catalyst.Catalyst",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Racer_Drift_Remix/Meshes/F_MED_Street_Racer_Drift_Remix_AnimBP.F_MED_Street_Racer_Drift_Remix_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1008089914623139851/1197673216706105444/image-removebg-preview_15.png?ex=65bc1f1a&is=65a9aa1a&hm=6e5d65f95e890835a1a8676bc529b4eda97614817395ddc334976d50a3a008ae&",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_486_Athena_Commando_F_StreetRacerDrift",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Racer_Drift_Remix/Materials/M_F_Drift_Remix_Body_E.M_F_Drift_Remix_Body_E",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Racer_Drift_Remix/Materials/M_F_Drift_Remix_Jacket_E.M_F_Drift_Remix_Jacket_E",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Racer_Drift_Remix/Materials/M_F_Drift_Remix_Hair_T5.M_F_Drift_Remix_Hair_T5",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Racer_Drift_Remix/Materials/M_F_Drift_Remix_Head_T1.M_F_Drift_Remix_Head_T1"
            ],
            "Info": "No eye VFX."
        },
        {
            "Name": "Catalyst (White Max)",
            "ID": "CID_486_Athena_Commando_F_StreetRacerDrift_MAXWHITE",
            "Description": "Alter the paradigm.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Catalyst/Catalyst.Catalyst",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Racer_Drift_Remix/Meshes/F_MED_Street_Racer_Drift_Remix_AnimBP.F_MED_Street_Racer_Drift_Remix_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1197675019426349097/image-removebg-preview_16.png?ex=65bc20c8&is=65a9abc8&hm=7dbd59abe4e5d09549be657fb6f6ed6c84a8acf3de07ff840ae3375c2330a982&",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_486_Athena_Commando_F_StreetRacerDrift",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Racer_Drift_Remix/Materials/Blue_Version/M_F_Drift_Body_Blue_E.M_F_Drift_Body_Blue_E",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Racer_Drift_Remix/Materials/Blue_Version/M_F_Drift_Blue_Jacket_T234.M_F_Drift_Blue_Jacket_T234",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Racer_Drift_Remix/Materials/Blue_Version/M_F_Drift_Blue_Hair_T1234.M_F_Drift_Blue_Hair_T1234",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Racer_Drift_Remix/Materials/M_F_Drift_Remix_Head_T1.M_F_Drift_Remix_Head_T1"
            ],
            "Info": "No eye VFX."
        },
        {
            "Name": "Shot Stopper",
            "ID": "CID_A_002_Athena_Commando_F_GlobalFB_B_0CH64",
            "Description": "Nothing gets by you.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ShotStopper/ShotStopper.ShotStopper",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Global_FB/Meshes/F_MED_Global_FB_AnimBP.F_MED_Global_FB_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_002_athena_commando_f_globalfb_b_0ch64/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_002_Athena_Commando_F_GlobalFB_B",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Global_FB/Skins/Schalke/Materials/M_F_MED_Global_FB_Schlake_Body.M_F_MED_Global_FB_Schlake_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Elastic/Materials/Heads/F_MED_Elastic_Head_BLK_1.F_MED_Elastic_Head_BLK_1",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Elastic/Materials/Hair/Rebirth/F_MED_Elastic_Hair_BLK_1_NoTint.F_MED_Elastic_Hair_BLK_1_NoTint"
            ]
        },
        {
            "Name": "Shot Stopper (Los Angeles)",
            "ID": "CID_A_002_Athena_Commando_F_GlobalFB_B_0CH64_LA",
            "Description": "Nothing gets by you.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ShotStopper/ShotStopper.ShotStopper",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Global_FB/Meshes/F_MED_Global_FB_AnimBP.F_MED_Global_FB_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_002_athena_commando_f_globalfb_b_0ch64/variants/material/011.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_002_Athena_Commando_F_GlobalFB_B",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Global_FB/Skins/LosAngeles/Materials/M_F_MED_Global_FB_LosAngeles_Body.M_F_MED_Global_FB_LosAngeles_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Elastic/Materials/Heads/F_MED_Elastic_Head_BLK_1.F_MED_Elastic_Head_BLK_1",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Elastic/Materials/Hair/Rebirth/F_MED_Elastic_Hair_BLK_1_NoTint.F_MED_Elastic_Hair_BLK_1_NoTint"
            ]
        },
        {
            "Name": "Phantasm",
            "ID": "CID_A_472_Athena_Commando_M_FutureSamuraiSummer",
            "Description": "A spectral echo in search of his next physical form.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Phanstasm/Phanstasm.Phanstasm",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Future_Samurai_Summer/Meshes/M_MED_Future_Samurai_Summer_AnimBP.M_MED_Future_Samurai_Summer_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_472_Athena_Commando_M_FutureSamuraiSummer/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_472_Athena_Commando_M_FuturSamuraiSummer",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Future_Samurai_Summer/Materials/M_MED_Future_Samurai_Summer_Body.M_MED_Future_Samurai_Summer_Body",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Future_Samurai_Summer/Materials/M_MED_Future_Samurai_Summer_Head.M_MED_Future_Samurai_Summer_Head",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Future_Samurai_Summer/Materials/M_MED_Future_Samurai_Summer_FaceAcc.M_MED_Future_Samurai_Summer_FaceAcc"
            ]
        },
        {
            "Name": "Omega",
            "ID": "CID_116_Athena_Commando_M_CarbideBlack",
            "Description": "There can be only one.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Omega/Omega.Omega",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Carbide_01/Meshes/SK_M_MED_Carbide_Body_Export_Skeleton_AnimBlueprint.SK_M_MED_Carbide_Body_Export_Skeleton_AnimBlueprint_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_116_athena_commando_m_carbideblack/variants/progressive/stage5.png",
            "Rarity": "legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_116_Athena_Commando_M_CarbideBlack",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Carbide_01/Skins/M_MED_Carbide_Black/Materials/M_Med_Carbide_Black_Body.M_Med_Carbide_Black_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Carbide_01/Skins/M_MED_Carbide_Black/Materials/M_Med_Carbide_Black_Armor.M_Med_Carbide_Black_Armor",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Carbide_01/Skins/M_MED_Carbide_Black/Materials/M_Med_Carbide_Black_Hat.M_Med_Carbide_Black_Hat"
            ]
        },
        {
            "Name": "Padmé Amidala",
            "ID": "Character_IronBlaze",
            "Description": "Naboo's most courageous senator.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/PadmeAmidala2/PadmeAmidala2.PadmeAmidala2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IronBlaze/Meshes/Parts/F_MED_IronBlaze_FaceAcc_AnimBP.F_MED_IronBlaze_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_ironblaze/variants/parts/stage2.png",
            "Rarity": "starwars",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_IronBlaze",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IronBlaze/Materials/F_MED_IronBlaze_Body.F_MED_IronBlaze_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IronBlaze/Materials/F_MED_IronBlaze_Head.F_MED_IronBlaze_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IronBlaze/Materials/F_MED_IronBlaze_Eyes.F_MED_IronBlaze_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IronBlaze/Materials/F_MED_IronBlaze_FaceAcc.F_MED_IronBlaze_FaceAcc"
            ]
        },
        {
            "Name": "Fireworks Team Leader (Syd)",
            "ID": "CID_156_Athena_Commando_F_FuzzyBearInd",
            "Description": "Life, liberty, and the bear suit of happiness.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/FireworksTeamLeaderSyd/FireworksTeamLeaderSyd.FireworksTeamLeaderSyd",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_FuzzyBearIndependence_Star/Meshes/F_MED_FuzzyBearIndependance_Star_AnimBP.F_MED_FuzzyBearIndependance_Star_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_156_athena_commando_f_fuzzybearind/variants/parts/stage2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_156_Athena_Commando_F_FuzzyBearInd",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/BR_FemaleCommando_FuzzyBearIndepdance/Materials/F_MED_FuzzyBearIndepdance.F_MED_FuzzyBearIndepdance",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_FuzzyBearIndependence_Star/Materials/F_MED_FuzzyBearIndependence_Star_Head.F_MED_FuzzyBearIndependence_Star_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_FuzzyBearIndependence_Star/Materials/F_MED_FuzzyBearIndependence_Star_FaceAcc.F_MED_FuzzyBearIndependence_Star_FaceAcc"
            ]
        },
        {
            "Name": "The Kid Laroi",
            "ID": "Character_SunBurst",
            "Description": "From dreamer to hitmaker.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/KidLaroi/KidLaroi.KidLaroi",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Armature_Base_Skeleton.SK_M_MALE_Armature_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_SunBurst/Meshes/Parts/M_MED_SunBurst_Hair_FaceAcc_AnimBP.M_MED_SunBurst_Hair_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_SunBurst/icon.png",
            "Rarity": "icon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_SunBurst",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_SunBurst/Materials/M_MED_SunBurst_Body.M_MED_SunBurst_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_SunBurst/Materials/M_MED_SunBurst_Head.M_MED_SunBurst_Head",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_SunBurst/Materials/M_MED_SunBurst_HatOff.M_MED_SunBurst_HatOff",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_SunBurst/Materials/M_MED_SunBurst_Hat.M_MED_SunBurst_Hat",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_SunBurst/Materials/M_MED_SunBurst_Glass.M_MED_SunBurst_Glass"
            ],
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/B_Athena_PartModifier_Generic.B_Athena_PartModifier_Generic_C"
        },
        {
            "Name": "Black Widow",
            "ID": "CID_399_Athena_Commando_F_AshtonBoardwalk",
            "Description": "Whatever it takes.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/BlackWidow/BlackWidow.BlackWidow",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_AshtonBoardwalk/Meshes/Parts/F_MED_Ashton_Boardwalk_FaceAcc_AnimBP.F_MED_Ashton_Boardwalk_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_399_Athena_Commando_F_AshtonBoardwalk/icon.png",
            "Rarity": "marvel",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_399_Athena_Commando_F_AshtonBoardwalk",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_AshtonBoardwalk/Materials/F_MED_Ashton_Boardwalk_Body.F_MED_Ashton_Boardwalk_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Ashton_Boardwalk_Head/Materials/F_MED_Ashton_Boardwalk_Head.F_MED_Ashton_Boardwalk_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_AshtonBoardwalk/Materials/F_MED_Ashton_Boardwalk_Hair.F_MED_Ashton_Boardwalk_Hair"
            ],
            "Info": "No eyebrows becasuse im to lazy, sorry"
        },
        {
            "Name": "Par Patroller",
            "ID": "CID_801_Athena_Commando_F_GolfSummer",
            "Description": "Patience and focus wins the match.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/ParPatroller/ParPatroller.ParPatroller",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Golf_Summer/Meshes/Parts/F_MED_Golf_Summer_AnimBP.F_MED_Golf_Summer_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_801_Athena_Commando_F_GolfSummer/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_801_Athena_Commando_F_GolfSummer",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Golf_Summer/Materials/F_MED_GolfSummer_Body.F_MED_GolfSummer_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Materials/F_MED_ASN_Starfish_Head_01.F_MED_ASN_Starfish_Head_01",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Golf_Summer/Materials/F_MED_GolfSummer_Hair.F_MED_GolfSummer_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Golf_Summer/Materials/F_MED_GolfSummer_FaceAcc.F_MED_GolfSummer_FaceAcc"
            ],
            "Info": "No eyebrows becasuse im to lazy, sorry"
        },
        {
            "Name": "Doom Dancer (Gray)",
            "ID": "CID_A_249_Athena_Commando_F_ZombieElastic_GRAY",
            "Description": "Lurch where your will takes you.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Doomdancer/Doomdancer.Doomdancer",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Zombie_Elastic/Meshes/F_MED_Zombie_Elastic_AnimBP.F_MED_Zombie_Elastic_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1200978757482184724/doomdancergray.png?ex=65c825a0&is=65b5b0a0&hm=694fe140ba5389e2e9f0a9afdbfadb3d23b8098c0555a0530341678872f7ea94&",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_249_Athena_Commando_F_ZombieElastic",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Zombie_Elastic/Skins/CAU/Materials/F_MED_ZombieElastic_Hair_CAU.F_MED_ZombieElastic_Hair_CAU"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Doomdancer/Grayombie"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Doomdancer/Grayhead"
                }
            ],
            "Info": "The skin color is not 100% accurate\n\nDisable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Lynx (Stage 3)", 
            "ID": "CID_286_Athena_Commando_F_NeonCat",
            "Description": "Who needs nine lives when one is enough?",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Lynx/Lynx2.Lynx2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Meshes/F_MED_NeonCat_Body_T1_AnimBP.F_MED_NeonCat_Body_T1_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_286_athena_commando_f_neoncat/variants/particle/mat0.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_286_Athena_Commando_F_NeonCat",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberbody.F_MED_Neoncat_Cyberbody",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberhead.F_MED_Neoncat_Cyberhead",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberhead.F_MED_Neoncat_Cyberhead"
            ]
        },
        {
            "Name": "Lynx (Red Stage 3)", 
            "ID": "CID_286_Athena_Commando_F_NeonCat_RED",
            "Description": "Who needs nine lives when one is enough?",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Lynx/Lynx2.Lynx2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Meshes/F_MED_NeonCat_Body_T1_AnimBP.F_MED_NeonCat_Body_T1_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_286_athena_commando_f_neoncat/variants/particle/mat1.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_286_Athena_Commando_F_NeonCat",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberbody_RED.F_MED_Neoncat_Cyberbody_RED",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberhead_RED.F_MED_Neoncat_Cyberhead_RED",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberhead_RED.F_MED_Neoncat_Cyberhead_RED"
            ]
        },
        {
            "Name": "Lynx (Blue Stage 3)", 
            "ID": "CID_286_Athena_Commando_F_NeonCat_BLUE",
            "Description": "Who needs nine lives when one is enough?",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Lynx/Lynx2.Lynx2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Meshes/F_MED_NeonCat_Body_T1_AnimBP.F_MED_NeonCat_Body_T1_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_286_athena_commando_f_neoncat/variants/particle/mat2.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_286_Athena_Commando_F_NeonCat",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberbody_BLUE.F_MED_Neoncat_Cyberbody_BLUE",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberhead_BLUE.F_MED_Neoncat_Cyberhead_BLUE",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberhead_BLUE.F_MED_Neoncat_Cyberhead_BLUE"
            ]
        },
        {
            "Name": "Lynx (Black Stage 3)", 
            "ID": "CID_286_Athena_Commando_F_NeonCat_BLACK",
            "Description": "Who needs nine lives when one is enough?",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Lynx/Lynx2.Lynx2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Meshes/F_MED_NeonCat_Body_T1_AnimBP.F_MED_NeonCat_Body_T1_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_286_athena_commando_f_neoncat/variants/particle/mat3.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_286_Athena_Commando_F_NeonCat",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberbody_Black.F_MED_Neoncat_Cyberbody_Black",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberhead_BLACK.F_MED_Neoncat_Cyberhead_BLACK",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neoncat/Materials/F_MED_Neoncat_Cyberhead_BLACK.F_MED_Neoncat_Cyberhead_BLACK"
            ]
        },
        {
            "Name": "Midas + Gold Token", 
            "ID": "CID_694_Athena_Commando_M_CatBurglar_GOLDGOLDTOKENa",
            "Description": "All that glitters is yours.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MidasGoldToken/Midas.Midas",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cat_Burglar/Meshes/M_MED_Cat_Burglar_AnimBP.M_MED_Cat_Burglar_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1209624400534446090/midasgoldtoken.png?ex=65e79982&is=65d52482&hm=61c539f158be705141421837565c226f6bc9f7d053946e53801223cd6f4bbbc9&",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_694_Athena_Commando_M_CatBurglar",
            "Materials": [
                "/Game/Accessories/FORT_Backpacks/Backpack_Assassin_Suit_Coin/Materials/MI_Assassin_Suit_Coin_Backpack.MI_Assassin_Suit_Coin_Backpack",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cat_Burglar/Materials/M_MED_Cat_Burglar_Body_SL.M_MED_Cat_Burglar_Body_SL",
                "/Game/Characters/Player/Male/Medium/Heads/M_MED_Cat_Burglar_Human_Head/Materials/M_MED_Cat_Burglar_Human_Head_SL.M_MED_Cat_Burglar_Human_Head_SL",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cat_Burglar/Materials/M_MED_Cat_Burglar_FaceAcc_Hair_SL.M_MED_Cat_Burglar_FaceAcc_Hair_SL",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cat_Burglar/Materials/M_MED_Cat_Burglar_FaceAcc_Hair_2_SL.M_MED_Cat_Burglar_FaceAcc_Hair_2_SL"
            ]
        },
        {
            "Name": "Midas (Golden) + Gold Token", 
            "ID": "CID_694_Athena_Commando_M_CatBurglar_FULLGOLDGOLDTOKEN",
            "Description": "All that glitters is yours.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MidasGoldToken/Midas.Midas",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cat_Burglar/Meshes/M_MED_Cat_Burglar_AnimBP.M_MED_Cat_Burglar_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1205142907422642196/goldtok.png?ex=65d74bcb&is=65c4d6cb&hm=a208301a795908dfc1c3974556cc57f338c4c3a2c8416c9a802640c46c16c44b&",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_694_Athena_Commando_M_CatBurglar",
            "Materials": [
                "/Game/Accessories/FORT_Backpacks/Backpack_Assassin_Suit_Coin/Materials/MI_Assassin_Suit_Coin_Backpack.MI_Assassin_Suit_Coin_Backpack",
                "/Game/Weapons/WeaponSkins/Wraps/Materials/MI_WeaponWrap_CatBurglarGameplay.MI_WeaponWrap_CatBurglarGameplay",
                "/Game/Weapons/WeaponSkins/Wraps/Materials/MI_WeaponWrap_CatBurglarGameplay.MI_WeaponWrap_CatBurglarGameplay",
                "/Game/Weapons/WeaponSkins/Wraps/Materials/MI_WeaponWrap_CatBurglarGameplay.MI_WeaponWrap_CatBurglarGameplay",
                "/Game/Weapons/WeaponSkins/Wraps/Materials/MI_WeaponWrap_CatBurglarGameplay.MI_WeaponWrap_CatBurglarGameplay"
            ]
        },
        {
            "Name": "Desert Dawn Lyric", 
            "ID": "Character_TigerRootFame",
            "Description": "Mainstage material.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/DesertDawnLyric/DesertDawnLyric.DesertDawnLyric",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cactus_Rocker/Meshes/Parts/F_MED_Cactus_Rocker_FaceAcc_AnimBP.F_MED_Cactus_Rocker_FaceAcc_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_tigerrootfame/variants/parts/stage2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_TigerRootFame",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cactus_Rocker/Skins/TigerRootFame/Materials/F_MED_TigerRootFlame_Body.F_MED_TigerRootFlame_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cactus_Rocker/Skins/TigerRootFame/Materials/F_MED_TigerRootFame_Head.F_MED_TigerRootFame_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cactus_Rocker/Skins/TigerRootFame/Materials/F_MED_TigerRootFame_Hair.F_MED_TigerRootFame_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cactus_Rocker/Skins/TigerRootFame/Materials/F_MED_TigerRootFame_FaceAcc.F_MED_TigerRootFame_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cactus_Rocker/Skins/TigerRootFame/Materials/F_MED_TigerRootFame_Lens.F_MED_TigerRootFame_Lens"
            ],
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/B_Athena_PartModifier_Generic.B_Athena_PartModifier_Generic_C",
            "IdleEffectNiagara": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cactus_Rocker/Skins/TigerRootFame_Orange/FX/NS_MED_TigerRootFame_Orange.NS_MED_TigerRootFame_Orange"
        },
        {
            "Name": "Caper (White)", 
            "ID": "Character_Jumpsuit_Scrap_Mutable_WHITE2",
            "Description": "Make the score.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Caper/Caper.Caper",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/MeshCosmetics/Jumpsuit/JumpsuitAdapter_Fortnite_M_Avg_Player_Skeleton_AnimBlueprint.JumpsuitAdapter_Fortnite_M_Avg_Player_Skeleton_AnimBlueprint_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1202217879026806794/caperwhite.png?ex=65cca7a6&is=65ba32a6&hm=612ec85caed7ece0641b67f0f6e76d405259be8c6b0a23aaf8cee7475bf3ff2d&",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/MeshCosmetics/Content/Jumpsuit/F_MED_Jumpsuit_Scrap/Hero_Jumpsuit_Scrap",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Jumpsuit_Scrap/Materials/F_MED_Jumpsuit_Scrap_Eyes.F_MED_Jumpsuit_Scrap_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Materials/F_MED_Commando_Body_TV20.F_MED_Commando_Body_TV20",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Caper/T_Character_Jumpsuit_Scrap_Head_D"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Textures/F_MED_Commando_TV20_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Caper/T_Character_Jumpsuit_Scrap_Body_D"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Textures/F_MED_Commando_TV20_n",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Caper/T_Character_Jumpsuit_Scrap_Body_N"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Textures/F_MED_Commando_TV20_s",
                    "To": "/Game/Global/Textures/Default/Blanks/Temp_specular_Mask"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Textures/F_MED_Commando_TV20_m",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Caper/T_Character_Jumpsuit_Scrap_Body_M"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"  
        },
        {
            "Name": "Astro Jack", 
            "ID": "CID_761_Athena_Commando_M_CycloneSpace",
            "Description": "Out of this world.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/AstroJack/AstroJack.AstroJack",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_CycloneSpace/Meshes/M_MED_Cyclone_Space_AnimBP.M_MED_Cyclone_Space_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_761_athena_commando_m_cyclonespace/icon.png",
            "Rarity": "icon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_761_Athena_Commando_M_CycloneSpace",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_CycloneSpace/Materials/M_Med_CycloneSpace_T3_BodyMASTER_Inst.M_Med_CycloneSpace_T3_BodyMASTER_Inst",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HighTower_Tomato_Casual/Materials/MI_VertexCrunch.MI_VertexCrunch",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_CycloneSpace/Materials/M_MED_CycloneSpace_Head_T3.M_MED_CycloneSpace_Head_T3"
            ],
            "PartModifierBlueprint": "/BRCosmetics/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_Cyclone_Space.B_Athena_PartModifier_Cyclone_Space_C",
            "IdleEffectNiagara": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/FX/NS_Cyclone_Feet_Space.NS_Cyclone_Feet_Space"
        },
        {
            "Name": "Pitch Patroller (Western)", 
            "ID": "CID_A_005_Athena_Commando_F_GlobalFB_E_GTH5I_WesternCity",
            "Description": "When you're the best, it shows.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/PitchPatroller/PitchPatroller.PitchPatroller",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Elastic/Meshes/Parts/PER_Parts/F_MED_Elastic_PER_2_AnimBP.F_MED_Elastic_PER_2_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_005_athena_commando_f_globalfb_e_gth5i/variants/material/022.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_005_Athena_Commando_F_GlobalFB_E",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Global_FB/Skins/West_Sydney/Materials/F_MED_GlobalFB_WestSydney_Body.F_MED_GlobalFB_WestSydney_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Elastic/Materials/Heads/F_MED_Elastic_Head_PER_1.F_MED_Elastic_Head_PER_1",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Elastic/Materials/Hair/Rebirth/F_MED_Elastic_Hair_PER_2_NoTint.F_MED_Elastic_Hair_PER_2_NoTint"
            ]
        },
        {
            "Name": "Dark Vertex", 
            "ID": "CID_371_Athena_Commando_M_SpeedyMidnight",
            "Description": "Return from the darkness.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/DarkVertex/DarkVertex.DarkVertex",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Speedy/Meshes/M_MED_Speedy_01_Body_Skeleton_AnimBlueprint.M_MED_Speedy_01_Body_Skeleton_AnimBlueprint_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_371_Athena_Commando_M_SpeedyMidnight/icon.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_371_Athena_Commando_M_SpeedyMidnight",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Speedy/Skins/Midnight/Materials/M_Med_Speedy_Midnight_Body.M_Med_Speedy_Midnight_Body"
            ]
        },
        {
            "Name": "Windwalker Echo", 
            "ID": "CID_A_047_Athena_Commando_F_Windwalker",
            "Description": "May the winds lead you home.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/WindwalkerEcho/WindwalkerEcho.WindwalkerEcho",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Windwalker/Meshes/Parts/F_MED_Windwalker_AnimBP.F_MED_Windwalker_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_047_Athena_Commando_F_Windwalker/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_047_Athena_Commando_F_Windwalker",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Windwalker/Materials/F_MED_Windwalker_Body.F_MED_Windwalker_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Windwalker/Materials/F_MED_Windwalker_Head.F_MED_Windwalker_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Windwalker/Materials/F_MED_Windwalker_Hair.F_MED_Windwalker_Hair"
            ],
            "Info": "Some animations are missing"
        },
        {
            "Name": "Mogul Master (FRA Black&White)",
            "ID": "CID_065_Athena_Commando_F_SkiGirl_FRA?????BLACKWHITE",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/835221031932395520/848525384995700736/blackwhitemogul.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_065_Athena_Commando_F_SkiGirl_FRA",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_France/Materials/F_MED_Commando_01_BR042_France.F_MED_Commando_01_BR042_France",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_42_France/Materials/Hat_M_BR042_France.Hat_M_BR042_France"
            ],
            "TextureSwaps": [
                {
                    "From": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_France/Textures/F_MED_Commando_01_BR042_France_Body_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/FRA/F_MED_Commando_01_BR042_France_Body_D"
                },
                {
                    "From": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_42_France/Textures/M_MED_Soldier_04_France_Hat_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/MogulMaster/FRA/M_MED_Soldier_04_France_Hat_D"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Sparkle Specialist (Ghoul)",
            "ID": "CID_039_Athena_Commando_F_Disco?????GHOUL",
            "Description": "It's time to shine!",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SparkleSpecialist/SparkleSpecialist.SparkleSpecialist",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/835221031932395520/848528741462179861/ghoulspecialist.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_039_Athena_Commando_F_Disco",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_05/Materials/F_MED_Commando_Body_BR05.F_MED_Commando_Body_BR05",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Disco.F_MED_ASN_Sarah_Disco",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_Disco.F_MED_ASN_Sarah_Hair_Disco"
            ],
            "TextureSwaps": [
                {
                    "From": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_05/Textures/F_MED_Commando_01_D_BR05",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SparkleSpecialist/Skins/Ghoul/F_MED_Commando_01_D_BR05"
                },
                {
                    "From": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Textures/F_MED_ASN_Sarah_Disco_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SparkleSpecialist/Skins/Ghoul/F_MED_ASN_Sarah_Disco_D"
                },
                {
                    "From": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Textures/Disco/F_MED_ASN_Sarah_Disco_Hair_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SparkleSpecialist/Skins/Ghoul/F_MED_ASN_Sarah_Disco_Hair_D"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Sparkle Specialist (Yellow)",
            "ID": "CID_039_Athena_Commando_F_Disco?????YELLOW",
            "Description": "It's time to shine!",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SparkleSpecialist/SparkleSpecialist.SparkleSpecialist",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/835221031932395520/848535876589584404/orangesparkle.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_039_Athena_Commando_F_Disco",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_05/Materials/F_MED_Commando_Body_BR05.F_MED_Commando_Body_BR05",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Disco.F_MED_ASN_Sarah_Disco",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_Disco.F_MED_ASN_Sarah_Hair_Disco"
            ],
            "TextureSwaps": [
                {
                    "From": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_05/Textures/F_MED_Commando_01_D_BR05",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SparkleSpecialist/Skins/Yellow/F_MED_Commando_01_D_BR05"
                },
                {
                    "From": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Textures/F_MED_ASN_Sarah_Disco_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/SparkleSpecialist/Skins/Yellow/F_MED_ASN_Sarah_Disco_D"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Renegade Raider (Purple)",
            "ID": "CID_028_Athena_Commando_F?????PURPLE",
            "Description": "Rare renegade raider outfit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/RenegadeRaider2.RenegadeRaider2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/835221031932395520/848531588022140959/purplerenegadewaider.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_028_Athena_Commando_F",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Materials/F_MED_Commando_Body_TV20.F_MED_Commando_Body_TV20",
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_02.F_MED_ASN_Sarah_Head_02",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_01.F_MED_ASN_Sarah_Hair_01"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Textures/F_MED_Commando_TV20_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/Skins/Purple/F_MED_Commando_TV20_d"
                },
                {
                    "From": "/Game/Accessories/Hats/Textures/Female_Commando_08/V01/Hat_Female_Commando_08_Variant_01_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/Skins/Purple/Hat_Female_Commando_08_Variant_01_d"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Renegade Raider (Green)",
            "ID": "CID_028_Athena_Commando_F?????GREEN",
            "Description": "Rare renegade raider outfit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/RenegadeRaider2.RenegadeRaider2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1158823342028095571/1185345898063069204/gweenwene.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_028_Athena_Commando_F",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Materials/F_MED_Commando_Body_TV20.F_MED_Commando_Body_TV20",
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_02.F_MED_ASN_Sarah_Head_02",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_01.F_MED_ASN_Sarah_Hair_01"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Textures/F_MED_Commando_TV20_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/Skins/Green/greenbody"
                },
                {
                    "From": "/Game/Accessories/Hats/Textures/Female_Commando_08/V01/Hat_Female_Commando_08_Variant_01_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/Skins/Green/greenhat"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Textures/F_MED_Commando_TV20_n",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/Skins/Green/greenbody_n"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Renegade Raider (Rainbow)",
            "ID": "CID_028_Athena_Commando_F?????Rainbow",
            "Description": "Rare renegade raider outfit.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/RenegadeRaider2.RenegadeRaider2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1186775718244393033/uglyassrenegade.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_028_Athena_Commando_F",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Materials/F_MED_Commando_Body_TV20.F_MED_Commando_Body_TV20",
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_02.F_MED_ASN_Sarah_Head_02",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_01.F_MED_ASN_Sarah_Hair_01"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Textures/F_MED_Commando_TV20_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/Skins/Rainbow/Colorful_Renegade_Body"
                },
                {
                    "From": "/Game/Accessories/Hats/Textures/Female_Commando_08/V01/Hat_Female_Commando_08_Variant_01_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/Skins/Rainbow/Colorful_Renegade_Hat"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Textures/F_MED_ASN_Sarah_Head_D_02",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/RenegadeRaider/Skins/Rainbow/Colorful_Renegade_Head"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Neon",
            "ID": "CID_NEON_VALORANT",
            "Description": "Neon from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/NeonFinally.NeonFinally",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Meshes/F_MED_ChicleVeil_AnimBP.F_MED_ChicleVeil_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/bb2a4828-46eb-8cd1-e765-15848195d751/displayicon.png",
            "Rarity": "Epic",
            "Info": "Neon has GOOFY HANDS and the icon of Jamila in locker\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_ChicleVeil",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Materials/F_MED_Commando_Body_TV20.F_MED_Commando_Body_TV20",
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChefNight/Materials/F_MED_SushiChefNight_Hair.F_MED_SushiChefNight_Hair"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Textures/F_MED_Commando_TV20_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Core_Eye_DF"
                },
                {
                    "From": "/Game/Accessories/Hats/Textures/Female_Commando_08/V01/Hat_Female_Commando_08_Variant_01_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Sprinter_S0_DF"
                },
                {
                    "From": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChefNight/Textures/T_SushiChefNight_Hair_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Sprinter_S0_Hair_DF"
                }
            ]
        },
        {
            "Name": "Cypher",
            "ID": "CID_CYPHER_VALORANT",
            "Description": "Cypher from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Cypher/Cypher.Cypher",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BlueGlaze/Meshes/M_MED_BlueGlaze_AnimBP.M_MED_BlueGlaze_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/117ed9e3-49f3-6512-3ccf-0cada7e3823b/displayicon.png",
            "Rarity": "Common",
            "Info": "Cypher has GOOFY HANDS\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_BlueGlaze",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Cypher/TP_Gumshoe_S0_DF"
                }
            ]
        },
        {
            "Name": "Jett",
            "ID": "CID_JETT_VALORANT",
            "Description": "Jett from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Jett/Jett.Jett",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil_JacketOff/Meshes/F_MED_BlazerVeil_JacketOff_AnimBP.F_MED_BlazerVeil_JacketOff_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/add6443a-41bd-e414-f6ad-e58d267f4e95/displayicon.png",
            "Rarity": "Rare",
            "Info": "Jett has GOOFY HANDS\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_BlazerVeil",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes",
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Jett/TP_Wushu_S0_DF"
                },
                {
                    "From": "/Game/Accessories/Hats/Textures/Female_Commando_08/V01/Hat_Female_Commando_08_Variant_01_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Core_Eye_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Jett/TP_Wushu_S0_Hair_DF"
                }
            ]
        },
        {
            "Name": "Gekko",
            "ID": "CID_GEKKO_VALORANT",
            "Description": "Gekko from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Gekko/Gekko.Gekko",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BlueGlaze/Meshes/M_MED_BlueGlaze_AnimBP.M_MED_BlueGlaze_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/e370fa57-4757-3604-3648-499e1f642d3f/displayicon.png",
            "Rarity": "uncommon",
            "Info": "Gekko has GOOFY HANDS\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_BlueGlaze",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Gekko/gekkoblue"
                },
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Gekko/TP_AggroBot_S0_DF"
                }
            ]
        },
        {
            "Name": "Reyna",
            "ID": "CID_REYNA_VALORANT",
            "Description": "Reyna from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Reyna/Reyna.Reyna",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil_JacketOff/Meshes/F_MED_BlazerVeil_JacketOff_AnimBP.F_MED_BlazerVeil_JacketOff_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/a3bfb853-43b2-7238-a4f1-ad90e9e46bcc/displayicon.png",
            "Rarity": "Epic",
            "Info": "Reyna has GOOFY HANDS\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_BlazerVeil",
            "Materials": [
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Reyna/TP_Vampire_S0_DF"
                },
                {
                    "From": "/Game/Accessories/Hats/Textures/Female_Commando_08/V01/Hat_Female_Commando_08_Variant_01_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Core_Eye_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Reyna/TP_Vampire_S0_Hair_DF"
                }
            ]
        },
        {
            "Name": "Astra",
            "ID": "CID_ASTRA_VALORANT",
            "Description": "Astra from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Astra/Astra.Astra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil_JacketOff/Meshes/F_MED_BlazerVeil_JacketOff_AnimBP.F_MED_BlazerVeil_JacketOff_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/41fb69c1-4189-7b37-f117-bcaf1e96f1bf/displayicon.png",
            "Rarity": "Epic",
            "Info": "Astra has GOOFY HANDS\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_BlazerVeil",
            "Materials": [
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Astra/TP_Rift_S0_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Core_Eye_DF"
                }
            ]
        },
        {
            "Name": "Brimstone",
            "ID": "CID_BRIMTSONE_VALORANT",
            "Description": "Brimstone from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Brimstone/Brimstone.Brimstone",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BlueGlaze/Meshes/M_MED_BlueGlaze_AnimBP.M_MED_BlueGlaze_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/9f0d8ba9-4140-b941-57d3-a7ad57c6b417/displayicon.png",
            "Rarity": "Legendary",
            "Info": "Brimstone has GOOFY HANDS\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_BlueGlaze",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Materials/MI_BlazerVeil_Eyes.MI_BlazerVeil_Eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Brimstone/TP_Sarge_S0_StimPack_DF"
                },
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Core_Eye_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Textures/T_BlazerVeil_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Brimstone/TP_Sarge_S0_DF"
                }
            ]
        },
        {
            "Name": "Chamber",
            "ID": "CID_Chamber_VALORANT",
            "Description": "Chamber from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Chamber/Chamber.Chamber",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BlueGlaze/Meshes/M_MED_BlueGlaze_AnimBP.M_MED_BlueGlaze_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/22697a3d-45bf-8dd7-4fec-84a9e28c69d7/displayicon.png",
            "Rarity": "Legendary",
            "Info": "Chamber has GOOFY HANDS\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_BlueGlaze",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes",
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Materials/MI_BlazerVeil_Eyes.MI_BlazerVeil_Eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Superhero/whiteplain"
                },
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Core_Eye_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Textures/T_BlazerVeil_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Chamber/Body"
                },
                {
                    "From": "/Game/Accessories/Hats/Textures/Female_Commando_08/V01/Hat_Female_Commando_08_Variant_01_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Chamber/Hair"
                }
            ]
        },
        {
            "Name": "Killjoy",
            "ID": "CID_KILLJOY_VALORANT",
            "Description": "Killjoy from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Killjoy/Killjoy.Killjoy",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil_JacketOff/Meshes/F_MED_BlazerVeil_JacketOff_AnimBP.F_MED_BlazerVeil_JacketOff_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/1e58de9c-4950-5125-93e9-a0aee9f98746/displayicon.png",
            "Rarity": "Legendary",
            "Info": "Killjoy has GOOFY HANDS\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_BlazerVeil",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Materials/MI_BlazerVeil_Eyes.MI_BlazerVeil_Eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Eyes.MI_ChicleVeil_Eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Textures/T_BlazerVeil_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Killjoy/TP_Killjoy_S0_Hair_DF"
                },
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Killjoy/TP_Killjoy_S0_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Core_Eye_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Textures/T_ChicleVeil_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Killjoy/Glass_DF"
                }
            ]
        },
        {
            "Name": "Skye",
            "ID": "CID_SKYE_VALORANT",
            "Description": "Skye from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Skye/Skye.Skye",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil_JacketOff/Meshes/F_MED_BlazerVeil_JacketOff_AnimBP.F_MED_BlazerVeil_JacketOff_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/6f2a04ca-43e0-be17-7f36-b3908627744d/displayicon.png",
            "Rarity": "uncommon",
            "Info": "Skye has GOOFY HANDS\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_BlazerVeil",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Materials/MI_BlazerVeil_Eyes.MI_BlazerVeil_Eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Skye/TP_Guide_S0_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Core_Eye_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Textures/T_BlazerVeil_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Skye/TP_Guide_S0_Hair_DF"
                }
            ]
        },
        {
            "Name": "Raze",
            "ID": "CID_RAZE_VALORANT",
            "Description": "Raze from Valorant.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Raze/Raze.Raze",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil_JacketOff/Meshes/F_MED_BlazerVeil_JacketOff_AnimBP.F_MED_BlazerVeil_JacketOff_AnimBP_C",
            "Icon" :"https://media.valorant-api.com/agents/f94c3b30-42be-e959-889c-5aa313dba261/displayicon.png",
            "Rarity": "Legendary",
            "Info": "Raze has GOOFY HANDS\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_BlazerVeil",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Materials/MI_BlazerVeil_Eyes.MI_BlazerVeil_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Eyes.MI_ChicleVeil_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Raze/RocketLauncher_Clay_MI_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/NewNeon/TP_Core_Eye_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Textures/T_BlazerVeil_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Raze/TP_Clay_S0_DF"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Textures/T_ChicleVeil_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Raze/Clay_S0_Ability4_DF_01"
                }
            ]
        },
        {
            "Name": "Aizen Sosuke",
            "ID": "CID_AIZEN_NPCSKIN",
            "Description": "Aizen Sosuke",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aizen/Aizen.Aizen",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_BlueGlaze/Meshes/M_MED_BlueGlaze_AnimBP.M_MED_BlueGlaze_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1158823342028095571/1179100901772906526/AIZENSOSUKE.png",
            "Rarity": "Common",
            "Info": "Aizen Sosuke has GOOFY HANDS and wrong Hand Positions\n\nDisable Pre-download streamed assets in Epicgames settings for this skin to work",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_BlueGlaze",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Materials/MI_BlazerVeil_Eyes.MI_BlazerVeil_Eyes",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Materials/MI_SmartHyena_Eyes.MI_SmartHyena_Eyes",
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Eyes.MI_ChicleVeil_Eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Accessories/Hats/Textures/Female_Commando_08/V01/Hat_Female_Commando_08_Variant_01_d",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aizen/T_Chr0260_lens_C"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BlazerVeil/Textures/T_BlazerVeil_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aizen/T_Chr0260_cloth_C"
                },
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aizen/T_Chr0260_leather_C"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SmartHyena/Textures/T_SmartHyena_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aizen/T_Chr0260_hair_C"
                },
                {
                    "From": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Textures/T_ChicleVeil_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Aizen/T_Chr0260_face_C"
                }
            ]
        },
        {
            "Name": "Glow (Golden)",
            "ID": "CID_479_Athena_Commando_F_DavinciGOLDEN",
            "Description": "The aura of victory glows bright.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Glow/Glow.Glow",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Meshes/F_MED_DarkNinja_AnimBlueprint.F_MED_DarkNinja_AnimBlueprint_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1158823342028095571/1181678174715781220/aafafaf.png",
            "Rarity": "legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_479_Athena_Commando_F_Davinci",
            "Materials": [
                "/Game/Weapons/WeaponSkins/Wraps/Materials/MI_WeaponWrap_CatBurglarGameplay.MI_WeaponWrap_CatBurglarGameplay",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Skins/Davinci/Materials/F_MED_Davinci_Hair_01.F_MED_Davinci_Hair_01",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Skins/Davinci/Materials/F_MED_DarkNinja_Head.F_MED_DarkNinja_Head",
                "/Game/Weapons/WeaponSkins/Wraps/Materials/MI_WeaponWrap_CatBurglarGameplay.MI_WeaponWrap_CatBurglarGameplay"
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "White Knight",
            "ID": "CID_035_Athena_Commando_M_Medieval_WHITE",
            "Description": "The odious scourge of Wailing Woods.",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/BlackKnight/BlackKnight.BlackKnight",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Meshes/SK_M_Med_Soldier_04_Skeleton_AnimBP.SK_M_Med_Soldier_04_Skeleton_AnimBP_C",
            "Icon" :"https://cdn.discordapp.com/attachments/1136637018634453045/1187819107761004735/whiteknighticon.png?ex=659845bf&is=6585d0bf&hm=30e79c7934d529a4cc9296cd67c28ef383f5a4e5aa462d66d8765f375acba37b&",
            "Rarity": "Shadow",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_035_Athena_Commando_M_Medieval",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_BlackKnight/Materials/M_Med_Soldier_Body_TV28_BlackKnight.M_Med_Soldier_Body_TV28_BlackKnight",
                "/Game/Accessories/Hats/Materials/Hat_Commando_BlackKnight.Hat_Commando_BlackKnight",
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_Nutcracker/Materials/M_Med_Soldier_Head_Nutcracker.M_Med_Soldier_Head_Nutcracker",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_BlackKnight/Textures/M_Med_Soldier_Body_BLACKKNIGHT",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/BlackKnight/Skins/White/fullwhite"
                },
                {
                    "From": "/Game/Accessories/Hats/Textures/Male_Commando_BR_Knight_01/T_Helmet_Blackknight_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/BlackKnight/Skins/White/white_hat"
                },
                {
                    "From": "/Game/Accessories/Hats/Textures/Male_Commando_BR_Knight_01/T_Helmet_Blackknight_E",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/BlackKnight/Skins/White/white_eyes"
                }
            ],
            "Info": "Disable Pre-download streamed assets in Epicgames settings for this skin to work"
        },
        {
            "Name": "Spongebob",
            "ID": "CID_SPONGEBOB",
            "Description": "Goofy Spongebob",
            "Type": "UEFN",
            "Mesh": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Spongebob/spongebob.spongebob",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/idk.idk",
            "Icon" :"https://upload.wikimedia.org/wikipedia/en/thumb/3/3b/SpongeBob_SquarePants_character.svg/1200px-SpongeBob_SquarePants_character.svg.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_ZebraScramble_Bacon",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Materials/MI_Lettuce_eyes.MI_Lettuce_eyes"
            ],
            "TextureSwaps": [
                {
                    "From": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Lettuce/Textures/T_M_MED_Lettuce_Head_D",
                    "To": "/789344e0-40b4-b16f-d2fb-669cacbe87d2/Characters/Spongebob/spongeskin"
                  }
            ],
            "Info": "Spongebob has no animation\n\nDisable Pre-download streamed assets in Epicgames settings for this skin to work"
        }
    ],
    "PremiumUsers": [
        "360130213507760139",
        "534810356455964703",
        "343695572961853441",
        "869948239770705980",
        "636956888268931083",
        "1004324970186428476",
        "498487145217130498",
        "962779265877815408",
        "1004324970186428476",
        "1089523689365700679",
        "1180635586630012928",
        "993946179375202304",
        "1058912903018856508",
        "1137400638662258780",
        "1146566584010293289",
        "781952744423424010",
        "351735700586233858",
        "694003649185185874",
        "864832759700389909",
        "478116289420984342",
        "950453166036619304",
        "720333500695314453",
        "999859725376167947",
        "723636717344784464",
        "1017488406089052302",
        "1054057815376932894",
        "837536207167815681",
        "943299171006439495",
        "581483715889332224",
        "936741535083540532",
        "740987243598053598",
        "958053358260871198",
        "932738788516565022",
        "580120924326461453",
        "599699818406871040",
        "1021883572208029767",
        "1105381321590710283",
        "1123393653247840346",
        "970031142105415751",
        "1043320183034482770",
        "710157215692095611",
        "1175180080868229160",
        "1063722444482953217",
        "1175180080868229160",
        "1085685108582924308",
        "842763174797508660",
        "939951487541469184",
        "1201883347542867989",
        "883615790794960916",
        "858378096226861076",
        "400372949686812672",
        "923324341607866429",
        "941947285129031730",
        "1202526312376303647",
        "681532769104560213",
        "348447449443991566",
        "1157352344174989393",
        "1086763358486810734",
        "931946101437759588",
        "197063432875409408",
        "452122756083875841",
        "1196777945583341608",
        "796832377443450880",
        "1199402744688148553"
    ],
    "BackpackIDS": [
        "BID_004_BlackKnight",
        "BID_003_RedKnight",
        "BID_343_CubeRedKnight",
        "BID_167_RedKnightWinterFemale",
        "BID_138_Celestial",
        "BID_138_Celestial",
        "BID_373_HauntLensFlare",
        "BID_388_DevilRockMale",
        "BID_389_GoatRobe",
        "BID_428_GalileoFerry_28UZ3",
        "BID_429_GalileoRocket_ZD0AF",
        "BID_430_GalileoSpeedBoat_9RXE3",
        "BID_431_GalileoFlatbed_JV1DD",
        "BID_435_Constellation",
        "BID_539_RacerZero",
        "BID_605_Soy_Y0DW7",
        "BID_610_ElasticHologram",
        "BID_621_Poison",
        "BID_627_DeliSandwich",
        "BID_643_Tapdance",
        "BID_665_Jupiter_XD7AK",
        "BID_713_FNCS21",
        "BID_733_TheGoldenSkeletonFemale_SG4HF",
        "BID_736_DayTrader_QS4PD",
        "BID_771_Lasso_ZN4VA",
        "BID_820_QuarrelFemale_7CW31",
        "BID_821_QuarrelMale_IKIS8",
        "BID_824_CelestialGlow",
        "BID_833_TieDyeFashion",
        "BID_840_FNCSGreen",
        "BID_882_EerieGhost_Y9N1T",
        "BID_889_FullMoon",
        "BID_895_ZombieElasticNeon",
        "BID_910_FNCS_Purple",
        "BID_921_Slither_85LFG",
        "BID_929_TwentyTwo",
        "BID_941_SkullPunk_W8FWD",
        "BID_943_LlamaLeague",
        "BID_946_Galactic_S1CVQ",
        "BID_947_ZestFemale_1KIDJ",
        "BID_950_Solstice_APTB0",
        "BID_952_Gimmick_Female_KM10U",
        "BID_955_Trey_18FU6",
        "BID_967_FNCSBlue",
        "BID_991_LyricalFemale",
        "BID_A_004_NeonCatSpeed",
        "BID_A_009_Grapefruit",
        "BID_A_038_PennantSeas",
        "Backpack_QuartzBlob",
        "Backpack_Radish",
        "Backpack_RoseDust",
        "Backpack_BlueGlaze",
        "Backpack_RedPepper",
        "Backpack_BoneMarrow",
        "Backpack_PennantSeasonsTide",
        "Backpack_VitalPsych",
        "Backpack_IchorIncisor",
        "Backpack_SuperNovaTaro"
    ],
    "PickaxePathOverrides": [
        {
            "ID": "Pickaxe_ID_202_AshtonBoardwalk",
            "Override": "/Game/Athena/Items/Weapons/WID_Harvest_Pickaxe_Viper",
            "Series": "None"
        },
        {
            "ID": "Pickaxe_ID_457_HightowerSquash1H",
            "Override": "/Game/Athena/Items/Weapons/WID_Harvest_Pickaxe_ZombieElasticFemale1H",
            "Series": "Marvel"
        }
    ],
    "BlacklistedOptionIDS": [
        "Pickaxe_SpeedDial",
        "Character_VitalInventorBlock"
    ],
    "AdditionalCarItems": [
        {
            "Name": "Santa Fe",
            "Description": "Decorated charm.",
            "Icon": "https://cdn.discordapp.com/attachments/1136637018634453045/1209229687797321788/T-UI-Icon-Wheel-Lean-L.png?ex=65e629e7&is=65d3b4e7&hm=f6e0da6f2cb9780793e4420e2076d49c5207992284dd7abec10bd254df9ca199&",
            "ID": "ID_Wheel_Lean",
            "Path": "FortniteGame/Plugins/GameFeatures/VehicleCosmetics/Content/Mutable/Wheels/Lean/Wheel_Lean",
            "Type": "wheel"
        }
    ]
}

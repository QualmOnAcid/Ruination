{
    "Other": {
        "Version": "2.0.2",
        "KeyLink": "https://bstlar.com/1a/fnskinchangerkey",
        "DownloadLink": "https://bstlar.com/1a/fortniteskinchangerdownload",
        "MappingsUrl": "https://cdn.discordapp.com/attachments/1136637018634453045/1176275806754963566/mappings.usmap",
        "Discord": "https://discord.gg/rxGuHfVqJG"
    },
    "AssetUtils": {
        "MaterialOverrideFlags": 31
    },
    "UEFNFiles": {
        "pak": "https://cdn.discordapp.com/attachments/1136637018634453045/1176281551999352932/plugin.pak?ex=656e4c90&is=655bd790&hm=2cadf00eef3f5e5a23ac7f6e72c12de576f72a58691fd33a241df2feacfe0fbe&",
        "sig": "https://cdn.discordapp.com/attachments/1136637018634453045/1176281552414593125/plugin.sig?ex=656e4c90&is=655bd790&hm=018695517e031eb5c812dae32b80a7c5fbd7d30a58e9ab4487cb3bad266c9e66&",
        "ucas": "https://cdn.discordapp.com/attachments/1136637018634453045/1176281552712376320/plugin.ucas?ex=656e4c90&is=655bd790&hm=79f87552de48b9b6262b6fae0a4a8cd0d14ada00f92589e24ad980a102c6fa7f&",
        "utoc": "https://cdn.discordapp.com/attachments/1136637018634453045/1176281553148592138/plugin.utoc?ex=656e4c90&is=655bd790&hm=b40173a2e16da0b3b4a1daff29a3b1db27817913bf2839e49462266869cae3c8&"
    },
    "Dependencies": [
        {
            "type": "file",
            "name": "oo2core_9_win64.dll",
            "url": "https://cdn.discordapp.com/attachments/1136637018634453045/1161445079253266482/oo2core_9_win64.dll",
            "path": "%defaultFolder%/dependencies/",
            "replace": false
        },
        {
            "type": "file",
            "name": "mappings.usmap",
            "url": "https://cdn.discordapp.com/attachments/943929880498823288/1161725325022072933/FortniteRelease-26.30-CL-28520140-Android_oo.usmap?ex=65395805&is=6526e305&hm=361579a838224fe4475a9ea7dcb22519fd05851229a94c84a388427d954f7a74&",
            "path": "%defaultFolder%/dependencies/",
            "replace": true
        }
    ],
    "TransformCharacters": [
        {
            "Name": "Piccolo",
            "ID": "Character_ArcticIceTalus",
            "ImageID": "Character_ArcticIceTalus_YELLOW",
            "Icon": "https://fortnite-api.com/images/cosmetics/br/character_arcticicetalus/variants/parts/stage2.png",
            "CharacterParts": [
                "/Game/Athena/Heroes/Meshes/Bodies/CP_Athena_Body_M_ArcticIceTalus_Style.CP_Athena_Body_M_ArcticIceTalus_Style",
                "/Game/Characters/CharacterParts/Male/Medium/Heads/CP_Athena_Head_M_ArcticIceTalus_Style.CP_Athena_Head_M_ArcticIceTalus_Style",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_M_MED_ArcticIceTalus_Style_FaceAcc.CP_M_MED_ArcticIceTalus_Style_FaceAcc"
            ]
        },
        {
            "Name": "Jennifer Walters",
            "ID": "CID_842_Athena_Commando_F_HightowerHoneydew",
            "ImageID": "CID_842_Athena_Commando_F_HightowerHoneydew_HULK",
            "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_842_athena_commando_f_hightowerhoneydew/variants/progressive/stage2.png",
            "CharacterParts": [
                "/Game/Athena/Heroes/Meshes/Bodies/CP_Body_Commando_F_HightowerHoneydew_Swole.CP_Body_Commando_F_HightowerHoneydew_Swole",
                "/Game/Characters/CharacterParts/Female/Medium/Heads/CP_Head_F_HightowerHoneydew_Swole.CP_Head_F_HightowerHoneydew_Swole",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_F_MED_HightowerHoneydew_Swole.CP_F_MED_HightowerHoneydew_Swole"
            ]
        },
        {
            "Name": "Joey",
            "ID": "CID_A_111_Athena_Commando_M_Faux",
            "ImageID": "CID_A_111_Athena_Commando_M_Faux_FEMALE",
            "Icon": "https://cdn.discordapp.com/attachments/1134643532733354089/1171392491786862622/latest.png",
            "CharacterParts": [
                "/Game/Athena/Heroes/Meshes/Bodies/CP_Body_Commando_F_Faux.CP_Body_Commando_F_Faux",
                "/Game/Characters/CharacterParts/Female/Medium/Heads/CP_Head_F_Faux.CP_Head_F_Faux",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_F_MED_Faux_FaceAcc.CP_F_MED_Faux_FaceAcc"
            ]
        },
        {
            "Name": "Lexa",
            "ID": "CID_963_Athena_Commando_F_Lexa",
            "ImageID": "CID_963_Athena_Commando_F_Lexa_QUEEN",
            "Icon": "https://fortnite-api.com/images/cosmetics/br/cid_963_athena_commando_f_lexa/variants/progressive/stage1.png",
            "CharacterParts": [
                "/Game/Athena/Heroes/Meshes/Bodies/CP_Body_Commando_F_LexaArmored.CP_Body_Commando_F_LexaArmored",
                "/Game/Characters/CharacterParts/Female/Medium/Heads/CP_Head_F_Lexa_Armored.CP_Head_F_Lexa_Armored",
                "/Game/Characters/CharacterParts/FaceAccessories/CP_F_MED_LexaArmored_FaceAcc.CP_F_MED_LexaArmored_FaceAcc",
                "/Game/Characters/CharacterParts/Hats/Empty_Hat.Empty_Hat"
            ]
        }
    ],
    "Characters": [
        {
            "Name": "Renegade Raider",
            "ID": "CID_028_Athena_Commando_F",
            "Description": "Rare renegade raider outfit.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/RenegadeRaider/RenegadeRaider2.RenegadeRaider2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_028_athena_commando_f/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_028_Athena_Commando_F",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_20/Materials/F_MED_Commando_Body_TV20.F_MED_Commando_Body_TV20",
                "/Game/Accessories/Hats/Materials/Female_Commando_07_V01.Female_Commando_07_V01",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_02.F_MED_ASN_Sarah_Head_02",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_01.F_MED_ASN_Sarah_Hair_01"
            ]
        },
        {
            "Name": "Renegade Raider (Checkered)",
            "ID": "CID_028_Athena_Commando_F?????CHECKERED",
            "Description": "Rare renegade raider outfit.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/RenegadeRaider/RenegadeRaider2.RenegadeRaider2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_028_athena_commando_f/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_028_Athena_Commando_F",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_21/Materials/F_MED_Commando_Body_TV21.F_MED_Commando_Body_TV21",
                "/Game/Accessories/Hats/Materials/Female_Commando_07.Female_Commando_07",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_02.F_MED_ASN_Sarah_Head_02",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Hair_01.F_MED_ASN_Sarah_Hair_01"
            ]
        },
        {
            "Name": "Skull Trooper (Purple)",
            "ID": "CID_030_Athena_Commando_M_Halloween?????PURPLE",
            "Description": "Victory runs bone-deep.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/SK/SkullTrooper.SkullTrooper",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Meshes/SK_M_Med_Soldier_04_Skeleton_AnimBP.SK_M_Med_Soldier_04_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_030_athena_commando_m_halloween/variants/clothingcolor/mat1.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_030_Athena_Commando_M_Halloween",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/HW01_Red/M_Med_Soldier_04_HW01_Red.M_Med_Soldier_04_HW01_Red",
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/HW01_Red/M_Med_Commando_Head_01_HW01.M_Med_Commando_Head_01_HW01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/HW01_Red/Male_Commando_HW01.Male_Commando_HW01"
            ]
        },
        {
            "Name": "Ghoul Trooper (Pink)",
            "ID": "CID_029_Athena_Commando_F_Halloween?????PINK",
            "Description": "Epic ghoul trooper outfit.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/GhoulTrooper/Ghoul_Trooper.Ghoul_Trooper",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_029_athena_commando_f_halloween/variants/material/mat3.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_029_Athena_Commando_F_Halloween",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Zombie_Pink/Materials/F_MED_Zombie_Pink_Body.F_MED_Zombie_Pink_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Zombie_Pink/Materials/F_MED_Ramirez_Zombie_Pink_Hair.F_MED_Ramirez_Zombie_Pink_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Zombie_Pink/Materials/F_MED_Ramirez_Zombie_Pink_Head.F_MED_Ramirez_Zombie_Pink_Head"
            ]
        },
        {
            "Name": "Aerial Assault Trooper",
            "ID": "CID_017_Athena_Commando_M",
            "Description": "Rare aerial assault trooper outfit.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/AAT/AerialAssaultTrooper.AerialAssaultTrooper",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Meshes/SK_M_Med_Soldier_04_Skeleton_AnimBP.SK_M_Med_Soldier_04_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_017_athena_commando_m/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_017_Athena_Commando_M",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/CV_04/Materials/M_Med_Soldier_04_CV04.M_Med_Soldier_04_CV04",
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_Commando_02_V01.Hat_M_Commando_02_V01",
                "/Game/Characters/Player/Male/Medium/Heads/M_MED_BLK_Sydney_Head_01/Materials/M_MED_BLK_Sydney_Head_01.M_MED_BLK_Sydney_Head_01"
            ]
        },
        {
            "Name": "Wonder",
            "ID": "CID_434_Athena_Commando_F_StealthHonor",
            "Description": "Inspire wonder.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Wonder/Wonder.Wonder",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_434_athena_commando_f_stealthhonor/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_434_Athena_Commando_F_StealthHonor",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/Stealth_Honor/Materials/F_MED_Commando_Body_StealthHonor.F_MED_Commando_Body_StealthHonor",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/Stealth_Honor/Materials/F_SML_ASN_StealthHonor_Head.F_SML_ASN_StealthHonor_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/Stealth_Honor/Materials/F_SML_ASN_StealthHonor_Hair.F_SML_ASN_StealthHonor_Hair"
            ]
        },
        {
            "Name": "Wildcat",
            "ID": "CID_757_Athena_Commando_F_WildCat",
            "Description": "Victory without taking a scratch.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Wildcat/Wildcat.Wildcat",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/F_MED_Wild_Cat_AnimBP.F_MED_Wild_Cat_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_757_athena_commando_f_wildcat/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_757_Athena_Commando_F_WildCat",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Materials/F_MED_Wild_Cat_Body.F_MED_Wild_Cat_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Wild_Cat_Head/Materials/F_MED_Wild_Cat_Head.F_MED_Wild_Cat_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Materials/F_MED_Wild_Cat_FaceAcc.F_MED_Wild_Cat_FaceAcc"
            ]
        },
        {
            "Name": "Wildcat (Blue)",
            "ID": "CID_757_Athena_Commando_F_WildCat?????BLUE",
            "Description": "Victory without taking a scratch.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Wildcat/Wildcat.Wildcat",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/F_MED_Wild_Cat_AnimBP.F_MED_Wild_Cat_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_757_athena_commando_f_wildcat/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_757_Athena_Commando_F_WildCat",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Body.F_MED_Wild_Cat_Blue_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Head.F_MED_Wild_Cat_Blue_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Hair.F_MED_Wild_Cat_Blue_Hair"
            ]
        },
        {
            "Name": "Wildcat (Blueprint)",
            "ID": "CID_757_Athena_Commando_F_WildCat?????BLUEPRINT",
            "Description": "Victory without taking a scratch.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Wildcat/Wildcat.Wildcat",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Meshes/F_MED_Wild_Cat_AnimBP.F_MED_Wild_Cat_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_757_athena_commando_f_wildcat/variants/material/mat3.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_757_Athena_Commando_F_WildCat",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Blueprint/Materials/F_MED_Wild_Cat_Blueprint_Body.F_MED_Wild_Cat_Blueprint_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Head.F_MED_Wild_Cat_Blue_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Wild_Cat/Skins/Wild_Cat_Blue/Materials/F_MED_Wild_Cat_Blue_Hair.F_MED_Wild_Cat_Blue_Hair"
            ]
        },
        {
            "Name": "Travis Scott",
            "ID": "CID_703_Athena_Commando_M_Cyclone",
            "Description": "La Flame.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/TravisScott/TravisScott.TravisScott",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Meshes/M_MED_Cyclone_AnimBP.M_MED_Cyclone_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_703_athena_commando_m_cyclone/icon.png",
            "Rarity": "icon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_703_Athena_Commando_M_Cyclone",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Body_T1.M_MED_Cyclone_Body_T1",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Head.M_MED_Cyclone_Head",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_Cyclone/Materials/M_MED_Cyclone_Face_Accessories.M_MED_Cyclone_Face_Accessories"
            ]
        },
        {
            "Name": "Shady Doggo",
            "ID": "CID_A_208_Athena_Commando_M_TextilePup_C85OD",
            "Description": "Who's a stylish boy?",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/ShadyDoggo/ShadyDoggo.ShadyDoggo",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/M_MED_Textile_Pup_AnimBP.M_MED_Textile_Pup_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_208_athena_commando_m_textilepup_c85od/icon.png",
            "Rarity": "rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_208_Athena_Commando_M_TextilePup",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Materials/M_MED_TextilePup_Body.M_MED_TextilePup_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Materials/M_MED_TextilePup_Head.M_MED_TextilePup_Head",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Materials/M_MED_TextilePup_FaceAcc.M_MED_TextilePup_FaceAcc"
            ]
        },
        {
            "Name": "Shady Doggo (Red)",
            "ID": "CID_A_208_Athena_Commando_M_TextilePup_C85OD?????RED",
            "Description": "Who's a stylish boy?",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/ShadyDoggo/ShadyDoggo.ShadyDoggo",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/M_MED_Textile_Pup_AnimBP.M_MED_Textile_Pup_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_208_athena_commando_m_textilepup_c85od/variants/material/mat2.png",
            "Rarity": "rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_208_Athena_Commando_M_TextilePup",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Red/Materials/M_MED_TextilePupRed_Body.M_MED_TextilePupRed_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Materials/M_MED_TextilePup_Head.M_MED_TextilePup_Head",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Red/Materials/M_MED_TextilePupRed_FaceAcc.M_MED_TextilePupRed_FaceAcc"
            ]
        },
        {
            "Name": "Shady Doggo (Black)",
            "ID": "CID_A_208_Athena_Commando_M_TextilePup_C85OD?????BLACK",
            "Description": "Who's a stylish boy?",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/ShadyDoggo/ShadyDoggo.ShadyDoggo",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Meshes/M_MED_Textile_Pup_AnimBP.M_MED_Textile_Pup_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_208_athena_commando_m_textilepup_c85od/variants/material/mat3.png",
            "Rarity": "rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_208_Athena_Commando_M_TextilePup",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Black/Materials/M_MED_TextilePupBlack_Body.M_MED_TextilePupBlack_Body",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Materials/M_MED_TextilePup_Head.M_MED_TextilePup_Head",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Textile_Pup/Skins/Black/Materials/M_MED_TextilePupBlack_FaceAcc.M_MED_TextilePupBlack_FaceAcc"
            ]
        },
        {
            "Name": "Ikonik",
            "ID": "CID_313_Athena_Commando_M_KpopFashion",
            "Description": "Define the moment.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Ikonik/Ikonik.Ikonik",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_KpopFashion/Meshes/M_MED_Kpop_FashionAnimBP.M_MED_Kpop_FashionAnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_313_athena_commando_m_kpopfashion/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_313_Athena_Commando_M_KpopFashion",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_KpopFashion/Materials/M_MED_KpopFashion_Body.M_MED_KpopFashion_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Male/Medium/Heads/M_MED_ASN_Jae_Head_01/Materials/M_MED_ASN_Jae_Head_01.M_MED_ASN_Jae_Head_01",
                "/BRCosmetics/Accessories/Hats/M_MED_Kpop_Fashion_Hat/Materials/M_MED_Kpop_Fashion_Hat.M_MED_Kpop_Fashion_Hat"
            ]
        },
        {
            "Name": "Tsuki",
            "ID": "CID_472_Athena_Commando_F_CyberKarate",
            "Description": "Unpredictable and unforgiving.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Tsuki/Tsuki.Tsuki",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Meshes/F_MED_Cyber_Karate_AnimBp.F_MED_Cyber_Karate_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_472_athena_commando_f_cyberkarate/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_472_Athena_Commando_F_CyberKarate",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Body.F_MED_CyberKarate_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Head.F_MED_CyberKarate_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Hair.F_MED_CyberKarate_Hair"
            ]
        },
        {
            "Name": "Tsuki (Human)",
            "ID": "CID_472_Athena_Commando_F_CyberKarate?????HUMAN",
            "Description": "Unpredictable and unforgiving.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Tsuki/Tsuki.Tsuki",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Meshes/F_MED_Cyber_Karate_AnimBp.F_MED_Cyber_Karate_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_472_athena_commando_f_cyberkarate/variants/parts/stage2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_472_Athena_Commando_F_CyberKarate",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Body.F_MED_CyberKarate_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Head.F_MED_CyberKarate_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Karate/Materials/F_MED_CyberKarate_Hair.F_MED_CyberKarate_Hair"
            ]
        },
        {
            "Name": "Glow",
            "ID": "CID_479_Athena_Commando_F_Davinci",
            "Description": "The aura of victory glows bright.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Glow/Glow.Glow",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Meshes/F_MED_DarkNinja_AnimBlueprint.F_MED_DarkNinja_AnimBlueprint_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_479_athena_commando_f_davinci/icon.png",
            "Rarity": "legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_479_Athena_Commando_F_Davinci",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Skins/Davinci/Materials/F_MED_Davinci_Body.F_MED_Davinci_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Skins/Davinci/Materials/F_MED_Davinci_Hair_01.F_MED_Davinci_Hair_01",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Skins/Davinci/Materials/F_MED_DarkNinja_Head.F_MED_DarkNinja_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Skins/Davinci/Materials/F_MED_Davinci_Hood_Ins.F_MED_Davinci_Hood_Ins"
            ]
        },
        {
            "Name": "Fate",
            "ID": "CID_143_Athena_Commando_F_DarkNinja",
            "Description": "Prepare to meet your fate.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Glow/Glow.Glow",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Meshes/F_MED_DarkNinja_AnimBlueprint.F_MED_DarkNinja_AnimBlueprint_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_143_athena_commando_f_darkninja/icon.png",
            "Rarity": "legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_143_Athena_Commando_F_DarkNinja",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Materials/F_MED_DarkNinja_Body.F_MED_DarkNinja_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_DarkNinja_Head_01/Materials/F_MED_DarkNinja_Head_01.F_MED_DarkNinja_Head_01",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_DarkNinja_Head_01/Materials/F_MED_DarkNinja_Head.F_MED_DarkNinja_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_DarkNinja_01/Materials/F_MED_DarkNinja_Hood.F_MED_DarkNinja_Hood"
            ]
        },
        {
            "Name": "FNCS Renegade",
            "ID": "Character_HeadhunterStarFNCS",
            "Description": "Rebuilt and ready to be a champion.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/FNCSRenegade/FNCSRenegade.FNCSRenegade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Meshes/F_MED_HeadhunterStar_AnimBP.F_MED_HeadhunterStar_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_headhunterstarfncs/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_HeadhunterStarFNCS",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Skins/Materials/F_MED_HeadhunterStar_FNCS_Body.F_MED_HeadhunterStar_FNCS_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Skins/Materials/F_MED_HeadhunterStar_Head.F_MED_HeadhunterStar_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Skins/Materials/F_MED_HeadhunterStar_FNCS_Eyes.F_MED_HeadhunterStar_FNCS_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Skins/Materials/F_MED_HeadhunterStar_Hair.F_MED_HeadhunterStar_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_HeadhunterStar/Skins/Materials/F_MED_HeadhunterStar_FNCS_FaceAcc.F_MED_HeadhunterStar_FNCS_FaceAcc"
            ]
        },
        {
            "Name": "Galaxia",
            "ID": "CID_935_Athena_Commando_F_Eternity",
            "Description": "Empress of the Cosmos.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Galaxia/Galaxia.Galaxia",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/Meshes/F_MED_Eternity_Elite_AnimBP.F_MED_Eternity_Elite_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_935_athena_commando_f_eternity/icon.png",
            "Rarity": "legendary",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_935_Athena_Commando_F_Eternity",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/Materials/MI_F_MED_Eternity_Body.MI_F_MED_Eternity_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/Materials/MI_F_MED_Eternity_FaceAccessory.MI_F_MED_Eternity_FaceAccessory",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/Materials/F_MED_EternityElite_Hair.F_MED_EternityElite_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Eternity_Elite/Materials/F_MED_EternityElite_Head.F_MED_EternityElite_Head"
            ]
        },
        {
            "Name": "Lace",
            "ID": "CID_310_Athena_Commando_F_StreetGoth",
            "Description": "Lives for the thrill of the frill.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Lace/Lace.Lace",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Meshes/F_MED_Street_Goth_Body_Skeleton_AnimBP.F_MED_Street_Goth_Body_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_310_athena_commando_f_streetgoth/smallicon.png",
            "Rarity": "epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_310_Athena_Commando_F_StreetGoth",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Materials/F_MED_StreetGoth_Body.F_MED_StreetGoth_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Materials/F_MED_ASN_StreetGoth_Head.F_MED_ASN_StreetGoth_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Materials/F_MED_StreetGoth_Hair.F_MED_StreetGoth_Hair"
            ]
        },
        {
            "Name": "Lace (White)",
            "ID": "CID_310_Athena_Commando_F_StreetGoth?????WHITE",
            "Description": "Lives for the thrill of the frill.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Lace/Lace.Lace",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Meshes/F_MED_Street_Goth_Body_Skeleton_AnimBP.F_MED_Street_Goth_Body_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_310_athena_commando_f_streetgoth/variants/material/mat2.png",
            "Rarity": "epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_310_Athena_Commando_F_StreetGoth",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Skins/StreetGoth_Fashion/F_MED_StreetGoth_Fashion_Body.F_MED_StreetGoth_Fashion_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Skins/StreetGoth_Fashion/F_MED_ASN_StreetGoth_Fashion_Head.F_MED_ASN_StreetGoth_Fashion_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Street_Goth/Skins/StreetGoth_Fashion/F_MED_StreetGoth_Fashion_Hair.F_MED_StreetGoth_Fashion_Hair"
            ]
        },
        {
            "Name": "Black Knight",
            "ID": "CID_035_Athena_Commando_M_Medieval",
            "Description": "The odious scourge of Wailing Woods.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/BlackKnight/BlackKnight.BlackKnight",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Meshes/SK_M_Med_Soldier_04_Skeleton_AnimBP.SK_M_Med_Soldier_04_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_035_athena_commando_m_medieval/icon.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_035_Athena_Commando_M_Medieval",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_BlackKnight/Materials/M_Med_Soldier_Body_TV28_BlackKnight.M_Med_Soldier_Body_TV28_BlackKnight",
                "/Game/Accessories/Hats/Materials/Hat_Commando_BlackKnight.Hat_Commando_BlackKnight",
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_Nutcracker/Materials/M_Med_Soldier_Head_Nutcracker.M_Med_Soldier_Head_Nutcracker",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh"
            ]
        },
        {
            "Name": "Unchained Ramirez",
            "ID": "CID_A_205_Athena_Commando_F_TextileRam_GMRJ0",
            "Description": "She's coming in haute.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/UnchainedRamirez/UnchainedRamirez.UnchainedRamirez",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Textile_Ram/Meshes/F_MED_Textile_Ram_AnimBP.F_MED_Textile_Ram_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_205_athena_commando_f_textileram_gmrj0/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_205_Athena_Commando_F_TextileRam",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Textile_Ram/Materials/M_Textile_Ram_Body.M_Textile_Ram_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Textile_Ram/Materials/M_Textile_Ram_Hair.M_Textile_Ram_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Textile_Ram/Materials/F_MED_TextileRam_Head.F_MED_TextileRam_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Textile_Ram/Materials/M_Textile_Ram_FaceAcc.M_Textile_Ram_FaceAcc",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HighTower_Tomato_Casual/Materials/M_VertexCrunch.M_VertexCrunch"
            ]
        },
        {
            "Name": "Focus",
            "ID": "CID_452_Athena_Commando_F_CyberFu",
            "Description": "Visualize the future.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Focus/Focus.Focus",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Meshes/F_MED_Cyber_Fu_AnimBP.F_MED_Cyber_Fu_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_452_athena_commando_f_cyberfu/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_452_Athena_Commando_F_CyberFu",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Materials/MI_F_MED_Cyber_Fu_Body.MI_F_MED_Cyber_Fu_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Materials/MI_F_MED_Cyber_Fu_Hair.MI_F_MED_Cyber_Fu_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Materials/MI_F_MED_Cyber_Fu_FaceAcc.MI_F_MED_Cyber_Fu_FaceAcc"
            ]
        },
        {
            "Name": "Focus (Future Agent)",
            "ID": "CID_452_Athena_Commando_F_CyberFu?????FUTURE",
            "Description": "Visualize the future.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Focus/Focus.Focus",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Meshes/F_MED_Cyber_Fu_AnimBP.F_MED_Cyber_Fu_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_452_athena_commando_f_cyberfu/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_452_Athena_Commando_F_CyberFu",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Skins/Glitch/Materials/MI_F_MED_CyberFu_Glitch_Body.MI_F_MED_CyberFu_Glitch_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Skins/Glitch/Materials/MI_F_MED_CyberFu_Glitch_Hair.MI_F_MED_CyberFu_Glitch_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cyber_Fu/Skins/Glitch/Materials/MI_F_MED_CyberFu_Glitch_FaceAcc.MI_F_MED_CyberFu_Glitch_FaceAcc"
            ]
        },
        {
            "Name": "Mogul Master",
            "ID": "CID_061_Athena_Commando_F_SkiGirl",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_061_athena_commando_f_skigirl/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_061_Athena_Commando_F_SkiGirl",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/TV_38/Materials/F_MED_Commando_01_Body_TV38.F_MED_Commando_01_Body_TV38",
                "/Game/Accessories/Hats/Materials/Hat_M_Commando_14.Hat_M_Commando_14"
            ]
        },
        {
            "Name": "Mogul Master (USA)",
            "ID": "CID_062_Athena_Commando_F_SkiGirl_USA",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_062_Athena_Commando_F_SkiGirl_USA/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_062_Athena_Commando_F_SkiGirl_USA",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_USA/Materials/F_MED_Commando_01_BR042_USA.F_MED_Commando_01_BR042_USA",
                "/Game/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_42_USA/Materials/Hat_M_BR042_USA.Hat_M_BR042_USA"
            ]
        },
        {
            "Name": "Mogul Master (CAN)",
            "ID": "CID_063_Athena_Commando_F_SkiGirl_CAN",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_063_Athena_Commando_F_SkiGirl_CAN/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_063_Athena_Commando_F_SkiGirl_CAN",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_Canada/Materials/F_MED_Commando_BR042_Canada.F_MED_Commando_BR042_Canada",
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_BR042_Canada.Hat_M_BR042_Canada"
            ]
        },
        {
            "Name": "Mogul Master (GBR)",
            "ID": "CID_064_Athena_Commando_F_SkiGirl_GBR",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_064_Athena_Commando_F_SkiGirl_GBR/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_064_Athena_Commando_F_SkiGirl_GBR",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_UK/Materials/F_MED_Commando_01_BR042_UK.F_MED_Commando_01_BR042_UK",
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_Commando_14_BR042_UK.Hat_M_Commando_14_BR042_UK"
            ]
        },
        {
            "Name": "Mogul Master (FRA)",
            "ID": "CID_065_Athena_Commando_F_SkiGirl_FRA",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_065_Athena_Commando_F_SkiGirl_FRA/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_065_Athena_Commando_F_SkiGirl_FRA",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_France/Materials/F_MED_Commando_01_BR042_France.F_MED_Commando_01_BR042_France",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_42_France/Materials/Hat_M_BR042_France.Hat_M_BR042_France"
            ]
        },
        {
            "Name": "Mogul Master (GER)",
            "ID": "CID_066_Athena_Commando_F_SkiGirl_GER",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_066_Athena_Commando_F_SkiGirl_GER/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_066_Athena_Commando_F_SkiGirl_GER",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_Germany/Materials/F_MED_Commando_01_BR042_Germany.F_MED_Commando_01_BR042_Germany",
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_Commando_14_BR042_Germany.Hat_M_Commando_14_BR042_Germany"
            ]
        },
        {
            "Name": "Mogul Master (CHN)",
            "ID": "CID_067_Athena_Commando_F_SkiGirl_CHN",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_067_Athena_Commando_F_SkiGirl_CHN/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_067_Athena_Commando_F_SkiGirl_CHN",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_China/Materials/F_MED_Commando_BR042_China.F_MED_Commando_BR042_China",
                "/BRCosmetics/Accessories/Hats/Materials/Hat_M_BR042_China.Hat_M_BR042_China"
            ]
        },
        {
            "Name": "Mogul Master (KOR)",
            "ID": "CID_068_Athena_Commando_F_SkiGirl_KOR",
            "Description": "Carve through the competition.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/MogulMaster/MogulMaster.MogulMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_068_Athena_Commando_F_SkiGirl_KOR/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_068_Athena_Commando_F_SkiGirl_KOR", 
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_42_Korea/Materials/F_MED_Commando_01_BR042_Korea.F_MED_Commando_01_BR042_Korea",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_Med_Soldier_04/Skins/BR_42_Korea/Materials/Hat_M_BR042_Korea.Hat_M_BR042_Korea"
            ]
        },
        {
            "Name": "Shadow Ops",
            "ID": "CID_043_Athena_Commando_F_Stealth",
            "Description": "You didn't see a thing.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/ShadowOps/ShadowOps.ShadowOps",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_043_athena_commando_f_stealth/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_043_Athena_Commando_F_Stealth",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/BR_08/Materials/F_MED_Commando_Body_BR08.F_MED_Commando_Body_BR08",
                "/BRCosmetics/Characters/Player/Female/Small/Heads/F_SML_ASN_Kumiko_Head_01/Materials/BR08/F_SML_ASN_Kumiko_Head_01_BR08.F_SML_ASN_Kumiko_Head_01_BR08",
                "/Game/Characters/Player/Female/Small/Heads/F_SML_ASN_Kumiko_Head_01/Materials/F_SML_ASN_Kumiko_Hair_01.F_SML_ASN_Kumiko_Hair_01"
            ]
        },
        {
            "Name": "Shadow Ops (White)",
            "ID": "CID_043_Athena_Commando_F_Stealth?????WHITE",
            "Description": "You didn't see a thing.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/ShadowOps/ShadowOps.ShadowOps",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Meshes/F_Med_Soldier_01_Skeleton_AnimBP.F_Med_Soldier_01_Skeleton_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_043_athena_commando_f_stealth/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_043_Athena_Commando_F_Stealth",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Soldier_01/Skins/F_MED_Stealth_White/Materials/F_MED_Stealth_White.F_MED_Stealth_White",
                "/Game/Characters/Player/Female/Small/Heads/F_SML_StealthWhite_Head/Materials/F_SML_StealthWhite_Head.F_SML_StealthWhite_Head",
                "/Game/Characters/Player/Female/Small/Heads/F_SML_StealthWhite_Head/Materials/F_SML_StealthWhite_Hair.F_SML_StealthWhite_Hair"
            ]
        },
        {
            "Name": "Dummy",
            "ID": "CID_795_Athena_Commando_M_Dummeez",
            "Description": "Look out!",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Dummy/Dummy.Dummy",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Meshes/M_MED_Dummeez_AnimBP.M_MED_Dummeez_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_795_athena_commando_m_dummeez/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_795_Athena_Commando_M_Dummeez",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Materials/M_MED_Dummeez_Body.M_MED_Dummeez_Body",
                "/Engine/EngineMaterials/DefaultMaterial.DefaultMaterial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Materials/M_MED_Dummeez_Head.M_MED_Dummeez_Head"
            ]
        },
        {
            "Name": "Dummy (Carbon Fiber)",
            "ID": "CID_795_Athena_Commando_M_Dummeez?????CARBONFIBER",
            "Description": "Look out!",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Dummy/Dummy.Dummy",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Meshes/M_MED_Dummeez_AnimBP.M_MED_Dummeez_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_795_athena_commando_m_dummeez/variants/material/mat2.png",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_795_Athena_Commando_M_Dummeez",
            "Rarity": "Rare",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/DummeezNight/Materials/M_MED_DummeezNight_Body.M_MED_DummeezNight_Body",
                "/Engine/EngineMaterials/DefaultMaterial.DefaultMaterial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/DummeezNight/Materials/M_MED_DummeezNight_Head.M_MED_DummeezNight_Head"
            ]
        },
        {
            "Name": "Dummy Supreme ",
            "ID": "Character_Dummy_FNCS",
            "Description": "He's the best at every test.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Dummy/Dummy.Dummy",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Meshes/M_MED_Dummeez_AnimBP.M_MED_Dummeez_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_dummy_fncs/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_Dummy_FNCS",
            "Materials": [
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/Dummy_FNCS/Materials/M_MED_Dummeez_FNCS_Body.M_MED_Dummeez_FNCS_Body",
                "/Engine/EngineMaterials/DefaultMaterial.DefaultMaterial",
                "/BRCosmetics/Characters/Player/Male/Medium/Bodies/M_MED_Dummeez/Skins/Dummy_FNCS/Materials/M_MED_Dummeez_FNCS_Head.M_MED_Dummeez_FNCS_Head"
            ]
        },
        {
            "Name": "Safari",
            "ID": "CID_802_Athena_Commando_F_HeartBreaker",
            "Description": "Conqueror of the untamed.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Safari/Safari.Safari",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Heart_Breaker/Meshes/F_MED_Heart_Breaker_AnimBP.F_MED_Heart_Breaker_AnimBP_C", 
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_802_athena_commando_f_heartbreaker/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_802_Athena_Commando_F_HeartBreaker",
            "Info": "This item is not perfect!",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Heart_Breaker/Materials/F_MED_HeartBreaker_Body.F_MED_HeartBreaker_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Heart_Breaker_Head/Materials/F_MED_HeartBreaker_Head.F_MED_HeartBreaker_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Heart_Breaker/Materials/F_MED_HeartBreaker_FaceAcc_glasses.F_MED_HeartBreaker_FaceAcc_glasses",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Heart_Breaker/Materials/F_MED_HeartBreaker_FaceAcc.F_MED_HeartBreaker_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Heart_Breaker/Materials/F_MED_HeartBreaker_Hair.F_MED_HeartBreaker_Hair"
            ]
        },
        {
            "Name": "Surf Witch",
            "ID": "CID_805_Athena_Commando_F_PunkDevilSummer",
            "Description": "Curse the beach with your dark presence.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/SurfWitch/Default/SurfWitchDefault.SurfWitchDefault",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Meshes/F_MED_Punk_Devil_Summer_AnimBP.F_MED_Punk_Devil_Summer_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_805_athena_commando_f_punkdevilsummer/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_805_Athena_Commando_F_PunkDevilSummer",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Materials/F_MED_Punk_Devil_Summer_Body.F_MED_Punk_Devil_Summer_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Materials/F_MED_Punk_Devil_Summer_FaceAcc.F_MED_Punk_Devil_Summer_FaceAcc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Materials/F_MED_Punk_Devil_Summer_Glass.F_MED_Punk_Devil_Summer_Glass",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Materials/F_MED_Punk_Devil_Summer_Hair.F_MED_Punk_Devil_Summer_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Medusa_Head/Skins/Punk_Devil_Summer/Materials/F_Punk_Devil_Summer_Head.F_Punk_Devil_Summer_Head"
            ]
        },
        {
            "Name": "Surf Witch (Demon)",
            "ID": "CID_805_Athena_Commando_F_PunkDevilSummer?????DEMON",
            "Description": "Curse the beach with your dark presence.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/SurfWitch/Demon/SurfWitchDemon.SurfWitchDemon",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Meshes/F_MED_Punk_Devil_Summer_AnimBP.F_MED_Punk_Devil_Summer_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_805_athena_commando_f_punkdevilsummer/variants/parts/stage2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_805_Athena_Commando_F_PunkDevilSummer",
            "Info": "Head has wrong texture\nNot noticeable ingame",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Skin/Punk_Devil_Summer_Horns/Materials/Punk_Devil_Summe_Hornsr_Body.Punk_Devil_Summe_Hornsr_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Skin/Punk_Devil_Summer_Horns/Materials/Punk_Devil_Summer_Horns_Glass.Punk_Devil_Summer_Horns_Glass",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Skin/Punk_Devil_Summer_Horns/Materials/Punk_Devil_Summer_Horns_FaceAcc.Punk_Devil_Summer_Horns_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Punk_Devil_Summer/Skin/Punk_Devil_Summer_Horns/Materials/Punk_Devil_Summer_Horns_Hair.Punk_Devil_Summer_Horns_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Medusa_Head/Skins/Punk_Devil_Summer/Materials/F_Punk_Devil_Summer_Head.F_Punk_Devil_Summer_Head"
            ]
        },
        {
            "Name": "Kyra",
            "ID": "CID_806_Athena_Commando_F_GreenJacket",
            "Description": "Never afraid to stand out.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Kyra/Kyra.Kyra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Meshes/F_MED_Green_Jacket_AnimBP.F_MED_Green_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_806_athena_commando_f_greenjacket/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_806_Athena_Commando_F_GreenJacket",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Materials/F_MED_GreenJacket_Body.F_MED_GreenJacket_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Materials/F_MED_Green_Jacket_Hair.F_MED_Green_Jacket_Hair",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Skin/GreenJacket/Materials/F_MED_GreenJacket_Head.F_MED_GreenJacket_Head"
            ]
        },
        {
            "Name": "Love Letter Kyra",
            "ID": "CID_806_Athena_Commando_F_GreenJacket?????LOVE",
            "Description": "Never afraid to stand out.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Kyra/Kyra.Kyra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Meshes/F_MED_Green_Jacket_AnimBP.F_MED_Green_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_806_athena_commando_f_greenjacket/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_806_Athena_Commando_F_GreenJacket",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Skins/GreenJacketLove/Materials/F_MED_GreenJacketLove_Body.F_MED_GreenJacketLove_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Skins/GreenJacketLove/Materials/F_MED_GreenJacketLove_Hair.F_MED_GreenJacketLove_Hair",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Skin/GreenJacketLove/Materials/F_MED_GreenJacketLove_Head.F_MED_GreenJacketLove_Head"
            ]
        },
        {
            "Name": "Champion Kyra",
            "ID": "Character_GreenJacketFNCS",
            "Description": "Never afraid to secure the crown.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Kyra/Kyra.Kyra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Meshes/F_MED_Green_Jacket_AnimBP.F_MED_Green_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_greenjacketfncs/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_GreenJacketFNCS",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Skins/FNCS/Materials/MI_GreenJacketFNCS_Body.MI_GreenJacketFNCS_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Skins/FNCS/Materials/MI_GreenJacketFNCS_Hair.MI_GreenJacketFNCS_Hair",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_HighTower_Tomato_Casual/Materials/MI_VertexCrunch.MI_VertexCrunch",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Green_Jacket/Skins/FNCS/Materials/MI_GreenJacketFNCS_Head.MI_GreenJacketFNCS_Head"
            ]
        },
        {
            "Name": "Zadie",
            "ID": "CID_625_Athena_Commando_F_PinkTrooper",
            "Description": "She's got her eyes on you.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Zadie/Zadie2.Zadie2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Meshes/F_MED_Pink_Trooper_AnimBP.F_MED_Pink_Trooper_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_625_athena_commando_f_pinktrooper/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_625_Athena_Commando_F_PinkTrooper",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Materials/F_MED_PinkTrooper_Body.F_MED_PinkTrooper_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Materials/F_MED_PinkTrooper_hair.F_MED_PinkTrooper_hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Materials/F_MED_PinkTrooper_Mask.F_MED_PinkTrooper_Mask",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Head_01_NORIM.F_MED_Commando_Head_01_NORIM"
            ]
        },
        {
            "Name": "Zadie (Arctic)",
            "ID": "CID_625_Athena_Commando_F_PinkTrooper?????ARCTIC",
            "Description": "She's got her eyes on you.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Zadie/Zadie2.Zadie2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Meshes/F_MED_Pink_Trooper_AnimBP.F_MED_Pink_Trooper_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_625_athena_commando_f_pinktrooper/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_625_Athena_Commando_F_PinkTrooper",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Arctic/Materials/F_MED_PinkTrooperArctic_Body.F_MED_PinkTrooperArctic_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Arctic/Materials/F_MED_PinkTrooperArctic_Hair.F_MED_PinkTrooperArctic_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Arctic/Materials/F_MED_PinkTrooperArctic_Mask.F_MED_PinkTrooperArctic_Mask",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Head_01_NORIM.F_MED_Commando_Head_01_NORIM"
            ]
        },
        {
            "Name": "Zadie (Jungle)",
            "ID": "CID_625_Athena_Commando_F_PinkTrooper?????JUNGLE",
            "Description": "She's got her eyes on you.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Zadie/Zadie2.Zadie2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Meshes/F_MED_Pink_Trooper_AnimBP.F_MED_Pink_Trooper_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_625_athena_commando_f_pinktrooper/variants/material/mat3.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_625_Athena_Commando_F_PinkTrooper",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Jungle/Materials/F_MED_PinkTrooperJungel_Body.F_MED_PinkTrooperJungel_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Jungle/Materials/F_MED_PinkTrooperJungle_Hair.F_MED_PinkTrooperJungle_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Pink_Trooper/Skins/Jungle/Materials/F_MED_PinkTrooperJungle_Mask.F_MED_PinkTrooperJungle_Mask",
                "/Game/Characters/Player/Female/Medium/Heads/F_Med_Head_01/Materials/F_MED_Commando_Head_01_NORIM.F_MED_Commando_Head_01_NORIM"
            ]
        },
        {
            "Name": "Gwen Stacy",
            "ID": "Character_RoseDust_KID",
            "Description": "All right, people, let's start at the beginning one last time.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/GwenStacy/GwenStacy.GwenStacy",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_RoseDust/Meshes/F_MED_RoseDust_AnimBP.F_MED_RoseDust_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_rosedust/variants/progressive/stage2.png",
            "Rarity": "marvel",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/Hero_RoseDust",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_RoseDust/Materials/MI_F_RoseDust_Body.MI_F_RoseDust_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_RoseDust/Materials/MI_F_RoseDust_FaceAcc.MI_F_RoseDust_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_RoseDust/Materials/MI_F_RoseDust_Head.MI_F_RoseDust_Head"
            ]
        },
        {
            "Name": "Rebirth Raven",
            "ID": "CID_A_036_Athena_Commando_F_Obsidian",
            "Description": "Daughter of a demon and founding member of the Teen Titans.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/RebirthRaven/UwURabe.UwURabe",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian/Meshes/F_MED_Obsidian_AnimBP.F_MED_Obsidian_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_036_athena_commando_f_obsidian/icon.png",
            "Rarity": "dc",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_036_Athena_Commando_F_Obsidian",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian/Materials/F_MED_Obsidian_Body.F_MED_Obsidian_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian/Materials/F_MED_Obsidian_FaceAcc.F_MED_Obsidian_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian/Materials/F_MED_Obsidian_Head.F_MED_Obsidian_Head"
            ]
        },
        {
            "Name": "Rachel Roth",
            "ID": "CID_A_036_Athena_Commando_F_Obsidian?????RACHELROTH",
            "Description": "Daughter of a demon and founding member of the Teen Titans.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/RebirthRavenVariant/Rabe2.Rabe2",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian/Meshes/F_MED_Obsidian_AnimBP.F_MED_Obsidian_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_036_athena_commando_f_obsidian/variants/progressive/stage3.png",
            "Rarity": "dc",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_036_Athena_Commando_F_Obsidian",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian_Casual/Materials/F_MED_Obsidian_Casual_Body.F_MED_Obsidian_Casual_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian_Casual/Materials/F_MED_Obsidian_Casual_FaceAcc.F_MED_Obsidian_Casual_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Obsidian_Casual/Materials/F_MED_Obsidian_Casual_Head.F_MED_Obsidian_Casual_Head"
            ]
        },
        {
            "Name": "Nightlife",
            "ID": "CID_760_Athena_Commando_F_NeonTightSuit",
            "Description": "The life of the afterparty.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Nightlife/Nightlife.Nightlife",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Neon_Tight_Suit/Meshes/F_MED_Neon_Tight_Suit_AnimBP.F_MED_Neon_Tight_Suit_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_760_athena_commando_f_neontightsuit/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_760_Athena_Commando_F_NeonTightSuit",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Neon_Tight_Suit/Materials/MI_NeonTightSuit_Pink.MI_NeonTightSuit_Pink",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_Lemon_Lime_Head/Skins/NeonTightSuit/Materials/F_MED_NeonTightSuit_Head.F_MED_NeonTightSuit_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Neon_Tight_Suit/Materials/MI_NeonTightSuit_Hair_pink.MI_NeonTightSuit_Hair_pink"
            ]
        },
        {
            "Name": "Sparkplug",
            "ID": "CID_335_Athena_Commando_F_Scrapyard",
            "Description": "Scrap the competition.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Sparkplug/Sparkplug.Sparkplug",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Garbage/Meshes/F_MED_Garbage_Body_AnimBP.F_MED_Garbage_Body_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_335_athena_commando_f_scrapyard/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_335_Athena_Commando_F_Scrapyard",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Garbage/Materials/F_Med_Garbage_Body.F_Med_Garbage_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_Med_Garbage/Materials/F_MED_Garbage_Hat.F_MED_Garbage_Hat"
            ]
        },
        {
            "Name": "Sparkplug  (Ink)",
            "ID": "CID_335_Athena_Commando_F_Scrapyard?????INK",
            "Description": "Scrap the competition.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Sparkplug/Sparkplug.Sparkplug",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_Med_Garbage/Meshes/F_MED_Garbage_Body_AnimBP.F_MED_Garbage_Body_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_335_athena_commando_f_scrapyard/variants/parts/stage2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_335_Athena_Commando_F_Scrapyard",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Garbage_Ink/Materials/F_Med_Garbage_Ink_Body.F_Med_Garbage_Ink_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Materials/F_MED_ASN_Sarah_Head_01.F_MED_ASN_Sarah_Head_01",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Garbage_Ink/Materials/F_Med_Garbage_Ink_Hat.F_Med_Garbage_Ink_Hat"
            ]
        },
        {
            "Name": "Era",
            "ID": "Character_SilentTempo",
            "Description": "The past lives within her.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Era/Era.Era",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Meshes/F_MED_SilentTempo_Peril_AnimBP.F_MED_SilentTempo_Peril_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_silenttempo/variants/parts/stage2.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_SilentTempo",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Materials/F_MED_SilentTempo_Peril_Body.F_MED_SilentTempo_Peril_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Materials/F_MED_SilentTempo_Peril_Head.F_MED_SilentTempo_Peril_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Materials/F_MED_SilentTempo_Peril_Eyes.F_MED_SilentTempo_Peril_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Materials/F_MED_SilentTempo_Peril_Hair.F_MED_SilentTempo_Peril_Hair",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SilentTempo_Peril/Materials/F_MED_SilentTempo_Peril_FaceAcc.F_MED_SilentTempo_Peril_FaceAcc"
            ]
        },
        {
            "Name": "Phaedra",
            "ID": "CID_A_438_Athena_Commando_F_Gloom",
            "Description": "A dark sea witch with unknowable power.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Phaedra/Phaedra.Phaedra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Gloom/Meshes/F_MED_Gloom_AnimBP.F_MED_Gloom_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_438_athena_commando_f_gloom/variants/material/stage1.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_438_Athena_Commando_F_Gloom",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Gloom/Skins/Alt/Materials/F_MED_Gloom_Alt_Body.F_MED_Gloom_Alt_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Gloom/Material/F_MED_Gloom_Body_Opacity.F_MED_Gloom_Body_Opacity",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Gloom/Material/F_MED_Gloom_Head.F_MED_Gloom_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Gloom/Material/F_MED_Gloom_FaceAcc.F_MED_Gloom_FaceAcc"
            ]
        },
        {
            "Name": "Beach Jules",
            "ID": "CID_A_127_Athena_Commando_F_MechanicalEngineerSummer",
            "Description": "Get some R&R to go with your R&D.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/BeachJules/BeachJules.BeachJules",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Mechanical_Engineer_Summer/Meshes/F_MED_Mechanical_Engineer_Summer_AnimBP.F_MED_Mechanical_Engineer_Summer_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_127_athena_commando_f_mechanicalengineersummer/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_127_Athena_Commando_F_MechanicalEngineerSummer",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Mechanical_Engineer_Summer/Skin/Pink/Material/F_MED_Mechanical_EngineerSummer_Body_Pink.F_MED_Mechanical_EngineerSummer_Body_Pink",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Mechanical_Engineer_Summer/Skin/Pink/Material/F_MED_Mechanical_EngineerSummer_Head_Pink.F_MED_Mechanical_EngineerSummer_Head_Pink",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Mechanical_Engineer_Summer/Skin/Pink/Material/F_MED_Mechanical_EngineerSummer_FaceAcc_Pink.F_MED_Mechanical_EngineerSummer_FaceAcc_Pink",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Mechanical_Engineer_Summer/Skin/Pink/Material/F_MED_Mechanical_EngineerSummer_Body_Pink.F_MED_Mechanical_EngineerSummer_Body_Pink"
            ]
        },
        {
            "Name": "Kor (White)",
            "ID": "CID_A_202_Athena_Commando_F_Division?????WHITE",
            "Description": "Assassin for hire with some suspicious ties to the IO.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Kor/Kor.Kor",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Meshes/F_MED_Division_Jacket_AnimBP.F_MED_Division_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_202_athena_commando_f_division/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_202_Athena_Commando_F_Division",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Skins/Grey/Materials/F_MED_Division_Jacket_Grey_Body.F_MED_Division_Jacket_Grey_Body",
                "/Game/Characters/Player/Female/Medium/Heads/F_MED_Division_Jacket_Head/Materials/F_MED_Division_Jacket_Head.F_MED_Division_Jacket_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Skins/Grey/Materials/F_MED_Division_Jacket_Grey_Acc.F_MED_Division_Jacket_Grey_Acc"
            ]
        },
        {
            "Name": "Kor (Purple)",
            "ID": "CID_A_202_Athena_Commando_F_Division?????PURPLE",
            "Description": "Assassin for hire with some suspicious ties to the IO.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Kor/Kor.Kor",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Meshes/F_MED_Division_Jacket_AnimBP.F_MED_Division_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_202_athena_commando_f_division/variants/material/mat5.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_202_Athena_Commando_F_Division",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Body_Epic.F_MED_Division_Jacket_Body_Epic",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Head_Epic.F_MED_Division_Jacket_Head_Epic",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Acc_Epic.F_MED_Division_Jacket_Acc_Epic"
            ]
        },
        {
            "Name": "Kor (Blue)",
            "ID": "CID_A_202_Athena_Commando_F_Division?????BLUE",
            "Description": "Assassin for hire with some suspicious ties to the IO.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Kor/Kor.Kor",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Meshes/F_MED_Division_Jacket_AnimBP.F_MED_Division_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_202_athena_commando_f_division/variants/material/mat4.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_202_Athena_Commando_F_Division",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Body_Blue.F_MED_Division_Jacket_Body_Blue",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Head_Blue.F_MED_Division_Jacket_Head_Blue",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Acc_Blue.F_MED_Division_Jacket_Acc_Blue"
            ]
        },
        {
            "Name": "Kor (Golden)",
            "ID": "CID_A_202_Athena_Commando_F_Division?????GOLDEN",
            "Description": "Assassin for hire with some suspicious ties to the IO.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Kor/Kor.Kor",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Meshes/F_MED_Division_Jacket_AnimBP.F_MED_Division_Jacket_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_202_athena_commando_f_division/variants/material/mat6.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_202_Athena_Commando_F_Division",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Body_Legendary.F_MED_Division_Jacket_Body_Legendary",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Head_Legendary.F_MED_Division_Jacket_Head_Legendary",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Division_Jacket/Materials/Superlevel/F_MED_Division_Jacket_Acc_Legendary.F_MED_Division_Jacket_Acc_Legendary"
            ]
        },
        {
            "Name": "Aura",
            "ID": "CID_397_Athena_Commando_F_TreasureHunterFashion",
            "Description": "Get the goods in style.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Aura/Aura.Aura",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Meshes/F_MED_Treasure_Hunter_Fashion_AnimBp.F_MED_Treasure_Hunter_Fashion_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_397_Athena_Commando_F_TreasureHunterFashion/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_397_Athena_Commando_F_TreasureHunterFashion",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Materials/F_MED_TreasureHunterFashion_Body.F_MED_TreasureHunterFashion_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/TreasureHunterF/Materials/F_MED_THFashion_Head.F_MED_THFashion_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Materials/F_MED_TreasureHunterFashion_FaceAcc.F_MED_TreasureHunterFashion_FaceAcc"
            ]
        },
        {
            "Name": "Charming Aura",
            "ID": "CID_397_Athena_Commando_F_TreasureHunterFashion?????CHARMING",
            "Description": "Get the goods in style.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Aura/Aura.Aura",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Meshes/F_MED_Treasure_Hunter_Fashion_AnimBp.F_MED_Treasure_Hunter_Fashion_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_397_athena_commando_f_treasurehunterfashion/variants/parts/stage3.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_397_Athena_Commando_F_TreasureHunterFashion",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Luck/Materials/F_MED_TreasureHunter_Luck_Body.F_MED_TreasureHunter_Luck_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Luck/Materials/F_MED_TreasureHunter_Luck_Head.F_MED_TreasureHunter_Luck_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Luck/Materials/F_MED_TreasureHunter_Luck_FaceAcc.F_MED_TreasureHunter_Luck_FaceAcc"
            ]
        },
        {
            "Name": "Fresh Aura",
            "ID": "CID_A_154_Athena_Commando_F_TreasureHunterFashionMint",
            "Description": "Get the goods in style.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Aura/Aura.Aura",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Meshes/F_MED_Treasure_Hunter_Fashion_AnimBp.F_MED_Treasure_Hunter_Fashion_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_154_athena_commando_f_treasurehunterfashionmint/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_154_Athena_Commando_F_TreasureHunterFashionMint",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/B_Athena_PartModifier_Generic.B_Athena_PartModifier_Generic_C",
            "IdleEffectNiagara": "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/TreasureHunterF_Mint/FX/NS_F_TreasureHunterMint_Eyes.NS_F_TreasureHunterMint_Eyes",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Mint/Materials/F_MED_TreasureHunterMint_Body.F_MED_TreasureHunterMint_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Mint/Materials/F_MED_TreasureHunterMint_Head.F_MED_TreasureHunterMint_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/Mint/Materials/F_MED_TreasureHunterMint_FaceAcc.F_MED_TreasureHunterMint_FaceAcc"
            ]
        },
        {
            "Name": "Championship Aura",
            "ID": "Character_TreasureHunterFashionsFNCS",
            "Description": "Get the win in style.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Aura/Aura.Aura",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Meshes/F_MED_Treasure_Hunter_Fashion_AnimBp.F_MED_Treasure_Hunter_Fashion_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_TreasureHunterFashionsFNCS/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_TreasureHunterFashionFNCS",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/FNCS/Materials/F_MED_TreasureHunter_FNCS_Body.F_MED_TreasureHunter_FNCS_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/FNCS/Materials/F_MED_TreasureHunter_FNCS_Head.F_MED_TreasureHunter_FNCS_Head",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Treasure_Hunter_Fashion/Skins/FNCS/Materials/F_MED_TreasureHunter_FNCS_FaceAcc.F_MED_TreasureHunter_FNCS_FaceAcc"
            ]
        },
        {
            "Name": "Satoru Gojo (Six Eyes)",
            "ID": "Character_FloodPlain",
            "Description": "Widely known as the strongest Sorcerer of modern times.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/SatoruGojo/SatoruGojo.SatoruGojo",
            "Skeleton": "/Game/Characters/Player/Male/Medium/Base/SK_M_MALE_Base_Skeleton.SK_M_MALE_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Male/Medium/Bodies/M_MED_FloodPlain/Meshes/M_MED_FloodPlain_AnimBP.M_MED_FloodPlain_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_floodplain/variants/parts/stage2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_FloodPlain",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_ToonFE_Default.B_Athena_PartModifier_ToonFE_Default_C",
            "Materials": [
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_FloodPlain/Materials/M_MED_FloodPlain_Body.M_MED_FloodPlain_Body",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_FloodPlain/Materials/M_MED_FloodPlainBlack_FaceAcc.M_MED_FloodPlainBlack_FaceAcc",
                "/Game/Characters/Player/Male/Medium/Bodies/M_MED_FloodPlain/Materials/M_MED_FloodPlain_Head.M_MED_FloodPlain_Head"
            ]
        },
        {
            "Name": "Pastel",
            "ID": "CID_392_Athena_Commando_F_BountyBunny",
            "Description": "Spring into action.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Pastel/Pastel.Pastel",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Bounty_Bunny/Meshes/F_MED_Bounty_Bunny_AnimBp.F_MED_Bounty_Bunny_AnimBp_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_392_athena_commando_f_bountybunny/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_392_Athena_Commando_F_BountyBunny",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Bounty_Bunny/Materials/F_Med_BountyBunny_Body.F_Med_BountyBunny_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/Bounty_Bunny/Materials/F_MED_Bounty_Bunny_Head.F_MED_Bounty_Bunny_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Sarah_Head_01/Skins/Bounty_Bunny/Materials/F_MED_Bounty_Bunny_Hair.F_MED_Bounty_Bunny_Hair",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Bounty_Bunny/Materials/F_Med_BountyBunny_FaceAcc.F_Med_BountyBunny_FaceAcc"
            ]
        },
        {
            "Name": "Maki Master",
            "ID": "CID_271_Athena_Commando_F_SushiChef",
            "Description": "Roll up your sleeves and get to work.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/MakiMaster/MakiMaster.MakiMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChef/Meshes/F_MED_Sushi_Chef_AnimBP.F_MED_Sushi_Chef_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_271_athena_commando_f_sushichef/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_271_Athena_Commando_F_SushiChef",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_SushiChef/Meshes/Materials/F_MED_SushiChef.F_MED_SushiChef",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Materials/F_MED_ASN_Starfish_SushiChef_Head__v04.F_MED_ASN_Starfish_SushiChef_Head__v04",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChef/Meshes/Materials/F_Med_SushiChef_Hair.F_Med_SushiChef_Hair"
            ]
        },
        {
            "Name": "Maki Master (Night)",
            "ID": "CID_271_Athena_Commando_F_SushiChef?????BLACK",
            "Description": "Roll up your sleeves and get to work.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/MakiMaster/MakiMaster.MakiMaster",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChef/Meshes/F_MED_Sushi_Chef_AnimBP.F_MED_Sushi_Chef_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_271_athena_commando_f_sushichef/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_271_Athena_Commando_F_SushiChef",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChefNight/Materials/F_MED_SushiChefNight_Body.F_MED_SushiChefNight_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChefNight/Materials/F_MED_ASN_SushiChefNight_Head.F_MED_ASN_SushiChefNight_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_SushiChefNight/Materials/F_MED_SushiChefNight_Hair.F_MED_SushiChefNight_Hair"
            ]
        },
        {
            "Name": "Red Jade",
            "ID": "CID_545_Athena_Commando_F_SushiNinja",
            "Description": "Summon your fighting spirit.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/RedJade/RedJade.RedJade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Meshes/F_MED_Sushi_Ninja_AnimBP.F_MED_Sushi_Ninja_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_545_Athena_Commando_F_SushiNinja/icon.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_545_Athena_Commando_F_SushiNinja",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Materials/F_MED_Sushi_Ninja_Body.F_MED_Sushi_Ninja_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Textures/Sushi_Ninja/Materials/F_MED_Sushi_Ninja.F_MED_Sushi_Ninja",
                "/BRCosmetics/Accessories/Hats/F_MED_Sushi_Ninja_Acc/Materials/F_MED_Sushi_Ninja_Acc.F_MED_Sushi_Ninja_Acc"
            ]
        },
        {
            "Name": "Blue Jade",
            "ID": "CID_545_Athena_Commando_F_SushiNinja?????BLUE",
            "Description": "Summon your fighting spirit.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/RedJade/RedJade.RedJade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Meshes/F_MED_Sushi_Ninja_AnimBP.F_MED_Sushi_Ninja_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_545_athena_commando_f_sushininja/variants/material/mat2.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_545_Athena_Commando_F_SushiNinja",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Skins/Blue/Materials/F_MED_Sushi_Ninja_Blue_Body.F_MED_Sushi_Ninja_Blue_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_ASN_Starfish_Head_01/Skin/Sushi_Ninja_Blue/Materials/F_MED_Sushi_Ninja_Blue.F_MED_Sushi_Ninja_Blue",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Skins/Blue/Materials/F_MED_Sushi_Ninja_Blue_Acc.F_MED_Sushi_Ninja_Blue_Acc"
            ]
        },
        {
            "Name": "Red Jade (Maki Monster)",
            "ID": "CID_545_Athena_Commando_F_SushiNinja?????MONSTER",
            "Description": "Summon your fighting spirit.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/RedJade/RedJade.RedJade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Meshes/F_MED_Sushi_Ninja_AnimBP.F_MED_Sushi_Ninja_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_545_athena_commando_f_sushininja/variants/material/mat3.png",
            "Rarity": "uncommon",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_545_Athena_Commando_F_SushiNinja",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Skins/Glow/Materials/F_Sushi_NinjaGlow_Body.F_Sushi_NinjaGlow_Body",
                "/Game/Gadgets/Assets/VinderTech_GliderChute/Glider_Thrive_Female/FX/Material/M_HideMesh.M_HideMesh",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Skins/Glow/Materials/F_MED_Sushi_NinjaGlow_Head.F_MED_Sushi_NinjaGlow_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Sushi_Ninja/Skins/Glow/Materials/F_Sushi_NinjaGlow_FaceAcc.F_Sushi_NinjaGlow_FaceAcc"
            ]
        },
        {
            "Name": "Sarah Connor",
            "ID": "CID_992_Athena_Commando_F_Typhoon_LPFU6",
            "Description": "She was just a girl from LA, but destiny had big plans for her.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/SarahConnor/SarahConnor.SarahConnor",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Typhoon/Meshes/F_MED_Typhoon_AnimBP.F_MED_Typhoon_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_992_athena_commando_f_typhoon_lpfu6/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_992_Athena_Commando_F_Typhoon",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Typhoon/Materials/F_MED_Typhoon_Body.F_MED_Typhoon_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Typhoon/Materials/F_MED_Typhoon_Head.F_MED_Typhoon_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Typhoon/Materials/F_MED_Typhoon_FaceAcc.F_MED_Typhoon_FaceAcc"
            ]
        },
        {
            "Name": "Indigo Kuno",
            "ID": "CID_660_Athena_Commando_F_BandageNinjaBlue",
            "Description": "The Falcon Clan's finest.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/IndigoKuno/IndigoKuno.IndigoKuno",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Meshes/F_MED_Bandage_Ninja_AnimBP.F_MED_Bandage_Ninja_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_660_athena_commando_f_bandageninjablue/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_660_Athena_Commando_F_BandageNinjaBlue",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/BandageNinjaBlue/Materials/F_MED_BandageNinja_Blue_Body.F_MED_BandageNinja_Blue_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/BandageNinjaBlue/Materials/F_MED_BandageNinja_Blue_Body.F_MED_BandageNinja_Blue_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/BandageNinjaBlue/Materials/F_MED_BandageNinja_Blue_FaceAcc.F_MED_BandageNinja_Blue_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/Repaint01/Materials/F_MED_BandageNinja_Repaint01_Head.F_MED_BandageNinja_Repaint01_Head",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_BandageNinja/Skin/BandageNinjaBlue/Materials/F_MED_BandageNinja_Blue_Hair.F_MED_BandageNinja_Blue_Hair"
            ]
        },
        {
            "Name": "Arcane Jinx",
            "ID": "CID_A_256_Athena_Commando_F_UproarBraids_8IOZW",
            "Description": "She's a totally innocent bystander... with a rocket launcher.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/ArcaneJinx/ArcaneJinx.ArcaneJinx",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Uproar_Braids/Meshes/F_MED_Uproar_Braids_AnimBP.F_MED_Uproar_Braids_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_256_Athena_Commando_F_UproarBraids_8IOZW/icon.png",
            "Rarity": "gaminglegends",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_256_Athena_Commando_F_UproarBraids",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Uproar_Braids/Materials/F_MED_UproarBraids_Body.F_MED_UproarBraids_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Uproar_Braids/Materials/F_MED_UproarBraids_Head.F_MED_UproarBraids_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Uproar_Braids/Materials/F_MED_UproarBraids_FaceAcc.F_MED_UproarBraids_FaceAcc"
            ]
        },
        {
            "Name": "Eleven",
            "ID": "Character_GroovyReader",
            "Description": "Telekinetic teen who escaped Dr. Brenner and Hawkins National Laboratory.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Eleven/Eleven.Eleven",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Meshes/F_MED_GroovyReader_AnimBP.F_MED_GroovyReader_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_GroovyReader/icon.png",
            "Rarity": "epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_GroovyReader",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Materials/MI_GroovyReader_Body.MI_GroovyReader_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Materials/MI_GroovyReader_Head.MI_GroovyReader_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Materials/MI_GroovyReader_Eyes.MI_GroovyReader_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_GroovyReader/Materials/MI_GroovyReader_FaceAcc.MI_GroovyReader_FaceAcc"
            ]
        },
        {
            "Name": "Jawbreaker",
            "ID": "CID_583_Athena_Commando_F_NoshHunter",
            "Description": "She's playing the most delicious game.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Jawbreaker/Jawbreaker.Jawbreaker",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_NoshHunter/Meshes/Nosh_Hunter_AnimBP.Nosh_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_583_Athena_Commando_F_NoshHunter/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_583_Athena_Commando_F_NoshHunter",
            "Materials": [
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_NoshHunter/Materials/F_MED_NoshHunter_Body.F_MED_NoshHunter_Body",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_NoshHunter/Materials/F_MED_NoshHunter_faceAcc.F_MED_NoshHunter_faceAcc",
                "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_NoshHunter/Materials/F_MED_NoshHunter_FaceAcc_Glass.F_MED_NoshHunter_FaceAcc_Glass",
                "/BRCosmetics/Characters/Player/Female/Medium/Heads/F_MED_CAU_Durrburger_PJ_Head_01/Skin/Materials/F_MED_NoshHunter.F_MED_NoshHunter"
            ]
        },
        {
            "Name": "Galaxy Crossfade",
            "ID": "Character_StarStray",
            "Description": "Blast beats across the galaxy.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/GalaxyCrossfade/GalaxyCrossfade.GalaxyCrossfade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Meshes/F_MED_StarStray_AnimBP.F_MED_StarStray_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_StarStray/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_StarStray",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_StarStrayGalaxy.B_Athena_PartModifier_StarStrayGalaxy_C",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Skins/Galaxy/Materials/StarStrayGalaxy_Body.StarStrayGalaxy_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Skins/Galaxy/Materials/StarStrayGalaxy_Head.StarStrayGalaxy_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Eyes.StarStray_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Hair.StarStray_Hair"
            ]
        },
        {
            "Name": "Encore Crossfade",
            "ID": "Character_StarStray?????ENCORE",
            "Description": "Blast beats across the galaxy.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/GalaxyCrossfade/GalaxyCrossfade.GalaxyCrossfade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Meshes/F_MED_StarStray_AnimBP.F_MED_StarStray_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_starstray/variants/material/mat2.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_StarStray",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_StarStrayGalaxy.B_Athena_PartModifier_StarStrayGalaxy_C",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Body.StarStray_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Head.StarStray_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Eyes.StarStray_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Hair.StarStray_Hair"
            ]
        },
        {
            "Name": "Cosmic Crossfade",
            "ID": "Character_StarStray?????COSMIC",
            "Description": "Blast beats across the galaxy.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/GalaxyCrossfade/GalaxyCrossfade.GalaxyCrossfade",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Meshes/F_MED_StarStray_AnimBP.F_MED_StarStray_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_starstray/variants/material/mat3.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_StarStray",
            "PartModifierBlueprint": "/Game/Athena/Cosmetics/Blueprints/Part_Modifiers/B_Athena_PartModifier_StarStrayGalaxy.B_Athena_PartModifier_StarStrayGalaxy_C",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Skins/Rave/Materials/StarStrayRave_Body.StarStrayRave_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Skins/Rave/Materials/StarStrayRave_Head.StarStrayRave_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Eyes.StarStray_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_StarStray/Materials/StarStray_Hair.StarStray_Hair"
            ]
        },
        {
            "Name": "Rebirth Harley Quinn",
            "ID": "CID_A_063_Athena_Commando_F_CottonCandy",
            "Description": "She's callin' the shots now, puddin'.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/RebirthHarleyQuinn/RebirthHarleyQuinn.RebirthHarleyQuinn",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/BRCosmetics/Characters/Player/Female/Medium/Bodies/F_MED_Cotton_Candy/Meshes/F_MED_Cotton_Candy_AnimBP.F_MED_Cotton_Candy_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_063_Athena_Commando_F_CottonCandy/icon.png",
            "Rarity": "dc",
            "hidpath": "FortniteGame/Plugins/GameFeatures/BRCosmetics/Content/Athena/Heroes/HID_A_063_Athena_Commando_F_CottonCandy",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cotton_Candy/Materials/F_MED_Cotton_Candy_Body.F_MED_Cotton_Candy_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Cotton_Candy/Materials/F_MED_Cotton_Candy_Head.F_MED_Cotton_Candy_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Lollipop/Materials/F_MED_Lollipop_FaceAcc.F_MED_Lollipop_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Lollipop/Materials/F_MED_Lollipop_FaceAcc_Accessories.F_MED_Lollipop_FaceAcc_Accessories"
            ]
        },
        {
            "Name": "Jamila (Reactive)",
            "ID": "Character_ChicleVeil",
            "Description": "Build modern invention from ancient insight.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Jamila/Jamila.Jamila",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Meshes/F_MED_ChicleVeil_AnimBP.F_MED_ChicleVeil_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_chicleveil/variants/parts/stage1.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_ChicleVeil",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Body_Reactive.MI_ChicleVeil_Body_Reactive",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Head.MI_ChicleVeil_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Eyes.MI_ChicleVeil_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_FaceAcc.MI_ChicleVeil_FaceAcc"
            ]
        },
        {
            "Name": "Jamila",
            "ID": "Character_ChicleVeil?????NORMAL",
            "Description": "Build modern invention from ancient insight.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Jamila/Jamila.Jamila",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Meshes/F_MED_ChicleVeil_AnimBP.F_MED_ChicleVeil_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_ChicleVeil/icon.png",
            "Rarity": "Epic",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_ChicleVeil",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Body.MI_ChicleVeil_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Head.MI_ChicleVeil_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_Eyes.MI_ChicleVeil_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_ChicleVeil/Materials/MI_ChicleVeil_FaceAcc.MI_ChicleVeil_FaceAcc"
            ]
        },
        {
            "Name": "Birch",
            "ID": "Character_TalonHime",
            "Description": "Her roots run deep.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Birch/Birch.Birch",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_TalonHime/Meshes/F_MED_TalonHime_AnimBP.F_MED_TalonHime_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_TalonHime/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_TalonHime",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_TalonHime/Materials/MI_TalonHime_Body_2023.MI_TalonHime_Body_2023",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_TalonHime/Materials/MI_TalonHime_Head.MI_TalonHime_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_TalonHime/Materials/MI_TalonHime_Eyes.MI_TalonHime_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_TalonHime/Materials/MI_TalonHime_FaceAcc.MI_TalonHime_FaceAcc"
            ]
        },
        {
            "Name": "Countess Daraku",
            "ID": "Character_IchorIncisor",
            "Description": "Embrace your thirst for fame.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/CountessDaraku/CountessDaraku.CountessDaraku",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IchorIncisor/Meshes/F_MED_IchorIncisor_AnimBlueprint.F_MED_IchorIncisor_AnimBlueprint_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_IchorIncisor/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_IchorIncisor",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IchorIncisor/Materials/F_MED_IchorIncisor_Body.F_MED_IchorIncisor_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IchorIncisor/Materials/F_MED_IchorIncisor_Head.F_MED_IchorIncisor_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IchorIncisor/Materials/F_MED_IchorIncisor_FaceAcc.F_MED_IchorIncisor_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_IchorIncisor/Materials/F_MED_IchorIncisor_FaceAcc_Glass.F_MED_IchorIncisor_FaceAcc_Glass"
            ]
        },
        {
            "Name": "Harmony Lee",
            "ID": "Character_BrightShimmer",
            "Description": "Breeze your way to victory.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/HarmonyLee/HarmonyLee.HarmonyLee",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Meshes/F_MED_BrightShimmer_AnimBP.F_MED_BrightShimmer_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_BrightShimmer/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_BrightShimmer",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_Body.MI_Bright_Shimmer_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_Head.MI_Bright_Shimmer_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_Eyes.MI_Bright_Shimmer_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_FaceAcc_Glasses.MI_Bright_Shimmer_FaceAcc_Glasses",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_FaceAcc.MI_Bright_Shimmer_FaceAcc"
            ]
        },
        {
            "Name": "Harmony Lee (Streetwear)",
            "ID": "Character_BrightShimmer?????STREETWEAR",
            "Description": "Breeze your way to victory.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/HarmonyLee_Streetwear/HarmonyLee_Streetwear.HarmonyLee_Streetwear",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer_Casual/Meshes/F_MED_BrightShimmer_Casual_AnimBP.F_MED_BrightShimmer_Casual_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_brightshimmer/variants/parts/stage2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_BrightShimmer",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer_Casual/Materials/F_MED_BrightShimmer_Casual_Body.F_MED_BrightShimmer_Casual_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer_Casual/Materials/F_MED_BrightShimmer_Casual_FaceAcc.F_MED_BrightShimmer_Casual_FaceAcc",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_Head.MI_Bright_Shimmer_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_BrightShimmer/Materials/MI_Bright_Shimmer_Eyes.MI_Bright_Shimmer_Eyes"
            ]
        },
        {
            "Name": "Elite Striker Sephira",
            "ID": "Character_CameraShake",
            "Description": "Go for the shutout.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/EliteStrikerSephira/EliteStrikerSephira.EliteStrikerSephira",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Meshes/F_MED_CameraShake_AnimBP.F_MED_CameraShake_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_camerashake/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_CameraShake",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_Body.F_MED_CameraShake_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_Head.F_MED_CameraShake_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_Eyes.F_MED_CameraShake_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_FaceAcc.F_MED_CameraShake_FaceAcc"
            ]
        },
        {
            "Name": "Elite Striker Sephira (Away Game)",
            "ID": "Character_CameraShake?????DARK",
            "Description": "Go for the shutout.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/EliteStrikerSephira/EliteStrikerSephira.EliteStrikerSephira",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Meshes/F_MED_CameraShake_AnimBP.F_MED_CameraShake_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/character_camerashake/variants/material/mat2.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_CameraShake",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Skins/Dark/Materials/MI_CameraShake_Body.MI_CameraShake_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_Head.F_MED_CameraShake_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_Eyes.F_MED_CameraShake_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_CameraShake/Materials/F_MED_CameraShake_FaceAcc.F_MED_CameraShake_FaceAcc"
            ]
        },
        {
            "Name": "Festival Phaedra",
            "ID": "Character_MelodyUrchin",
            "Description": "Rise from the deep... to party.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/FestivalPhaedra/FestivalPhaedra.FestivalPhaedra",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_MelodyUrchin/Meshes/F_MED_MelodyUrchin_AnimBP.F_MED_MelodyUrchin_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/Character_MelodyUrchin/icon.png",
            "Rarity": "Rare",
            "hidpath": "FortniteGame/Content/Athena/Heroes/Hero_MelodyUrchin",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_MelodyUrchin/Materials/MI_MelodyUrchin_Body.MI_MelodyUrchin_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_MelodyUrchin/Materials/MI_MelodyUrchin_Head.MI_MelodyUrchin_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_MelodyUrchin/Materials/MI_MelodyUrchin_Eyes.MI_MelodyUrchin_Eyes",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_MelodyUrchin/Materials/MI_MelodyUrchin_FaceAcc.MI_MelodyUrchin_FaceAcc"
            ]
        },
        {
            "Name": "Torin",
            "ID": "CID_A_200_Athena_Commando_F_GhostHunter",
            "Description": "A hunter prepared for every dimension.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Torin/Torin.Torin",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Meshes/F_MED_Ghost_Hunter_AnimBP.F_MED_Ghost_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/CID_A_200_Athena_Commando_F_GhostHunter/icon.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_200_Athena_Commando_F_GhostHunter",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Dark/F_MED_Ghost_Hunter_Dark_Body.F_MED_Ghost_Hunter_Dark_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/F_MED_Ghost_Hunter_Head.F_MED_Ghost_Hunter_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Dark/F_MED_Ghost_Hunter_Dark_FaceAcc.F_MED_Ghost_Hunter_Dark_FaceAcc"
            ]
        },
        {
            "Name": "Torin (Dark)",
            "ID": "CID_A_200_Athena_Commando_F_GhostHunter?????BLACK",
            "Description": "A hunter prepared for every dimension.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Torin/Torin.Torin",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Meshes/F_MED_Ghost_Hunter_AnimBP.F_MED_Ghost_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_200_athena_commando_f_ghosthunter/variants/material/mat2.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_200_Athena_Commando_F_GhostHunter",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/F_MED_Ghost_Hunter_Body.F_MED_Ghost_Hunter_Body",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/F_MED_Ghost_Hunter_Head.F_MED_Ghost_Hunter_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/F_MED_Ghost_Hunter_FaceAcc.F_MED_Ghost_Hunter_FaceAcc"
            ]
        },
        {
            "Name": "Torin (Blue)",
            "ID": "CID_A_200_Athena_Commando_F_GhostHunter?????BLUE",
            "Description": "A hunter prepared for every dimension.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Torin/Torin.Torin",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Meshes/F_MED_Ghost_Hunter_AnimBP.F_MED_Ghost_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_200_athena_commando_f_ghosthunter/variants/material/mat3.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_200_Athena_Commando_F_GhostHunter",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_Blue.F_MED_Ghost_Hunter_Blue",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_SL_Head_Blue.F_MED_Ghost_Hunter_SL_Head_Blue",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_FaceAcc_Blue.F_MED_Ghost_Hunter_FaceAcc_Blue"
            ]
        },
        {
            "Name": "Torin (Purple)",
            "ID": "CID_A_200_Athena_Commando_F_GhostHunter?????PURPLE",
            "Description": "A hunter prepared for every dimension.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Torin/Torin.Torin",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Meshes/F_MED_Ghost_Hunter_AnimBP.F_MED_Ghost_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_200_athena_commando_f_ghosthunter/variants/material/mat4.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_200_Athena_Commando_F_GhostHunter",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_Epic.F_MED_Ghost_Hunter_Epic",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/F_MED_Ghost_Hunter_Head.F_MED_Ghost_Hunter_Head",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_FaceAcc_Epic.F_MED_Ghost_Hunter_FaceAcc_Epic"
            ]
        },
        {
            "Name": "Torin (Golden)",
            "ID": "CID_A_200_Athena_Commando_F_GhostHunter?????GOLDEN",
            "Description": "A hunter prepared for every dimension.",
            "Type": "UEFN",
            "Mesh": "/bc2ce84a-4a28-9b29-dcde-d28842ce0cdc/Characters/Torin/Torin.Torin",
            "Skeleton": "/Game/Characters/Player/Female/Medium/Base/SK_M_Female_Base_Skeleton.SK_M_Female_Base_Skeleton",
            "Animation": "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Meshes/F_MED_Ghost_Hunter_AnimBP.F_MED_Ghost_Hunter_AnimBP_C",
            "Icon" :"https://fortnite-api.com/images/cosmetics/br/cid_a_200_athena_commando_f_ghosthunter/variants/material/mat5.png",
            "Rarity": "Legendary",
            "hidpath": "FortniteGame/Content/Athena/Heroes/HID_A_200_Athena_Commando_F_GhostHunter",
            "Materials": [
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_Legendary.F_MED_Ghost_Hunter_Legendary",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_SL_Head_Legendary.F_MED_Ghost_Hunter_SL_Head_Legendary",
                "/Game/Characters/Player/Female/Medium/Bodies/F_MED_Ghost_Hunter/Materials/Superlevel/F_MED_Ghost_Hunter_FaceAcc_Legendary.F_MED_Ghost_Hunter_FaceAcc_Legendary"
            ]
        }
    ],
    "PremiumUsers": [
        "360130213507760139",
        "534810356455964703",
        "343695572961853441"
    ]
}
